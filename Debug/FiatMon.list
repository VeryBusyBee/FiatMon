
FiatMon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c54  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08009d64  08009d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f8c  08009f8c  00020718  2**0
                  CONTENTS
  4 .ARM          00000000  08009f8c  08009f8c  00020718  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f8c  08009f8c  00020718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f98  08009f98  00019f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000718  20000000  08009f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019ec  20000718  0800a6b4  00020718  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002104  0800a6b4  00022104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020718  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027b07  00000000  00000000  00020741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005565  00000000  00000000  00048248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d20  00000000  00000000  0004d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b38  00000000  00000000  0004f4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc86  00000000  00000000  00051008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201ae  00000000  00000000  00070c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a08be  00000000  00000000  00090e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001316fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000806c  00000000  00000000  00131750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000718 	.word	0x20000718
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d4c 	.word	0x08009d4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000071c 	.word	0x2000071c
 800014c:	08009d4c 	.word	0x08009d4c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ce:	2afd      	cmp	r2, #253	; 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	; 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	; 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	; 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_fcmpun>:
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000714:	d102      	bne.n	800071c <__aeabi_fcmpun+0x14>
 8000716:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800071a:	d108      	bne.n	800072e <__aeabi_fcmpun+0x26>
 800071c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000720:	d102      	bne.n	8000728 <__aeabi_fcmpun+0x20>
 8000722:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000726:	d102      	bne.n	800072e <__aeabi_fcmpun+0x26>
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	4770      	bx	lr
 800072e:	f04f 0001 	mov.w	r0, #1
 8000732:	4770      	bx	lr

08000734 <__aeabi_f2uiz>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	d20e      	bcs.n	8000756 <__aeabi_f2uiz+0x22>
 8000738:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800073c:	d30b      	bcc.n	8000756 <__aeabi_f2uiz+0x22>
 800073e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000742:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000746:	d409      	bmi.n	800075c <__aeabi_f2uiz+0x28>
 8000748:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800074c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000750:	fa23 f002 	lsr.w	r0, r3, r2
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr
 800075c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000760:	d101      	bne.n	8000766 <__aeabi_f2uiz+0x32>
 8000762:	0242      	lsls	r2, r0, #9
 8000764:	d102      	bne.n	800076c <__aeabi_f2uiz+0x38>
 8000766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800076a:	4770      	bx	lr
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop

08000774 <_Z8CAN_SendPhhm>:


}

//function to send CAN message (using HAL)
void CAN_Send(uint8_t *message_out, uint8_t len, uint32_t address){
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	460b      	mov	r3, r1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status;

	pHeader.ExtId = address;
 8000782:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <_Z8CAN_SendPhhm+0x34>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6053      	str	r3, [r2, #4]
	pHeader.DLC = (uint32_t) len;
 8000788:	7afb      	ldrb	r3, [r7, #11]
 800078a:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <_Z8CAN_SendPhhm+0x34>)
 800078c:	6113      	str	r3, [r2, #16]

	status = HAL_CAN_AddTxMessage(&hcan, &pHeader, message_out, &TxMailbox);
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <_Z8CAN_SendPhhm+0x38>)
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	4905      	ldr	r1, [pc, #20]	; (80007a8 <_Z8CAN_SendPhhm+0x34>)
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <_Z8CAN_SendPhhm+0x3c>)
 8000796:	f002 fe43 	bl	8003420 <HAL_CAN_AddTxMessage>
 800079a:	4603      	mov	r3, r0
 800079c:	75fb      	strb	r3, [r7, #23]
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000734 	.word	0x20000734
 80007ac:	2000074c 	.word	0x2000074c
 80007b0:	200009d0 	.word	0x200009d0

080007b4 <_Z9CAN_Sleepv>:

void CAN_Sleep()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	SET_BIT(hcan.Instance->IER, CAN_IER_WKUIE); //enable the wake up interrupt
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <_Z9CAN_Sleepv+0x44>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	695a      	ldr	r2, [r3, #20]
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <_Z9CAN_Sleepv+0x44>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80007c6:	615a      	str	r2, [r3, #20]
	SET_BIT(hcan.Instance->MCR, CAN_MCR_SLEEP); //sleep bxCAN
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <_Z9CAN_Sleepv+0x44>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <_Z9CAN_Sleepv+0x44>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f042 0202 	orr.w	r2, r2, #2
 80007d6:	601a      	str	r2, [r3, #0]
	SET_BIT(hcan.Instance->MCR, CAN_MCR_AWUM); //activate automatic bxCAN wakeup
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <_Z9CAN_Sleepv+0x44>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <_Z9CAN_Sleepv+0x44>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f042 0220 	orr.w	r2, r2, #32
 80007e6:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(TJA_S_GPIO_Port, TJA_S_Pin, GPIO_PIN_SET);	//set TJA1050 silent mode
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ee:	4803      	ldr	r0, [pc, #12]	; (80007fc <_Z9CAN_Sleepv+0x48>)
 80007f0:	f003 fef9 	bl	80045e6 <HAL_GPIO_WritePin>

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200009d0 	.word	0x200009d0
 80007fc:	40011000 	.word	0x40011000

08000800 <_Z10CAN_Resumev>:

void CAN_Resume()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	CLEAR_BIT(hcan.Instance->IER, CAN_IER_WKUIE); //disable the wake up interrupt
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <_Z10CAN_Resumev+0x3c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <_Z10CAN_Resumev+0x3c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000812:	615a      	str	r2, [r3, #20]
	CLEAR_BIT(hcan.Instance->MCR, CAN_MCR_SLEEP); //disable sleep bxCAN
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <_Z10CAN_Resumev+0x3c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <_Z10CAN_Resumev+0x3c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f022 0202 	bic.w	r2, r2, #2
 8000822:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(TJA_S_GPIO_Port, TJA_S_Pin, GPIO_PIN_RESET);	//set TJA1050 hi-speed mode
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <_Z10CAN_Resumev+0x40>)
 800082c:	f003 fedb 	bl	80045e6 <HAL_GPIO_WritePin>
	HAL_CAN_MspInit(&hcan);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <_Z10CAN_Resumev+0x3c>)
 8000832:	f001 fbb7 	bl	8001fa4 <HAL_CAN_MspInit>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200009d0 	.word	0x200009d0
 8000840:	40011000 	.word	0x40011000

08000844 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4a06      	ldr	r2, [pc, #24]	; (800086c <vApplicationGetIdleTaskMemory+0x28>)
 8000854:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	4a05      	ldr	r2, [pc, #20]	; (8000870 <vApplicationGetIdleTaskMemory+0x2c>)
 800085a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	20000778 	.word	0x20000778
 8000870:	200007cc 	.word	0x200007cc

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b092      	sub	sp, #72	; 0x48
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087a:	f002 fb73 	bl	8002f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087e:	f000 f865 	bl	800094c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000882:	f000 fa51 	bl	8000d28 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8000886:	f000 f987 	bl	8000b98 <_ZL12MX_SPI1_Initv>
  MX_CAN_Init();
 800088a:	f000 f8af 	bl	80009ec <_ZL11MX_CAN_Initv>
  MX_USART1_UART_Init();
 800088e:	f000 fa1b 	bl	8000cc8 <_ZL19MX_USART1_UART_Initv>
  MX_TIM2_Init();
 8000892:	f000 f9bd 	bl	8000c10 <_ZL12MX_TIM2_Initv>
//  MX_TIM3_Init();
  MX_I2C1_Init();
 8000896:	f000 f94b 	bl	8000b30 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800089a:	4823      	ldr	r0, [pc, #140]	; (8000928 <main+0xb4>)
 800089c:	f005 f99a 	bl	8005bd4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80008a0:	210c      	movs	r1, #12
 80008a2:	4822      	ldr	r0, [pc, #136]	; (800092c <main+0xb8>)
 80008a4:	f005 f9e8 	bl	8005c78 <HAL_TIM_PWM_Start>

	SetBklit(DispDBri);
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <main+0xbc>)
 80008aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 ff9c 	bl	80017ee <_Z8SetBklitt>

  UARTWait4Char();
 80008b6:	f001 febb 	bl	8002630 <_Z13UARTWait4Charv>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of CANMsgQueue */
  osMessageQStaticDef(CANMsgQueue, CANMSG_BUF_SIZE, CANMsg_t, CANMsgQueueBuffer, &CANMsgQueueControlBlock);
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <main+0xc0>)
 80008bc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80008c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  CANMsgQueueHandle = osMessageCreate(osMessageQ(CANMsgQueue), NULL);
 80008c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f006 facb 	bl	8006e68 <osMessageCreate>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a18      	ldr	r2, [pc, #96]	; (8000938 <main+0xc4>)
 80008d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of CANTask */
  osThreadDef(CANTask, StartCANTask, osPriorityNormal, 0, 128);
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <main+0xc8>)
 80008da:	f107 041c 	add.w	r4, r7, #28
 80008de:	461d      	mov	r5, r3
 80008e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CANTaskHandle = osThreadCreate(osThread(CANTask), NULL);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f006 fa58 	bl	8006da8 <osThreadCreate>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4a11      	ldr	r2, [pc, #68]	; (8000940 <main+0xcc>)
 80008fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of ScreenTask */
  osThreadDef(ScreenTask, StartScreenTask, osPriorityNormal, 0, 128);
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <main+0xd0>)
 8000900:	463c      	mov	r4, r7
 8000902:	461d      	mov	r5, r3
 8000904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000908:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800090c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ScreenTaskHandle = osThreadCreate(osThread(ScreenTask), NULL);
 8000910:	463b      	mov	r3, r7
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f006 fa47 	bl	8006da8 <osThreadCreate>
 800091a:	4603      	mov	r3, r0
 800091c:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <main+0xd4>)
 800091e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000920:	f006 fa3b 	bl	8006d9a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000924:	e7fe      	b.n	8000924 <main+0xb0>
 8000926:	bf00      	nop
 8000928:	20000aa4 	.word	0x20000aa4
 800092c:	20000aec 	.word	0x20000aec
 8000930:	20000002 	.word	0x20000002
 8000934:	08009d78 	.word	0x08009d78
 8000938:	20000df8 	.word	0x20000df8
 800093c:	08009d88 	.word	0x08009d88
 8000940:	20000e48 	.word	0x20000e48
 8000944:	08009da4 	.word	0x08009da4
 8000948:	20000e44 	.word	0x20000e44

0800094c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b090      	sub	sp, #64	; 0x40
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0318 	add.w	r3, r7, #24
 8000956:	2228      	movs	r2, #40	; 0x28
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f009 f8f0 	bl	8009b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800096e:	2301      	movs	r3, #1
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000972:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000976:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000988:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800098a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	4618      	mov	r0, r3
 8000996:	f003 ffdf 	bl	8004958 <HAL_RCC_OscConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80009aa:	f000 faf1 	bl	8000f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2302      	movs	r3, #2
 80009b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2102      	movs	r1, #2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 fa45 	bl	8004e58 <HAL_RCC_ClockConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	bf14      	ite	ne
 80009d4:	2301      	movne	r3, #1
 80009d6:	2300      	moveq	r3, #0
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80009de:	f000 fad7 	bl	8000f90 <Error_Handler>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3740      	adds	r7, #64	; 0x40
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80009f0:	4b48      	ldr	r3, [pc, #288]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 80009f2:	4a49      	ldr	r2, [pc, #292]	; (8000b18 <_ZL11MX_CAN_Initv+0x12c>)
 80009f4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80009f6:	4b47      	ldr	r3, [pc, #284]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 80009f8:	2204      	movs	r2, #4
 80009fa:	605a      	str	r2, [r3, #4]
  //CAN mode depends on the jumper position
  if (HAL_GPIO_ReadPin(Norm_LB_GPIO_Port, Norm_LB_Pin) == 1) testMode = false;
 80009fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a00:	4846      	ldr	r0, [pc, #280]	; (8000b1c <_ZL11MX_CAN_Initv+0x130>)
 8000a02:	f003 fdd9 	bl	80045b8 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	bf0c      	ite	eq
 8000a0c:	2301      	moveq	r3, #1
 8000a0e:	2300      	movne	r3, #0
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <_ZL11MX_CAN_Initv+0x32>
 8000a16:	4b42      	ldr	r3, [pc, #264]	; (8000b20 <_ZL11MX_CAN_Initv+0x134>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
 8000a1c:	e002      	b.n	8000a24 <_ZL11MX_CAN_Initv+0x38>
  else testMode = true;
 8000a1e:	4b40      	ldr	r3, [pc, #256]	; (8000b20 <_ZL11MX_CAN_Initv+0x134>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]

  if (testMode) hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000a24:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <_ZL11MX_CAN_Initv+0x134>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d004      	beq.n	8000a36 <_ZL11MX_CAN_Initv+0x4a>
 8000a2c:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	e002      	b.n	8000a3c <_ZL11MX_CAN_Initv+0x50>
  else hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a36:	4b37      	ldr	r3, [pc, #220]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
//  hcan.Init.Mode = CAN_MODE_LOOPBACK;

  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a3c:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000a42:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000a44:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a48:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a4a:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000a4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a50:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a52:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a58:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a76:	4827      	ldr	r0, [pc, #156]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000a78:	f002 faca 	bl	8003010 <HAL_CAN_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	bf14      	ite	ne
 8000a82:	2301      	movne	r3, #1
 8000a84:	2300      	moveq	r3, #0
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <_ZL11MX_CAN_Initv+0xa4>
  {
    Error_Handler();
 8000a8c:	f000 fa80 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
    pHeader.DLC=1; //give message size of 1 byte
 8000a90:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <_ZL11MX_CAN_Initv+0x138>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	611a      	str	r2, [r3, #16]
	pHeader.IDE=CAN_ID_EXT; //set identifier to extended
 8000a96:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <_ZL11MX_CAN_Initv+0x138>)
 8000a98:	2204      	movs	r2, #4
 8000a9a:	609a      	str	r2, [r3, #8]
	pHeader.RTR=CAN_RTR_DATA; //set data type to remote transmission request?
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <_ZL11MX_CAN_Initv+0x138>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
	pHeader.ExtId=CAR_SPEED_ID; //define a standard identifier, used for message identification by filters
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <_ZL11MX_CAN_Initv+0x138>)
 8000aa4:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <_ZL11MX_CAN_Initv+0x13c>)
 8000aa6:	605a      	str	r2, [r3, #4]

	sFilterConfig.FilterBank=0;
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //set filter mode
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0; //set fifo assignment
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh=0x0000;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow=0x0000;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh=0x0000;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow=0x0000;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterActivation=ENABLE;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configure CAN filter
 8000ade:	4913      	ldr	r1, [pc, #76]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000ae2:	f002 fb90 	bl	8003206 <HAL_CAN_ConfigFilter>

	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO1; //set fifo assignment
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank=1;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	615a      	str	r2, [r3, #20]

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configure CAN filter
 8000af2:	490e      	ldr	r1, [pc, #56]	; (8000b2c <_ZL11MX_CAN_Initv+0x140>)
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000af6:	f002 fb86 	bl	8003206 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan); //start CAN
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000afc:	f002 fc4c 	bl	8003398 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8000b00:	2102      	movs	r1, #2
 8000b02:	4804      	ldr	r0, [pc, #16]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000b04:	f002 fe77 	bl	80037f6 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING); //enable interrupts
 8000b08:	2110      	movs	r1, #16
 8000b0a:	4802      	ldr	r0, [pc, #8]	; (8000b14 <_ZL11MX_CAN_Initv+0x128>)
 8000b0c:	f002 fe73 	bl	80037f6 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING); //enable interrupts
*/
  /* USER CODE END CAN_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200009d0 	.word	0x200009d0
 8000b18:	40006400 	.word	0x40006400
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	200009cc 	.word	0x200009cc
 8000b24:	20000734 	.word	0x20000734
 8000b28:	0210a006 	.word	0x0210a006
 8000b2c:	20000750 	.word	0x20000750

08000b30 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b36:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <_ZL12MX_I2C1_Initv+0x60>)
 8000b38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b3c:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <_ZL12MX_I2C1_Initv+0x64>)
 8000b3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b6c:	4807      	ldr	r0, [pc, #28]	; (8000b8c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b6e:	f003 fd75 	bl	800465c <HAL_I2C_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bf14      	ite	ne
 8000b78:	2301      	movne	r3, #1
 8000b7a:	2300      	moveq	r3, #0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000b82:	f000 fa05 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200009f8 	.word	0x200009f8
 8000b90:	40005400 	.word	0x40005400
 8000b94:	000186a0 	.word	0x000186a0

08000b98 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <_ZL12MX_SPI1_Initv+0x74>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000ba4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000bb8:	2202      	movs	r2, #2
 8000bba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000bcc:	2210      	movs	r2, #16
 8000bce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be8:	4807      	ldr	r0, [pc, #28]	; (8000c08 <_ZL12MX_SPI1_Initv+0x70>)
 8000bea:	f004 faff 	bl	80051ec <HAL_SPI_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	bf14      	ite	ne
 8000bf4:	2301      	movne	r3, #1
 8000bf6:	2300      	moveq	r3, #0
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000bfe:	f000 f9c7 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000a4c 	.word	0x20000a4c
 8000c0c:	40013000 	.word	0x40013000

08000c10 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN TIM2_Init 0 */

	  /* USER CODE END TIM2_Init 0 */

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 36000-1;
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c36:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000c3a:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = 250-1;
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c44:	22f9      	movs	r2, #249	; 0xf9
 8000c46:	60da      	str	r2, [r3, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4e:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c56:	481b      	ldr	r0, [pc, #108]	; (8000cc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c58:	f004 ff6c 	bl	8005b34 <HAL_TIM_Base_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf14      	ite	ne
 8000c62:	2301      	movne	r3, #1
 8000c64:	2300      	moveq	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <_ZL12MX_TIM2_Initv+0x60>
	  {
	    Error_Handler();
 8000c6c:	f000 f990 	bl	8000f90 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c74:	60bb      	str	r3, [r7, #8]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4811      	ldr	r0, [pc, #68]	; (8000cc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c7e:	f005 f9a5 	bl	8005fcc <HAL_TIM_ConfigClockSource>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	bf14      	ite	ne
 8000c88:	2301      	movne	r3, #1
 8000c8a:	2300      	moveq	r3, #0
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <_ZL12MX_TIM2_Initv+0x86>
	  {
	    Error_Handler();
 8000c92:	f000 f97d 	bl	8000f90 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ca4:	f005 fb96 	bl	80063d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <_ZL12MX_TIM2_Initv+0xac>
	  {
	    Error_Handler();
 8000cb8:	f000 f96a 	bl	8000f90 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM2_Init 2 */

	  /* USER CODE END TIM2_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000aa4 	.word	0x20000aa4

08000cc8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000cce:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000cd4:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8000cd6:	605a      	str	r2, [r3, #4]
//  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000cec:	220c      	movs	r2, #12
 8000cee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cfc:	4807      	ldr	r0, [pc, #28]	; (8000d1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000cfe:	f005 fbd9 	bl	80064b4 <HAL_UART_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	bf14      	ite	ne
 8000d08:	2301      	movne	r3, #1
 8000d0a:	2300      	moveq	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <_ZL19MX_USART1_UART_Initv+0x4e>
  {
    Error_Handler();
 8000d12:	f000 f93d 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
//  USART1->CR1 |= USART_CR1_RXNEIE;//enable RX interrupts
  /* USER CODE END USART1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000b34 	.word	0x20000b34
 8000d20:	40013800 	.word	0x40013800
 8000d24:	0007a120 	.word	0x0007a120

08000d28 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3c:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <_ZL12MX_GPIO_Initv+0x104>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a3a      	ldr	r2, [pc, #232]	; (8000e2c <_ZL12MX_GPIO_Initv+0x104>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <_ZL12MX_GPIO_Initv+0x104>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d54:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <_ZL12MX_GPIO_Initv+0x104>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a34      	ldr	r2, [pc, #208]	; (8000e2c <_ZL12MX_GPIO_Initv+0x104>)
 8000d5a:	f043 0320 	orr.w	r3, r3, #32
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <_ZL12MX_GPIO_Initv+0x104>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0320 	and.w	r3, r3, #32
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <_ZL12MX_GPIO_Initv+0x104>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a2e      	ldr	r2, [pc, #184]	; (8000e2c <_ZL12MX_GPIO_Initv+0x104>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <_ZL12MX_GPIO_Initv+0x104>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	4829      	ldr	r0, [pc, #164]	; (8000e30 <_ZL12MX_GPIO_Initv+0x108>)
 8000d8c:	f003 fc2b 	bl	80045e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_RST_Pin|DISP_DC_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	211c      	movs	r1, #28
 8000d94:	4827      	ldr	r0, [pc, #156]	; (8000e34 <_ZL12MX_GPIO_Initv+0x10c>)
 8000d96:	f003 fc26 	bl	80045e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	481f      	ldr	r0, [pc, #124]	; (8000e30 <_ZL12MX_GPIO_Initv+0x108>)
 8000db4:	f003 fa7c 	bl	80042b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbe:	481c      	ldr	r0, [pc, #112]	; (8000e30 <_ZL12MX_GPIO_Initv+0x108>)
 8000dc0:	f003 fc11 	bl	80045e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISP_RST_Pin DISP_DC_Pin DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_RST_Pin|DISP_DC_Pin|DISP_CS_Pin;
 8000dc4:	231c      	movs	r3, #28
 8000dc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4816      	ldr	r0, [pc, #88]	; (8000e34 <_ZL12MX_GPIO_Initv+0x10c>)
 8000ddc:	f003 fa68 	bl	80042b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Norm_LB_Pin */
  GPIO_InitStruct.Pin = Norm_LB_Pin;
 8000de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Norm_LB_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	4619      	mov	r1, r3
 8000df4:	480f      	ldr	r0, [pc, #60]	; (8000e34 <_ZL12MX_GPIO_Initv+0x10c>)
 8000df6:	f003 fa5b 	bl	80042b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TJA1050 S-Pin */
  GPIO_InitStruct.Pin = TJA_S_Pin;
 8000dfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TJA_S_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	4807      	ldr	r0, [pc, #28]	; (8000e30 <_ZL12MX_GPIO_Initv+0x108>)
 8000e14:	f003 fa4c 	bl	80042b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(TJA_S_GPIO_Port, TJA_S_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <_ZL12MX_GPIO_Initv+0x108>)
 8000e20:	f003 fbe1 	bl	80045e6 <HAL_GPIO_WritePin>

}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40011000 	.word	0x40011000
 8000e34:	40010800 	.word	0x40010800

08000e38 <_Z15StartScreenTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartScreenTask */
void StartScreenTask(void const * argument)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	InitScreen();
 8000e40:	f000 faf2 	bl	8001428 <_Z10InitScreenv>
	SwitchScreen(NORM_SCREEN);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 fb11 	bl	800146c <_Z12SwitchScreenh>

//	uint8_t message[] = {0x0,0x3D,0x32,0x14,0x0,0x0,0x0,0x00};
//	uint32_t address = CAR_ECTEMP_ID;

    /* Store the handle of the calling task. */
	xScrTaskHandle = xTaskGetCurrentTaskHandle();
 8000e4a:	f007 fbb1 	bl	80085b0 <xTaskGetCurrentTaskHandle>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <_Z15StartScreenTaskPKv+0x30>)
 8000e52:	6013      	str	r3, [r2, #0]
	/* Infinite loop */
  for(;;)
  {
	  vTaskSuspend( NULL );//wait for a time to refresh the screen
 8000e54:	2000      	movs	r0, #0
 8000e56:	f006 fe67 	bl	8007b28 <vTaskSuspend>
//	  if (carConn)
//	  {
		  FormatItems();
 8000e5a:	f000 fb45 	bl	80014e8 <_Z11FormatItemsv>
		  UpdateScreen();
 8000e5e:	f000 fbf3 	bl	8001648 <_Z12UpdateScreenv>
		  RequestOBD();
 8000e62:	f000 f9f5 	bl	8001250 <_Z10RequestOBDv>
	  vTaskSuspend( NULL );//wait for a time to refresh the screen
 8000e66:	e7f5      	b.n	8000e54 <_Z15StartScreenTaskPKv+0x1c>
 8000e68:	20000e50 	.word	0x20000e50

08000e6c <_Z12StartCANTaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANTask */
void StartCANTask(void const * argument)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b097      	sub	sp, #92	; 0x5c
 8000e70:	af04      	add	r7, sp, #16
 8000e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANTask */
	CANMsg_t CANMsg;
	portBASE_TYPE xStatus = pdFALSE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	647b      	str	r3, [r7, #68]	; 0x44

    /* Store the handle of the calling task. */
	xCANTaskHandle = xTaskGetCurrentTaskHandle();
 8000e78:	f007 fb9a 	bl	80085b0 <xTaskGetCurrentTaskHandle>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a33      	ldr	r2, [pc, #204]	; (8000f4c <_Z12StartCANTaskPKv+0xe0>)
 8000e80:	6013      	str	r3, [r2, #0]

//	uint8_t message[] = {0x20,0x05,0x26,0x09,0x20,0x20};
//	uint32_t address = CAR_DATE_ID;

	uint8_t message[] = {0x5,0x62,0x19,0x42,0x3,0xDA};
 8000e82:	4a33      	ldr	r2, [pc, #204]	; (8000f50 <_Z12StartCANTaskPKv+0xe4>)
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e8c:	6018      	str	r0, [r3, #0]
 8000e8e:	3304      	adds	r3, #4
 8000e90:	8019      	strh	r1, [r3, #0]
	uint32_t address = CAR_ECON_ID;
 8000e92:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <_Z12StartCANTaskPKv+0xe8>)
 8000e94:	643b      	str	r3, [r7, #64]	; 0x40

//	uint8_t message[] = {0x20,0x00,0x48,0x00,0x00,0x18,0x20,0x00};
//	uint32_t address = CAR_STAT1_ID;
	uint32_t address2 = CAR_STAT3_ID;
 8000e96:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <_Z12StartCANTaskPKv+0xec>)
 8000e98:	63fb      	str	r3, [r7, #60]	; 0x3c
//	carEcon1 = 675;
//	carBrake = 0;

//	osDelay(5);

	CAN_Send(message, sizeof(message), address);
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ea0:	2106      	movs	r1, #6
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fc66 	bl	8000774 <_Z8CAN_SendPhhm>
//		message[0] = 0x80;
//		message[5] = 0x18;
//		CAN_Send(message, sizeof(message), address2);
	  }

	  xStatus = xQueueReceive(CANMsgQueueHandle, &CANMsg, 500);
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <_Z12StartCANTaskPKv+0xf0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f107 0110 	add.w	r1, r7, #16
 8000eb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f006 fa83 	bl	80073c0 <xQueueReceive>
 8000eba:	6478      	str	r0, [r7, #68]	; 0x44
	  if (xStatus == pdPASS) {
 8000ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d113      	bne.n	8000eea <_Z12StartCANTaskPKv+0x7e>
		  HandleOBDMsg(CANMsg.pRxHeader, CANMsg.rxData);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	331c      	adds	r3, #28
 8000ec8:	9303      	str	r3, [sp, #12]
 8000eca:	466c      	mov	r4, sp
 8000ecc:	f107 0320 	add.w	r3, r7, #32
 8000ed0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ed4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ede:	f000 f85d 	bl	8000f9c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh>
		  carConn = 1;
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <_Z12StartCANTaskPKv+0xf4>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	e002      	b.n	8000ef0 <_Z12StartCANTaskPKv+0x84>

//		  if (CANMsg.pRxHeader.ExtId > 0x18D00000) Send2CANSniffer(CANMsg);

	  }
	  else carConn = 0;
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <_Z12StartCANTaskPKv+0xf4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]

	  UBaseType_t qSize = uxQueueMessagesWaiting(CANMsgQueueHandle);
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <_Z12StartCANTaskPKv+0xf0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f006 fb43 	bl	8007580 <uxQueueMessagesWaiting>
 8000efa:	63b8      	str	r0, [r7, #56]	; 0x38
	  if (qSize > canQueueMax) canQueueMax = qSize;
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <_Z12StartCANTaskPKv+0xf8>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d903      	bls.n	8000f10 <_Z12StartCANTaskPKv+0xa4>
 8000f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_Z12StartCANTaskPKv+0xf8>)
 8000f0e:	801a      	strh	r2, [r3, #0]

		//No CAN connection
	  if (carConn == 0)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_Z12StartCANTaskPKv+0xf4>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10f      	bne.n	8000f38 <_Z12StartCANTaskPKv+0xcc>
	  {
		  noConnItem->option &= ~DISPLAY_HIDE;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_Z12StartCANTaskPKv+0xfc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	79da      	ldrb	r2, [r3, #7]
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <_Z12StartCANTaskPKv+0xfc>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0210 	bic.w	r2, r2, #16
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	71da      	strb	r2, [r3, #7]

		  GotoSleep();
 8000f2a:	f000 ff83 	bl	8001e34 <_Z9GotoSleepv>
		  ResumeFromSleep();
 8000f2e:	f000 ffdd 	bl	8001eec <_Z15ResumeFromSleepv>
		  SystemClock_Config(); // restart system clock
 8000f32:	f7ff fd0b 	bl	800094c <_Z18SystemClock_Configv>
 8000f36:	e7b7      	b.n	8000ea8 <_Z12StartCANTaskPKv+0x3c>

	  }
	  else noConnItem->option |= DISPLAY_HIDE;
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <_Z12StartCANTaskPKv+0xfc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	79da      	ldrb	r2, [r3, #7]
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <_Z12StartCANTaskPKv+0xfc>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0210 	orr.w	r2, r2, #16
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	71da      	strb	r2, [r3, #7]

  }
 8000f4a:	e7ad      	b.n	8000ea8 <_Z12StartCANTaskPKv+0x3c>
 8000f4c:	20000e4c 	.word	0x20000e4c
 8000f50:	08009dc0 	.word	0x08009dc0
 8000f54:	18daf110 	.word	0x18daf110
 8000f58:	0c2ca000 	.word	0x0c2ca000
 8000f5c:	20000df8 	.word	0x20000df8
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000e74 	.word	0x20000e74
 8000f68:	20000eb0 	.word	0x20000eb0

08000f6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f7e:	f002 f807 	bl	8002f90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40012c00 	.word	0x40012c00

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//	SendDebugMsg("Er\n");

  /* USER CODE END Error_Handler_Debug */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh>:


#define ECON_AVG_BUF_SIZE 8

void HandleOBDMsg(CAN_RxHeaderTypeDef pRxHeader, uint8_t *rxData)
{
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	f107 0c10 	add.w	ip, r7, #16
 8000fa8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t dt;
	uint16_t *ptr;

	ptr = (uint16_t *)rxData;
 8000fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fae:	607b      	str	r3, [r7, #4]

	switch (pRxHeader.ExtId)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	4a95      	ldr	r2, [pc, #596]	; (8001208 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x26c>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d070      	beq.n	800109a <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0xfe>
 8000fb8:	4a93      	ldr	r2, [pc, #588]	; (8001208 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x26c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	f200 810d 	bhi.w	80011da <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x23e>
 8000fc0:	4a92      	ldr	r2, [pc, #584]	; (800120c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x270>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	f000 80e6 	beq.w	8001194 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x1f8>
 8000fc8:	4a90      	ldr	r2, [pc, #576]	; (800120c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x270>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	f200 8105 	bhi.w	80011da <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x23e>
 8000fd0:	4a8f      	ldr	r2, [pc, #572]	; (8001210 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x274>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d01a      	beq.n	800100c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x70>
 8000fd6:	4a8e      	ldr	r2, [pc, #568]	; (8001210 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x274>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	f200 80fe 	bhi.w	80011da <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x23e>
 8000fde:	4a8d      	ldr	r2, [pc, #564]	; (8001214 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x278>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	f000 80a7 	beq.w	8001134 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x198>
 8000fe6:	4a8b      	ldr	r2, [pc, #556]	; (8001214 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x278>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	f200 80f6 	bhi.w	80011da <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x23e>
 8000fee:	4a8a      	ldr	r2, [pc, #552]	; (8001218 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x27c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	f000 80e0 	beq.w	80011b6 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x21a>
 8000ff6:	4a88      	ldr	r2, [pc, #544]	; (8001218 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x27c>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	f200 80ee 	bhi.w	80011da <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x23e>
 8000ffe:	4a87      	ldr	r2, [pc, #540]	; (800121c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x280>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d03c      	beq.n	800107e <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0xe2>
 8001004:	4a86      	ldr	r2, [pc, #536]	; (8001220 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x284>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00b      	beq.n	8001022 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x86>
			{
				carRPM = ((((uint16_t)rxData[2]<<8) & 0xFF00) + rxData[3]);
			}
			break;
		default:
			break;
 800100a:	e0e6      	b.n	80011da <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x23e>
			if (pRxHeader.DLC == 6)
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	2b06      	cmp	r3, #6
 8001010:	f040 80e5 	bne.w	80011de <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x242>
				carDate = *(uint64_t *)rxData;
 8001014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	4982      	ldr	r1, [pc, #520]	; (8001224 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x288>)
 800101c:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001020:	e0dd      	b.n	80011de <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x242>
			if (pRxHeader.DLC == 8 && rxData[7] == 0)
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	2b08      	cmp	r3, #8
 8001026:	f040 80dc 	bne.w	80011e2 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x246>
 800102a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102c:	3307      	adds	r3, #7
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	f040 80d6 	bne.w	80011e2 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x246>
				dt = (uint16_t)rxData[5];		//low byte
 8001036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001038:	3305      	adds	r3, #5
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	807b      	strh	r3, [r7, #2]
				dt += ((uint16_t)rxData[4] << 8) & 0xFF00;
 800103e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001040:	3304      	adds	r3, #4
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b29a      	uxth	r2, r3
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	4413      	add	r3, r2
 800104c:	807b      	strh	r3, [r7, #2]
				carSpeed = (int16_t)(dt >> 7);
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	11db      	asrs	r3, r3, #7
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b74      	ldr	r3, [pc, #464]	; (8001228 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x28c>)
 8001056:	801a      	strh	r2, [r3, #0]
				carFSpeed = dt;
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff f936 	bl	80002cc <__aeabi_ui2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4a72      	ldr	r2, [pc, #456]	; (800122c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x290>)
 8001064:	6013      	str	r3, [r2, #0]
				carFSpeed /= 128;
 8001066:	4b71      	ldr	r3, [pc, #452]	; (800122c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x290>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa38 	bl	80004e4 <__aeabi_fdiv>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b6c      	ldr	r3, [pc, #432]	; (800122c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x290>)
 800107a:	601a      	str	r2, [r3, #0]
			break;
 800107c:	e0b1      	b.n	80011e2 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x246>
			if (pRxHeader.DLC == 8)
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	2b08      	cmp	r3, #8
 8001082:	f040 80b0 	bne.w	80011e6 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x24a>
				carTemp = (int16_t)rxData[3] - 40;
 8001086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001088:	3303      	adds	r3, #3
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	3b28      	subs	r3, #40	; 0x28
 8001090:	b29b      	uxth	r3, r3
 8001092:	b21a      	sxth	r2, r3
 8001094:	4b66      	ldr	r3, [pc, #408]	; (8001230 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x294>)
 8001096:	801a      	strh	r2, [r3, #0]
			break;
 8001098:	e0a5      	b.n	80011e6 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x24a>
			if (pRxHeader.DLC == 6)
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	2b06      	cmp	r3, #6
 800109e:	f040 80a4 	bne.w	80011ea <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x24e>
				dt = ((((uint16_t)rxData[4]<<8) & 0xFF00) + rxData[5]);
 80010a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a4:	3304      	adds	r3, #4
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ae:	3305      	adds	r3, #5
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	807b      	strh	r3, [r7, #2]
				if (carFSpeed > 3) carEcon1 = (uint32_t)((dt*1000/512) / carFSpeed );
 80010b8:	4b5c      	ldr	r3, [pc, #368]	; (800122c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x290>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	495d      	ldr	r1, [pc, #372]	; (8001234 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x298>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fb18 	bl	80006f4 <__aeabi_fcmpgt>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d01c      	beq.n	8001104 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x168>
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010d0:	fb02 f303 	mul.w	r3, r2, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	da01      	bge.n	80010dc <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x140>
 80010d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010dc:	125b      	asrs	r3, r3, #9
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f8f8 	bl	80002d4 <__aeabi_i2f>
 80010e4:	4602      	mov	r2, r0
 80010e6:	4b51      	ldr	r3, [pc, #324]	; (800122c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x290>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4610      	mov	r0, r2
 80010ee:	f7ff f9f9 	bl	80004e4 <__aeabi_fdiv>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fb1d 	bl	8000734 <__aeabi_f2uiz>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b4e      	ldr	r3, [pc, #312]	; (8001238 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x29c>)
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e00c      	b.n	800111e <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x182>
				else carEcon1 = (uint32_t)(dt*10/512);	//if speed=0 show economy in l/h
 8001104:	887a      	ldrh	r2, [r7, #2]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	da01      	bge.n	8001116 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x17a>
 8001112:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001116:	125b      	asrs	r3, r3, #9
 8001118:	461a      	mov	r2, r3
 800111a:	4b47      	ldr	r3, [pc, #284]	; (8001238 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x29c>)
 800111c:	601a      	str	r2, [r3, #0]
				carEcon1 = CalcAvgEcon(carEcon1);	//sliding average by 8 points
 800111e:	4b46      	ldr	r3, [pc, #280]	; (8001238 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x29c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f8ad 	bl	8001284 <_Z11CalcAvgEcont>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b42      	ldr	r3, [pc, #264]	; (8001238 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x29c>)
 8001130:	601a      	str	r2, [r3, #0]
			break;
 8001132:	e05a      	b.n	80011ea <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x24e>
			if (pRxHeader.DLC == 8)
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	2b08      	cmp	r3, #8
 8001138:	d159      	bne.n	80011ee <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x252>
				ptr = (uint16_t *)rxData;
 800113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113c:	607b      	str	r3, [r7, #4]
				if (rxData[6] & 0x20)	//Handbrake
 800113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001140:	3306      	adds	r3, #6
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x1b8>
						carBrake = true;
 800114c:	4b3b      	ldr	r3, [pc, #236]	; (800123c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x2a0>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e002      	b.n	800115a <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x1be>
						carBrake = false;
 8001154:	4b39      	ldr	r3, [pc, #228]	; (800123c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x2a0>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
				if (rxData[1] & 0x20)	//Light
 800115a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115c:	3301      	adds	r3, #1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	f003 0320 	and.w	r3, r3, #32
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x1d4>
						carLightON = 1;
 8001168:	4b35      	ldr	r3, [pc, #212]	; (8001240 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x2a4>)
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	e002      	b.n	8001176 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x1da>
						carLightON = 0;
 8001170:	4b33      	ldr	r3, [pc, #204]	; (8001240 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x2a4>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
				if ((rxData[5] & 0x18) == 0x18)	//Ignition
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	3305      	adds	r3, #5
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	f003 0318 	and.w	r3, r3, #24
 8001180:	2b18      	cmp	r3, #24
 8001182:	d103      	bne.n	800118c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x1f0>
					carIgnON = true;
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x2a8>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
			break;
 800118a:	e030      	b.n	80011ee <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x252>
					carIgnON = false;
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x2a8>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
			break;
 8001192:	e02c      	b.n	80011ee <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x252>
			if (pRxHeader.DLC == 8)
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	2b08      	cmp	r3, #8
 8001198:	d12b      	bne.n	80011f2 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x256>
				ptr = (uint16_t *)rxData;
 800119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119c:	607b      	str	r3, [r7, #4]
				if (rxData[0] == 0x80)	//Engine ON
 800119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b80      	cmp	r3, #128	; 0x80
 80011a4:	d103      	bne.n	80011ae <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x212>
					carEngON = 1;
 80011a6:	4b28      	ldr	r3, [pc, #160]	; (8001248 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x2ac>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
			break;
 80011ac:	e021      	b.n	80011f2 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x256>
					carEngON = 0;
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x2ac>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
			break;
 80011b4:	e01d      	b.n	80011f2 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x256>
			if (pRxHeader.DLC == 8)
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d11c      	bne.n	80011f6 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x25a>
				carRPM = ((((uint16_t)rxData[2]<<8) & 0xFF00) + rxData[3]);
 80011bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011be:	3302      	adds	r3, #2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c8:	3303      	adds	r3, #3
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4413      	add	r3, r2
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x2b0>)
 80011d6:	801a      	strh	r2, [r3, #0]
			break;
 80011d8:	e00d      	b.n	80011f6 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x25a>
			break;
 80011da:	bf00      	nop
 80011dc:	e00c      	b.n	80011f8 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x25c>
			break;
 80011de:	bf00      	nop
 80011e0:	e00a      	b.n	80011f8 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x25c>
			break;
 80011e2:	bf00      	nop
 80011e4:	e008      	b.n	80011f8 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x25c>
			break;
 80011e6:	bf00      	nop
 80011e8:	e006      	b.n	80011f8 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x25c>
			break;
 80011ea:	bf00      	nop
 80011ec:	e004      	b.n	80011f8 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x25c>
			break;
 80011ee:	bf00      	nop
 80011f0:	e002      	b.n	80011f8 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x25c>
			break;
 80011f2:	bf00      	nop
 80011f4:	e000      	b.n	80011f8 <_Z12HandleOBDMsg19CAN_RxHeaderTypeDefPh+0x25c>
			break;
 80011f6:	bf00      	nop
	}

}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001202:	b004      	add	sp, #16
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	18daf110 	.word	0x18daf110
 800120c:	0c2ca000 	.word	0x0c2ca000
 8001210:	0c28a000 	.word	0x0c28a000
 8001214:	0a18a000 	.word	0x0a18a000
 8001218:	0618a001 	.word	0x0618a001
 800121c:	0018a001 	.word	0x0018a001
 8001220:	0210a006 	.word	0x0210a006
 8001224:	20000e68 	.word	0x20000e68
 8001228:	20000e58 	.word	0x20000e58
 800122c:	20000e5c 	.word	0x20000e5c
 8001230:	20000e60 	.word	0x20000e60
 8001234:	40400000 	.word	0x40400000
 8001238:	20000e70 	.word	0x20000e70
 800123c:	20000e54 	.word	0x20000e54
 8001240:	20000e57 	.word	0x20000e57
 8001244:	20000e55 	.word	0x20000e55
 8001248:	20000e56 	.word	0x20000e56
 800124c:	20000e5a 	.word	0x20000e5a

08001250 <_Z10RequestOBDv>:

void RequestOBD(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
	//request a fuel consumption value
//	uint8_t message[] = {0x3,0x22,0x19,0x42,0x0,0x0,0x0,0x0};
//	uint32_t address = CAR_REQ_ID;
	uint8_t message[] = {0x5,0x62,0x19,0x42,0x3,0xDA};
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <_Z10RequestOBDv+0x2c>)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800125e:	6018      	str	r0, [r3, #0]
 8001260:	3304      	adds	r3, #4
 8001262:	8019      	strh	r1, [r3, #0]
	uint32_t address = CAR_ECON_ID;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <_Z10RequestOBDv+0x30>)
 8001266:	60fb      	str	r3, [r7, #12]

	CAN_Send(message, sizeof(message), address);
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	2106      	movs	r1, #6
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fa80 	bl	8000774 <_Z8CAN_SendPhhm>

}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	08009dc8 	.word	0x08009dc8
 8001280:	18daf110 	.word	0x18daf110

08001284 <_Z11CalcAvgEcont>:


uint16_t CalcAvgEcon(uint16_t val)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
	static uint16_t buff[ECON_AVG_BUF_SIZE];
	static uint8_t idx;
	static uint32_t avg;
	uint32_t s_avg;

	if (idx >= ECON_AVG_BUF_SIZE) idx = 0;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <_Z11CalcAvgEcont+0x78>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b07      	cmp	r3, #7
 8001294:	d902      	bls.n	800129c <_Z11CalcAvgEcont+0x18>
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <_Z11CalcAvgEcont+0x78>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
	buff[idx++] = val;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <_Z11CalcAvgEcont+0x78>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	b2d1      	uxtb	r1, r2
 80012a4:	4a15      	ldr	r2, [pc, #84]	; (80012fc <_Z11CalcAvgEcont+0x78>)
 80012a6:	7011      	strb	r1, [r2, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <_Z11CalcAvgEcont+0x7c>)
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

	s_avg = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0;i<ECON_AVG_BUF_SIZE;i++) s_avg += buff[i];
 80012b6:	2300      	movs	r3, #0
 80012b8:	72fb      	strb	r3, [r7, #11]
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	2b07      	cmp	r3, #7
 80012be:	d80b      	bhi.n	80012d8 <_Z11CalcAvgEcont+0x54>
 80012c0:	7afb      	ldrb	r3, [r7, #11]
 80012c2:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <_Z11CalcAvgEcont+0x7c>)
 80012c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	7afb      	ldrb	r3, [r7, #11]
 80012d2:	3301      	adds	r3, #1
 80012d4:	72fb      	strb	r3, [r7, #11]
 80012d6:	e7f0      	b.n	80012ba <_Z11CalcAvgEcont+0x36>
	s_avg /= ECON_AVG_BUF_SIZE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	60fb      	str	r3, [r7, #12]

	if (blinkCounter == 0) avg = s_avg;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <_Z11CalcAvgEcont+0x80>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <_Z11CalcAvgEcont+0x68>
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <_Z11CalcAvgEcont+0x84>)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6013      	str	r3, [r2, #0]

	return (uint16_t)avg;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <_Z11CalcAvgEcont+0x84>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	20000e88 	.word	0x20000e88
 8001300:	20000e78 	.word	0x20000e78
 8001304:	20000e90 	.word	0x20000e90
 8001308:	20000e8c 	.word	0x20000e8c

0800130c <_ZN10ScreenItem4hideEv>:

public:
	ScreenItem();
	~ScreenItem(){}

	void hide(void) {option |= DISPLAY_HIDE;}
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	79db      	ldrb	r3, [r3, #7]
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	b2da      	uxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	71da      	strb	r2, [r3, #7]
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <_ZN10ScreenItem4showEv>:
	void show(void) {option &= ~DISPLAY_HIDE;}
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	79db      	ldrb	r3, [r3, #7]
 8001338:	f023 0310 	bic.w	r3, r3, #16
 800133c:	b2da      	uxtb	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	71da      	strb	r2, [r3, #7]
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <_ZN10ScreenItem7blinkNoEv>:

	void rev(void) {option |= DISPLAY_REV;}
	void revNo(void) {option &= ~DISPLAY_REV;}

	void blinkNo(void) {option &= ~DISPLAY_BLINK_SLOW;option &= ~DISPLAY_BLINK_FAST;}
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	79db      	ldrb	r3, [r3, #7]
 8001358:	f023 0308 	bic.w	r3, r3, #8
 800135c:	b2da      	uxtb	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	71da      	strb	r2, [r3, #7]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	79db      	ldrb	r3, [r3, #7]
 8001366:	f023 0304 	bic.w	r3, r3, #4
 800136a:	b2da      	uxtb	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	71da      	strb	r2, [r3, #7]
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <_ZN10ScreenItem9blinkSlowEv>:
	void blinkSlow(void) {option |= DISPLAY_BLINK_SLOW;option &= ~DISPLAY_BLINK_FAST;}
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	79db      	ldrb	r3, [r3, #7]
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	b2da      	uxtb	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	71da      	strb	r2, [r3, #7]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	79db      	ldrb	r3, [r3, #7]
 8001394:	f023 0304 	bic.w	r3, r3, #4
 8001398:	b2da      	uxtb	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	71da      	strb	r2, [r3, #7]
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <_ZN10ScreenItem9blinkFastEv>:
	void blinkFast(void) {option |= DISPLAY_BLINK_FAST;option &= ~DISPLAY_BLINK_SLOW;}
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	79db      	ldrb	r3, [r3, #7]
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	71da      	strb	r2, [r3, #7]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	79db      	ldrb	r3, [r3, #7]
 80013c2:	f023 0308 	bic.w	r3, r3, #8
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	71da      	strb	r2, [r3, #7]
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <_ZN10ScreenItem4beepEv>:

	void beep(void) {option |= DISPLAY_BEEP;}
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	79db      	ldrb	r3, [r3, #7]
 80013e2:	f043 0320 	orr.w	r3, r3, #32
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	71da      	strb	r2, [r3, #7]
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <_ZN10ScreenItem6beepNoEv>:
	void beepNo(void) {option &= ~DISPLAY_BEEP;}
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	79db      	ldrb	r3, [r3, #7]
 8001402:	f023 0320 	bic.w	r3, r3, #32
 8001406:	b2da      	uxtb	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	71da      	strb	r2, [r3, #7]
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <_ZN10ScreenItem8DrawItemEv>:

	void setOption(uint8_t opt, bool state);
	bool getOption(uint8_t);

	virtual void DrawItem(void){};
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <_Z10InitScreenv>:
void DecodeDateVal(uint64_t *data, char *msg);
void Str2Digits(char *msg);
void StrFormat(char *msg, uint8_t itg, uint8_t fra);

void InitScreen(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af02      	add	r7, sp, #8
	DisplayInit();
 800142e:	f000 f995 	bl	800175c <_Z11DisplayInitv>
	WriteString(43, 16, "FiatMon", FNT_SM, DISPLAY_NORM);
 8001432:	2300      	movs	r3, #0
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	230c      	movs	r3, #12
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <_Z10InitScreenv+0x3c>)
 800143a:	2110      	movs	r1, #16
 800143c:	202b      	movs	r0, #43	; 0x2b
 800143e:	f000 f993 	bl	8001768 <_Z11WriteStringttPKchh>
	WriteString(48, 24, FM_VERSION, FNT_SM, DISPLAY_NORM);
 8001442:	2300      	movs	r3, #0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	230c      	movs	r3, #12
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <_Z10InitScreenv+0x40>)
 800144a:	2118      	movs	r1, #24
 800144c:	2030      	movs	r0, #48	; 0x30
 800144e:	f000 f98b 	bl	8001768 <_Z11WriteStringttPKchh>
	DISP_Refresh();
 8001452:	f001 fc15 	bl	8002c80 <_Z12DISP_Refreshv>
	HAL_Delay(800);
 8001456:	f44f 7048 	mov.w	r0, #800	; 0x320
 800145a:	f001 fdb5 	bl	8002fc8 <HAL_Delay>
//	ClearScr();
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	08009dd0 	.word	0x08009dd0
 8001468:	08009dd8 	.word	0x08009dd8

0800146c <_Z12SwitchScreenh>:

void SwitchScreen(uint8_t scr_num)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	currScreen = scrItems;
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <_Z12SwitchScreenh+0x58>)
 8001478:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <_Z12SwitchScreenh+0x5c>)
 800147a:	601a      	str	r2, [r3, #0]

	switch(scr_num){
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d014      	beq.n	80014ac <_Z12SwitchScreenh+0x40>
 8001482:	2b03      	cmp	r3, #3
 8001484:	dc18      	bgt.n	80014b8 <_Z12SwitchScreenh+0x4c>
 8001486:	2b01      	cmp	r3, #1
 8001488:	d002      	beq.n	8001490 <_Z12SwitchScreenh+0x24>
 800148a:	2b02      	cmp	r3, #2
 800148c:	d007      	beq.n	800149e <_Z12SwitchScreenh+0x32>
			break;
		case NORM_SCREEN:
			currScreen = scrItems;
			items = sizeof(scrItems)/sizeof(*scrItems);
		default:
			break;
 800148e:	e013      	b.n	80014b8 <_Z12SwitchScreenh+0x4c>
			currScreen = scrHi;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <_Z12SwitchScreenh+0x58>)
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <_Z12SwitchScreenh+0x60>)
 8001494:	601a      	str	r2, [r3, #0]
			items = sizeof(scrHi)/sizeof(*scrHi);
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <_Z12SwitchScreenh+0x64>)
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
			break;
 800149c:	e00d      	b.n	80014ba <_Z12SwitchScreenh+0x4e>
			currScreen = scrBy;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <_Z12SwitchScreenh+0x58>)
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <_Z12SwitchScreenh+0x68>)
 80014a2:	601a      	str	r2, [r3, #0]
			items = sizeof(scrBy)/sizeof(*scrBy);
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <_Z12SwitchScreenh+0x64>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
			break;
 80014aa:	e006      	b.n	80014ba <_Z12SwitchScreenh+0x4e>
			currScreen = scrItems;
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <_Z12SwitchScreenh+0x58>)
 80014ae:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <_Z12SwitchScreenh+0x5c>)
 80014b0:	601a      	str	r2, [r3, #0]
			items = sizeof(scrItems)/sizeof(*scrItems);
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <_Z12SwitchScreenh+0x64>)
 80014b4:	220c      	movs	r2, #12
 80014b6:	701a      	strb	r2, [r3, #0]
			break;
 80014b8:	bf00      	nop

	}
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	20000ecc 	.word	0x20000ecc
 80014c8:	20000ed0 	.word	0x20000ed0
 80014cc:	20000f00 	.word	0x20000f00
 80014d0:	20000004 	.word	0x20000004
 80014d4:	20000f04 	.word	0x20000f04

080014d8 <_Z8ByScreenv>:

void ByScreen(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	SwitchScreen(BY_SCREEN);
 80014dc:	2002      	movs	r0, #2
 80014de:	f7ff ffc5 	bl	800146c <_Z12SwitchScreenh>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <_Z11FormatItemsv>:
{
	SwitchScreen(HI_SCREEN);
}

void FormatItems(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
//Car engine coolant temperature
	if (carTemp < 40)
 80014ec:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <_Z11FormatItemsv+0x130>)
 80014ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f2:	2b27      	cmp	r3, #39	; 0x27
 80014f4:	dc0f      	bgt.n	8001516 <_Z11FormatItemsv+0x2e>
	{
		ETbmpItem->show();
 80014f6:	4b49      	ldr	r3, [pc, #292]	; (800161c <_Z11FormatItemsv+0x134>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff16 	bl	800132c <_ZN10ScreenItem4showEv>

		tempItem->show();
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <_Z11FormatItemsv+0x138>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff11 	bl	800132c <_ZN10ScreenItem4showEv>
		tempLabelItem->show();
 800150a:	4b46      	ldr	r3, [pc, #280]	; (8001624 <_Z11FormatItemsv+0x13c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff0c 	bl	800132c <_ZN10ScreenItem4showEv>
 8001514:	e047      	b.n	80015a6 <_Z11FormatItemsv+0xbe>
	}
	else if (carTemp > 80)
 8001516:	4b40      	ldr	r3, [pc, #256]	; (8001618 <_Z11FormatItemsv+0x130>)
 8001518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151c:	2b50      	cmp	r3, #80	; 0x50
 800151e:	dd14      	ble.n	800154a <_Z11FormatItemsv+0x62>
	{
		ETbmpItem->show();
 8001520:	4b3e      	ldr	r3, [pc, #248]	; (800161c <_Z11FormatItemsv+0x134>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff01 	bl	800132c <_ZN10ScreenItem4showEv>
		ETbmpItem->blinkSlow();
 800152a:	4b3c      	ldr	r3, [pc, #240]	; (800161c <_Z11FormatItemsv+0x134>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff23 	bl	800137a <_ZN10ScreenItem9blinkSlowEv>

		tempItem->show();
 8001534:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <_Z11FormatItemsv+0x138>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fef7 	bl	800132c <_ZN10ScreenItem4showEv>
		tempLabelItem->show();
 800153e:	4b39      	ldr	r3, [pc, #228]	; (8001624 <_Z11FormatItemsv+0x13c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fef2 	bl	800132c <_ZN10ScreenItem4showEv>
 8001548:	e02d      	b.n	80015a6 <_Z11FormatItemsv+0xbe>
	}
	else if (carTemp > 95)
 800154a:	4b33      	ldr	r3, [pc, #204]	; (8001618 <_Z11FormatItemsv+0x130>)
 800154c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001550:	2b5f      	cmp	r3, #95	; 0x5f
 8001552:	dd14      	ble.n	800157e <_Z11FormatItemsv+0x96>
	{
		ETbmpItem->beep();
 8001554:	4b31      	ldr	r3, [pc, #196]	; (800161c <_Z11FormatItemsv+0x134>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff3c 	bl	80013d6 <_ZN10ScreenItem4beepEv>
		ETbmpItem->blinkFast();
 800155e:	4b2f      	ldr	r3, [pc, #188]	; (800161c <_Z11FormatItemsv+0x134>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff20 	bl	80013a8 <_ZN10ScreenItem9blinkFastEv>

		tempItem->blinkSlow();
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <_Z11FormatItemsv+0x138>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff04 	bl	800137a <_ZN10ScreenItem9blinkSlowEv>
		tempLabelItem->show();
 8001572:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <_Z11FormatItemsv+0x13c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fed8 	bl	800132c <_ZN10ScreenItem4showEv>
 800157c:	e013      	b.n	80015a6 <_Z11FormatItemsv+0xbe>
	}
	else
	{
		ETbmpItem->hide();
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <_Z11FormatItemsv+0x134>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fec2 	bl	800130c <_ZN10ScreenItem4hideEv>
		ETbmpItem->beepNo();
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <_Z11FormatItemsv+0x134>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff32 	bl	80013f6 <_ZN10ScreenItem6beepNoEv>
		ETbmpItem->blinkNo();
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <_Z11FormatItemsv+0x134>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fed8 	bl	800134c <_ZN10ScreenItem7blinkNoEv>

//		tempItem->hide();
		tempItem->blinkNo();
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <_Z11FormatItemsv+0x138>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fed3 	bl	800134c <_ZN10ScreenItem7blinkNoEv>
//		tempLabelItem->hide();
	}

//Handbrake
	if (carBrake == true)
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <_Z11FormatItemsv+0x140>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d105      	bne.n	80015ba <_Z11FormatItemsv+0xd2>
		{
		brakeItem->show();
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <_Z11FormatItemsv+0x144>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff feba 	bl	800132c <_ZN10ScreenItem4showEv>
 80015b8:	e004      	b.n	80015c4 <_Z11FormatItemsv+0xdc>
		}
	else
		{
		brakeItem->hide();
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <_Z11FormatItemsv+0x144>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fea4 	bl	800130c <_ZN10ScreenItem4hideEv>
		}

//Ignition
	if (carIgnON) Can2Item->show();	//test
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <_Z11FormatItemsv+0x148>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <_Z11FormatItemsv+0xf0>
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <_Z11FormatItemsv+0x14c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff feab 	bl	800132c <_ZN10ScreenItem4showEv>
 80015d6:	e004      	b.n	80015e2 <_Z11FormatItemsv+0xfa>
	else Can2Item->hide();
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <_Z11FormatItemsv+0x14c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fe95 	bl	800130c <_ZN10ScreenItem4hideEv>

//Light
	if (carLightON) Can1Item->hide();	//test
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <_Z11FormatItemsv+0x150>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <_Z11FormatItemsv+0x10e>
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <_Z11FormatItemsv+0x154>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fe8c 	bl	800130c <_ZN10ScreenItem4hideEv>
 80015f4:	e004      	b.n	8001600 <_Z11FormatItemsv+0x118>
	else Can1Item->show();
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <_Z11FormatItemsv+0x154>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fe96 	bl	800132c <_ZN10ScreenItem4showEv>

//Engine ON
//	if (carEngON)
//	{
		econ1Item->show();
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <_Z11FormatItemsv+0x158>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fe91 	bl	800132c <_ZN10ScreenItem4showEv>
		econLabelItem->show();
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <_Z11FormatItemsv+0x15c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fe8c 	bl	800132c <_ZN10ScreenItem4showEv>
//	{
//		econ1Item->hide();
//		econLabelItem->hide();
//	}

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000e60 	.word	0x20000e60
 800161c:	20000eac 	.word	0x20000eac
 8001620:	20000ea4 	.word	0x20000ea4
 8001624:	20000ea8 	.word	0x20000ea8
 8001628:	20000e54 	.word	0x20000e54
 800162c:	20000eb4 	.word	0x20000eb4
 8001630:	20000e55 	.word	0x20000e55
 8001634:	20000ebc 	.word	0x20000ebc
 8001638:	20000e57 	.word	0x20000e57
 800163c:	20000eb8 	.word	0x20000eb8
 8001640:	20000e9c 	.word	0x20000e9c
 8001644:	20000ea0 	.word	0x20000ea0

08001648 <_Z12UpdateScreenv>:

void UpdateScreen(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
	//update blink counter
	blinkCounter++;
 800164e:	4b40      	ldr	r3, [pc, #256]	; (8001750 <_Z12UpdateScreenv+0x108>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <_Z12UpdateScreenv+0x108>)
 8001658:	701a      	strb	r2, [r3, #0]
	blinkCounter &= 7;
 800165a:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <_Z12UpdateScreenv+0x108>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <_Z12UpdateScreenv+0x108>)
 8001666:	701a      	strb	r2, [r3, #0]

//	uint8_t items = sizeof(currScreen)/sizeof(*currScreen);

	ClearScr();
 8001668:	f000 f8ae 	bl	80017c8 <_Z8ClearScrv>
	for(int i=0;i<items;i++) {
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <_Z12UpdateScreenv+0x10c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4293      	cmp	r3, r2
 800167a:	da62      	bge.n	8001742 <_Z12UpdateScreenv+0xfa>
		if ((currScreen[i]->option & DISPLAY_HIDE) == 0 )
 800167c:	4b36      	ldr	r3, [pc, #216]	; (8001758 <_Z12UpdateScreenv+0x110>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	79db      	ldrb	r3, [r3, #7]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d153      	bne.n	800173a <_Z12UpdateScreenv+0xf2>
		{
			if ((currScreen[i]->option & DISPLAY_BLINK_FAST) >0)
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <_Z12UpdateScreenv+0x110>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	79db      	ldrb	r3, [r3, #7]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dd16      	ble.n	80016d6 <_Z12UpdateScreenv+0x8e>
			{
				if ((blinkCounter & 2) > 0 ) currScreen[i]->DrawItem();
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <_Z12UpdateScreenv+0x108>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	dd42      	ble.n	800173a <_Z12UpdateScreenv+0xf2>
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <_Z12UpdateScreenv+0x110>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	6819      	ldr	r1, [r3, #0]
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <_Z12UpdateScreenv+0x110>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4608      	mov	r0, r1
 80016d2:	4798      	blx	r3
 80016d4:	e031      	b.n	800173a <_Z12UpdateScreenv+0xf2>
			}
			else if ((currScreen[i]->option & DISPLAY_BLINK_SLOW) >0)
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <_Z12UpdateScreenv+0x110>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	79db      	ldrb	r3, [r3, #7]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	dd16      	ble.n	800171a <_Z12UpdateScreenv+0xd2>
			{
				if ((blinkCounter & 4) > 0 ) currScreen[i]->DrawItem();
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <_Z12UpdateScreenv+0x108>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dd20      	ble.n	800173a <_Z12UpdateScreenv+0xf2>
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <_Z12UpdateScreenv+0x110>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <_Z12UpdateScreenv+0x110>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4608      	mov	r0, r1
 8001716:	4798      	blx	r3
 8001718:	e00f      	b.n	800173a <_Z12UpdateScreenv+0xf2>
			}
			else currScreen[i]->DrawItem();
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <_Z12UpdateScreenv+0x110>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	6819      	ldr	r1, [r3, #0]
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <_Z12UpdateScreenv+0x110>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4608      	mov	r0, r1
 8001738:	4798      	blx	r3
	for(int i=0;i<items;i++) {
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3301      	adds	r3, #1
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	e796      	b.n	8001670 <_Z12UpdateScreenv+0x28>
		}
	}
	DISP_Refresh();
 8001742:	f001 fa9d 	bl	8002c80 <_Z12DISP_Refreshv>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000e90 	.word	0x20000e90
 8001754:	20000004 	.word	0x20000004
 8001758:	20000ecc 	.word	0x20000ecc

0800175c <_Z11DisplayInitv>:
	for (i=0;i<sh;i++) msg[i] = ' ';
}


void DisplayInit(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	DISP_Init();
 8001760:	f001 f824 	bl	80027ac <_Z9DISP_Initv>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <_Z11WriteStringttPKchh>:

void WriteString(uint16_t x, uint16_t y, const char *str, uint8_t font, uint8_t style)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af02      	add	r7, sp, #8
 800176e:	60ba      	str	r2, [r7, #8]
 8001770:	461a      	mov	r2, r3
 8001772:	4603      	mov	r3, r0
 8001774:	81fb      	strh	r3, [r7, #14]
 8001776:	460b      	mov	r3, r1
 8001778:	81bb      	strh	r3, [r7, #12]
 800177a:	4613      	mov	r3, r2
 800177c:	71fb      	strb	r3, [r7, #7]
	DISP_DrawString(x, y, str, font, style);
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	89b9      	ldrh	r1, [r7, #12]
 8001782:	89f8      	ldrh	r0, [r7, #14]
 8001784:	7e3b      	ldrb	r3, [r7, #24]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f001 f9de 	bl	8002b4c <_Z15DISP_DrawStringttPKchh>
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <_Z10DrawBitmaphhP9BitmapDefh>:
void DrawBitmap(uint8_t x, uint8_t  y, BitmapDef *bitmap, uint8_t style)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	603a      	str	r2, [r7, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
 80017a6:	460b      	mov	r3, r1
 80017a8:	71bb      	strb	r3, [r7, #6]
 80017aa:	4613      	mov	r3, r2
 80017ac:	717b      	strb	r3, [r7, #5]
	DISP_DrawBitmap(x, y, bitmap, style);
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	b298      	uxth	r0, r3
 80017b2:	79bb      	ldrb	r3, [r7, #6]
 80017b4:	b299      	uxth	r1, r3
 80017b6:	797b      	ldrb	r3, [r7, #5]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	f001 f89c 	bl	80028f8 <_Z15DISP_DrawBitmapttP9BitmapDeft>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_Z8ClearScrv>:
{

}

void ClearScr()
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	DISP_ClearScr(0);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f001 f84b 	bl	8002868 <_Z13DISP_ClearScrh>
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_Z10StandbyScrv>:

void StandbyScr()
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
	DISP_Standby();
 80017da:	f001 f865 	bl	80028a8 <_Z12DISP_Standbyv>
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_Z9ResumeScrv>:

void ResumeScr()
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
	DISP_Resume();
 80017e6:	f001 f866 	bl	80028b6 <_Z11DISP_Resumev>
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_Z8SetBklitt>:

void SetBklit(uint16_t bri)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	80fb      	strh	r3, [r7, #6]
	DISP_Bklit(bri);
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 f862 	bl	80028c4 <_Z10DISP_Bklitt>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_ZN10ScreenItemC1Ev>:


ScreenItem :: ScreenItem()
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <_ZN10ScreenItemC1Ev+0x38>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2208      	movs	r2, #8
 800181a:	719a      	strb	r2, [r3, #6]
{
	x0 = 0;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	711a      	strb	r2, [r3, #4]
	y0 = 0;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	715a      	strb	r2, [r3, #5]
	size = 8;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2208      	movs	r2, #8
 800182c:	719a      	strb	r2, [r3, #6]
	option = 0;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	71da      	strb	r2, [r3, #7]
}
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	08009e58 	.word	0x08009e58

08001844 <_ZN10IntNumItemC1EPshhhhh>:
bool ScreenItem :: getOption(uint8_t opt)
{
	return ((option & opt) > 0) ? true : false;
}

IntNumItem :: IntNumItem(int16_t *val, uint8_t x, uint8_t y, uint8_t sz, uint8_t intd, uint8_t opt)
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	460b      	mov	r3, r1
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	4613      	mov	r3, r2
 8001858:	71bb      	strb	r3, [r7, #6]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ffd3 	bl	8001808 <_ZN10ScreenItemC1Ev>
 8001862:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <_ZN10IntNumItemC1EPshhhhh+0x5c>)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2203      	movs	r2, #3
 800186c:	731a      	strb	r2, [r3, #12]
{
	value = val;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	609a      	str	r2, [r3, #8]
	x0 = x;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	79fa      	ldrb	r2, [r7, #7]
 8001878:	711a      	strb	r2, [r3, #4]
	y0 = y;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	79ba      	ldrb	r2, [r7, #6]
 800187e:	715a      	strb	r2, [r3, #5]
	size = sz;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	7e3a      	ldrb	r2, [r7, #24]
 8001884:	719a      	strb	r2, [r3, #6]
	option = opt;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f897 2020 	ldrb.w	r2, [r7, #32]
 800188c:	71da      	strb	r2, [r3, #7]
	dig = intd;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	7f3a      	ldrb	r2, [r7, #28]
 8001892:	731a      	strb	r2, [r3, #12]
}
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	08009e4c 	.word	0x08009e4c

080018a4 <_ZN10IntNumItem8DrawItemEv>:

void IntNumItem :: DrawItem(void)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	6078      	str	r0, [r7, #4]
	char txt[6];

	itoa(*this->value, (char *)&txt, 10);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f107 0308 	add.w	r3, r7, #8
 80018ba:	220a      	movs	r2, #10
 80018bc:	4619      	mov	r1, r3
 80018be:	f008 f927 	bl	8009b10 <itoa>
	WriteString(this->x0, this->y0, txt, this->size, this->option);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	b298      	uxth	r0, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	795b      	ldrb	r3, [r3, #5]
 80018cc:	b299      	uxth	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	799c      	ldrb	r4, [r3, #6]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	79db      	ldrb	r3, [r3, #7]
 80018d6:	f107 0208 	add.w	r2, r7, #8
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	4623      	mov	r3, r4
 80018de:	f7ff ff43 	bl	8001768 <_Z11WriteStringttPKchh>
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd90      	pop	{r4, r7, pc}
	...

080018ec <_ZN11RealNumItemC1EPlhhhhhh>:

RealNumItem :: RealNumItem(int32_t *val, uint8_t x, uint8_t y, uint8_t sz, uint8_t intd, uint8_t frad, uint8_t opt)
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	4611      	mov	r1, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	460b      	mov	r3, r1
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	4613      	mov	r3, r2
 8001900:	71bb      	strb	r3, [r7, #6]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff7f 	bl	8001808 <_ZN10ScreenItemC1Ev>
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_ZN11RealNumItemC1EPlhhhhhh+0x68>)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2203      	movs	r2, #3
 8001914:	731a      	strb	r2, [r3, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2201      	movs	r2, #1
 800191a:	735a      	strb	r2, [r3, #13]
{
	value = val;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	609a      	str	r2, [r3, #8]
	x0 = x;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	79fa      	ldrb	r2, [r7, #7]
 8001926:	711a      	strb	r2, [r3, #4]
	y0 = y;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	79ba      	ldrb	r2, [r7, #6]
 800192c:	715a      	strb	r2, [r3, #5]
	size = sz;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	7e3a      	ldrb	r2, [r7, #24]
 8001932:	719a      	strb	r2, [r3, #6]
	idig = intd;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	7f3a      	ldrb	r2, [r7, #28]
 8001938:	731a      	strb	r2, [r3, #12]
	fdig = frad;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001940:	735a      	strb	r2, [r3, #13]
	option = opt;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001948:	71da      	strb	r2, [r3, #7]
}
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	08009e40 	.word	0x08009e40

08001958 <_ZN11RealNumItem8DrawItemEv>:

void RealNumItem :: DrawItem(void)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b08b      	sub	sp, #44	; 0x2c
 800195c:	af02      	add	r7, sp, #8
 800195e:	6078      	str	r0, [r7, #4]
	char txt[10];
	int32_t val = *this->value;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	61bb      	str	r3, [r7, #24]
	uint8_t pw = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	77fb      	strb	r3, [r7, #31]

		if (this->fdig > 0) pw = (uint8_t)powf(10, (float)this->fdig);//
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7b5b      	ldrb	r3, [r3, #13]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00f      	beq.n	8001994 <_ZN11RealNumItem8DrawItemEv+0x3c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7b5b      	ldrb	r3, [r3, #13]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fca7 	bl	80002cc <__aeabi_ui2f>
 800197e:	4603      	mov	r3, r0
 8001980:	4619      	mov	r1, r3
 8001982:	4829      	ldr	r0, [pc, #164]	; (8001a28 <_ZN11RealNumItem8DrawItemEv+0xd0>)
 8001984:	f007 fba4 	bl	80090d0 <powf>
 8001988:	4603      	mov	r3, r0
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fed2 	bl	8000734 <__aeabi_f2uiz>
 8001990:	4603      	mov	r3, r0
 8001992:	77fb      	strb	r3, [r7, #31]
		uint8_t frac = val % pw;
 8001994:	7ffa      	ldrb	r2, [r7, #31]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	fb93 f1f2 	sdiv	r1, r3, r2
 800199c:	fb02 f201 	mul.w	r2, r2, r1
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	75fb      	strb	r3, [r7, #23]

		itoa(val/pw, (char *)&txt, 10);
 80019a4:	7ffb      	ldrb	r3, [r7, #31]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80019ac:	f107 010c 	add.w	r1, r7, #12
 80019b0:	220a      	movs	r2, #10
 80019b2:	4618      	mov	r0, r3
 80019b4:	f008 f8ac 	bl	8009b10 <itoa>
		uint8_t len = strlen(txt);
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fbc7 	bl	8000150 <strlen>
 80019c2:	4603      	mov	r3, r0
 80019c4:	75bb      	strb	r3, [r7, #22]
		if (pw > 0) {
 80019c6:	7ffb      	ldrb	r3, [r7, #31]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d018      	beq.n	80019fe <_ZN11RealNumItem8DrawItemEv+0xa6>
			strcat(txt, ".");
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fbbd 	bl	8000150 <strlen>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461a      	mov	r2, r3
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4413      	add	r3, r2
 80019e0:	4912      	ldr	r1, [pc, #72]	; (8001a2c <_ZN11RealNumItem8DrawItemEv+0xd4>)
 80019e2:	461a      	mov	r2, r3
 80019e4:	460b      	mov	r3, r1
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	8013      	strh	r3, [r2, #0]
			itoa(frac, (char *)&txt+len+1, 10);
 80019ea:	7df8      	ldrb	r0, [r7, #23]
 80019ec:	7dbb      	ldrb	r3, [r7, #22]
 80019ee:	3301      	adds	r3, #1
 80019f0:	f107 020c 	add.w	r2, r7, #12
 80019f4:	4413      	add	r3, r2
 80019f6:	220a      	movs	r2, #10
 80019f8:	4619      	mov	r1, r3
 80019fa:	f008 f889 	bl	8009b10 <itoa>
		}
		WriteString(this->x0, this->y0, txt, this->size, this->option);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	791b      	ldrb	r3, [r3, #4]
 8001a02:	b298      	uxth	r0, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	795b      	ldrb	r3, [r3, #5]
 8001a08:	b299      	uxth	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	799c      	ldrb	r4, [r3, #6]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	79db      	ldrb	r3, [r3, #7]
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4623      	mov	r3, r4
 8001a1a:	f7ff fea5 	bl	8001768 <_Z11WriteStringttPKchh>
}
 8001a1e:	bf00      	nop
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd90      	pop	{r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	41200000 	.word	0x41200000
 8001a2c:	08009de0 	.word	0x08009de0

08001a30 <_ZN8TextItemC1EPchhhh>:

TextItem :: TextItem(char *st, uint8_t x, uint8_t y, uint8_t sz, uint8_t opt)
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	460b      	mov	r3, r1
 8001a40:	71fb      	strb	r3, [r7, #7]
 8001a42:	4613      	mov	r3, r2
 8001a44:	71bb      	strb	r3, [r7, #6]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fedd 	bl	8001808 <_ZN10ScreenItemC1Ev>
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <_ZN8TextItemC1EPchhhh+0x4c>)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	601a      	str	r2, [r3, #0]
{
	str = st;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	609a      	str	r2, [r3, #8]
	x0 = x;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	79fa      	ldrb	r2, [r7, #7]
 8001a5e:	711a      	strb	r2, [r3, #4]
	y0 = y;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	79ba      	ldrb	r2, [r7, #6]
 8001a64:	715a      	strb	r2, [r3, #5]
	size = sz;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	7e3a      	ldrb	r2, [r7, #24]
 8001a6a:	719a      	strb	r2, [r3, #6]
	option = opt;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	7f3a      	ldrb	r2, [r7, #28]
 8001a70:	71da      	strb	r2, [r3, #7]
}
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	08009e34 	.word	0x08009e34

08001a80 <_ZN8TextItem8DrawItemEv>:

void TextItem :: DrawItem(void)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	6078      	str	r0, [r7, #4]
	WriteString(this->x0, this->y0, str, this->size, this->option);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	791b      	ldrb	r3, [r3, #4]
 8001a8c:	b298      	uxth	r0, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	795b      	ldrb	r3, [r3, #5]
 8001a92:	b299      	uxth	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	799c      	ldrb	r4, [r3, #6]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	79db      	ldrb	r3, [r3, #7]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	f7ff fe60 	bl	8001768 <_Z11WriteStringttPKchh>

}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}

08001ab0 <_ZN10BitmapItemC1EP9BitmapDefhhh>:


BitmapItem :: BitmapItem(BitmapDef *bm, uint8_t x, uint8_t y, uint8_t opt)
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	460b      	mov	r3, r1
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	71bb      	strb	r3, [r7, #6]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fe9d 	bl	8001808 <_ZN10ScreenItemC1Ev>
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <_ZN10BitmapItemC1EP9BitmapDefhhh+0x48>)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	601a      	str	r2, [r3, #0]
{
	bmp = bm;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	609a      	str	r2, [r3, #8]
	x0 = x;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	711a      	strb	r2, [r3, #4]
	y0 = y;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	79ba      	ldrb	r2, [r7, #6]
 8001ae4:	715a      	strb	r2, [r3, #5]
	option = opt;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	7e3a      	ldrb	r2, [r7, #24]
 8001aea:	71da      	strb	r2, [r3, #7]

}
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	08009e28 	.word	0x08009e28

08001afc <_ZN10BitmapItem8DrawItemEv>:

void BitmapItem :: DrawItem(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	DrawBitmap(this->x0, this->y0, this->bmp, this->option);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7918      	ldrb	r0, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7959      	ldrb	r1, [r3, #5]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	79db      	ldrb	r3, [r3, #7]
 8001b14:	f7ff fe40 	bl	8001798 <_Z10DrawBitmaphhP9BitmapDefh>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_Z41__static_initialization_and_destruction_0ii>:
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af04      	add	r7, sp, #16
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	f040 8136 	bne.w	8001d9e <_Z41__static_initialization_and_destruction_0ii+0x27e>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	f040 8130 	bne.w	8001d9e <_Z41__static_initialization_and_destruction_0ii+0x27e>
IntNumItem *speedItem = new IntNumItem(&carSpeed, 72, 8, FNT_BIG, 3, DISPLAY_RALIGN);
 8001b3e:	2010      	movs	r0, #16
 8001b40:	f007 faac 	bl	800909c <_Znwj>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461c      	mov	r4, r3
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2318      	movs	r3, #24
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2308      	movs	r3, #8
 8001b56:	2248      	movs	r2, #72	; 0x48
 8001b58:	4993      	ldr	r1, [pc, #588]	; (8001da8 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f7ff fe72 	bl	8001844 <_ZN10IntNumItemC1EPshhhhh>
 8001b60:	4b92      	ldr	r3, [pc, #584]	; (8001dac <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8001b62:	601c      	str	r4, [r3, #0]
TextItem *spdLabelItem = new TextItem("km/h", 70, 0, FNT_SM, DISPLAY_RALIGN);
 8001b64:	200c      	movs	r0, #12
 8001b66:	f007 fa99 	bl	800909c <_Znwj>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461c      	mov	r4, r3
 8001b6e:	2302      	movs	r3, #2
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	230c      	movs	r3, #12
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	2246      	movs	r2, #70	; 0x46
 8001b7a:	498d      	ldr	r1, [pc, #564]	; (8001db0 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f7ff ff57 	bl	8001a30 <_ZN8TextItemC1EPchhhh>
 8001b82:	4b8c      	ldr	r3, [pc, #560]	; (8001db4 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8001b84:	601c      	str	r4, [r3, #0]
RealNumItem *econ1Item = new RealNumItem(&carEcon1, 121, 8, FNT_MED, 3, 1, DISPLAY_HIDE | DISPLAY_RALIGN);
 8001b86:	2010      	movs	r0, #16
 8001b88:	f007 fa88 	bl	800909c <_Znwj>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461c      	mov	r4, r3
 8001b90:	2312      	movs	r3, #18
 8001b92:	9303      	str	r3, [sp, #12]
 8001b94:	2301      	movs	r3, #1
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	2303      	movs	r3, #3
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2312      	movs	r3, #18
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	2279      	movs	r2, #121	; 0x79
 8001ba4:	4984      	ldr	r1, [pc, #528]	; (8001db8 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f7ff fea0 	bl	80018ec <_ZN11RealNumItemC1EPlhhhhhh>
 8001bac:	4b83      	ldr	r3, [pc, #524]	; (8001dbc <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8001bae:	601c      	str	r4, [r3, #0]
TextItem *econLabelItem = new TextItem("l/100km", 121, 0, FNT_SM, DISPLAY_HIDE | DISPLAY_RALIGN);
 8001bb0:	200c      	movs	r0, #12
 8001bb2:	f007 fa73 	bl	800909c <_Znwj>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461c      	mov	r4, r3
 8001bba:	2312      	movs	r3, #18
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	230c      	movs	r3, #12
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	2279      	movs	r2, #121	; 0x79
 8001bc6:	497e      	ldr	r1, [pc, #504]	; (8001dc0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7ff ff31 	bl	8001a30 <_ZN8TextItemC1EPchhhh>
 8001bce:	4b7d      	ldr	r3, [pc, #500]	; (8001dc4 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8001bd0:	601c      	str	r4, [r3, #0]
IntNumItem *tempItem = new IntNumItem(&carTemp, 121, 48, FNT_MED, 3, DISPLAY_HIDE | DISPLAY_RALIGN);
 8001bd2:	2010      	movs	r0, #16
 8001bd4:	f007 fa62 	bl	800909c <_Znwj>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461c      	mov	r4, r3
 8001bdc:	2312      	movs	r3, #18
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	2303      	movs	r3, #3
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2312      	movs	r3, #18
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2330      	movs	r3, #48	; 0x30
 8001bea:	2279      	movs	r2, #121	; 0x79
 8001bec:	4976      	ldr	r1, [pc, #472]	; (8001dc8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fe28 	bl	8001844 <_ZN10IntNumItemC1EPshhhhh>
 8001bf4:	4b75      	ldr	r3, [pc, #468]	; (8001dcc <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8001bf6:	601c      	str	r4, [r3, #0]
TextItem *tempLabelItem = new TextItem("o", 127, 48, FNT_SM, DISPLAY_HIDE | DISPLAY_RALIGN);
 8001bf8:	200c      	movs	r0, #12
 8001bfa:	f007 fa4f 	bl	800909c <_Znwj>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461c      	mov	r4, r3
 8001c02:	2312      	movs	r3, #18
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	230c      	movs	r3, #12
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2330      	movs	r3, #48	; 0x30
 8001c0c:	227f      	movs	r2, #127	; 0x7f
 8001c0e:	4970      	ldr	r1, [pc, #448]	; (8001dd0 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8001c10:	4620      	mov	r0, r4
 8001c12:	f7ff ff0d 	bl	8001a30 <_ZN8TextItemC1EPchhhh>
 8001c16:	4b6f      	ldr	r3, [pc, #444]	; (8001dd4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8001c18:	601c      	str	r4, [r3, #0]
BitmapItem *ETbmpItem = new BitmapItem(&bmpETemp, 71, 48, DISPLAY_HIDE);
 8001c1a:	200c      	movs	r0, #12
 8001c1c:	f007 fa3e 	bl	800909c <_Znwj>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461c      	mov	r4, r3
 8001c24:	2310      	movs	r3, #16
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2330      	movs	r3, #48	; 0x30
 8001c2a:	2247      	movs	r2, #71	; 0x47
 8001c2c:	496a      	ldr	r1, [pc, #424]	; (8001dd8 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7ff ff3e 	bl	8001ab0 <_ZN10BitmapItemC1EP9BitmapDefhhh>
 8001c34:	4b69      	ldr	r3, [pc, #420]	; (8001ddc <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8001c36:	601c      	str	r4, [r3, #0]
TextItem *noConnItem = new TextItem("x", 0, 0, FNT_SM, DISPLAY_HIDE);
 8001c38:	200c      	movs	r0, #12
 8001c3a:	f007 fa2f 	bl	800909c <_Znwj>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461c      	mov	r4, r3
 8001c42:	2310      	movs	r3, #16
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	230c      	movs	r3, #12
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	4964      	ldr	r1, [pc, #400]	; (8001de0 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7ff feed 	bl	8001a30 <_ZN8TextItemC1EPchhhh>
 8001c56:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8001c58:	601c      	str	r4, [r3, #0]
BitmapItem *brakeItem = new BitmapItem(&bmpBrake, 43, 8, DISPLAY_HIDE | DISPLAY_BLINK_SLOW | DISPLAY_REV);
 8001c5a:	200c      	movs	r0, #12
 8001c5c:	f007 fa1e 	bl	800909c <_Znwj>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461c      	mov	r4, r3
 8001c64:	2319      	movs	r3, #25
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2308      	movs	r3, #8
 8001c6a:	222b      	movs	r2, #43	; 0x2b
 8001c6c:	495e      	ldr	r1, [pc, #376]	; (8001de8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7ff ff1e 	bl	8001ab0 <_ZN10BitmapItemC1EP9BitmapDefhhh>
 8001c74:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8001c76:	601c      	str	r4, [r3, #0]
IntNumItem *Can1Item = new IntNumItem(&CANfifo1, 20, 40, FNT_SM, 5, DISPLAY_NORM);
 8001c78:	2010      	movs	r0, #16
 8001c7a:	f007 fa0f 	bl	800909c <_Znwj>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461c      	mov	r4, r3
 8001c82:	2300      	movs	r3, #0
 8001c84:	9302      	str	r3, [sp, #8]
 8001c86:	2305      	movs	r3, #5
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	230c      	movs	r3, #12
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2328      	movs	r3, #40	; 0x28
 8001c90:	2214      	movs	r2, #20
 8001c92:	4957      	ldr	r1, [pc, #348]	; (8001df0 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8001c94:	4620      	mov	r0, r4
 8001c96:	f7ff fdd5 	bl	8001844 <_ZN10IntNumItemC1EPshhhhh>
 8001c9a:	4b56      	ldr	r3, [pc, #344]	; (8001df4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8001c9c:	601c      	str	r4, [r3, #0]
IntNumItem *Can2Item = new IntNumItem(&carRPM, 80, 40, FNT_SM, 5, DISPLAY_NORM);
 8001c9e:	2010      	movs	r0, #16
 8001ca0:	f007 f9fc 	bl	800909c <_Znwj>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461c      	mov	r4, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	2305      	movs	r3, #5
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	230c      	movs	r3, #12
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2328      	movs	r3, #40	; 0x28
 8001cb6:	2250      	movs	r2, #80	; 0x50
 8001cb8:	494f      	ldr	r1, [pc, #316]	; (8001df8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff fdc2 	bl	8001844 <_ZN10IntNumItemC1EPshhhhh>
 8001cc0:	4b4e      	ldr	r3, [pc, #312]	; (8001dfc <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8001cc2:	601c      	str	r4, [r3, #0]
IntNumItem *Can3Item = new IntNumItem(&canQueueMax, 0, 40, FNT_SM, 5, DISPLAY_NORM);
 8001cc4:	2010      	movs	r0, #16
 8001cc6:	f007 f9e9 	bl	800909c <_Znwj>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461c      	mov	r4, r3
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	230c      	movs	r3, #12
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2328      	movs	r3, #40	; 0x28
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4948      	ldr	r1, [pc, #288]	; (8001e00 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f7ff fdaf 	bl	8001844 <_ZN10IntNumItemC1EPshhhhh>
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8001ce8:	601c      	str	r4, [r3, #0]
TextItem *HiItem = new TextItem("Hi!", 48, 24, FNT_SM, DISPLAY_NORM);
 8001cea:	200c      	movs	r0, #12
 8001cec:	f007 f9d6 	bl	800909c <_Znwj>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461c      	mov	r4, r3
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	230c      	movs	r3, #12
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2318      	movs	r3, #24
 8001cfe:	2230      	movs	r2, #48	; 0x30
 8001d00:	4941      	ldr	r1, [pc, #260]	; (8001e08 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8001d02:	4620      	mov	r0, r4
 8001d04:	f7ff fe94 	bl	8001a30 <_ZN8TextItemC1EPchhhh>
 8001d08:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8001d0a:	601c      	str	r4, [r3, #0]
TextItem *ByItem = new TextItem("By...", 48, 24, FNT_SM, DISPLAY_NORM);
 8001d0c:	200c      	movs	r0, #12
 8001d0e:	f007 f9c5 	bl	800909c <_Znwj>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461c      	mov	r4, r3
 8001d16:	2300      	movs	r3, #0
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	230c      	movs	r3, #12
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2318      	movs	r3, #24
 8001d20:	2230      	movs	r2, #48	; 0x30
 8001d22:	493b      	ldr	r1, [pc, #236]	; (8001e10 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff fe83 	bl	8001a30 <_ZN8TextItemC1EPchhhh>
 8001d2a:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8001d2c:	601c      	str	r4, [r3, #0]
						};
 8001d2e:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a39      	ldr	r2, [pc, #228]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a37      	ldr	r2, [pc, #220]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001d3c:	6053      	str	r3, [r2, #4]
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a35      	ldr	r2, [pc, #212]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001d44:	6093      	str	r3, [r2, #8]
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a33      	ldr	r2, [pc, #204]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001d4c:	60d3      	str	r3, [r2, #12]
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001d54:	6113      	str	r3, [r2, #16]
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a2f      	ldr	r2, [pc, #188]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001d5c:	6153      	str	r3, [r2, #20]
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a2d      	ldr	r2, [pc, #180]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001d64:	6193      	str	r3, [r2, #24]
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a2b      	ldr	r2, [pc, #172]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001d6c:	61d3      	str	r3, [r2, #28]
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001d7c:	6253      	str	r3, [r2, #36]	; 0x24
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a25      	ldr	r2, [pc, #148]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001d84:	6293      	str	r3, [r2, #40]	; 0x28
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
ScreenItem *scrHi[] = {	HiItem };
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8001d94:	6013      	str	r3, [r2, #0]
ScreenItem *scrBy[] = {	ByItem };
 8001d96:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8001d9c:	6013      	str	r3, [r2, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd90      	pop	{r4, r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000e58 	.word	0x20000e58
 8001dac:	20000e94 	.word	0x20000e94
 8001db0:	08009de4 	.word	0x08009de4
 8001db4:	20000e98 	.word	0x20000e98
 8001db8:	20000e70 	.word	0x20000e70
 8001dbc:	20000e9c 	.word	0x20000e9c
 8001dc0:	08009dec 	.word	0x08009dec
 8001dc4:	20000ea0 	.word	0x20000ea0
 8001dc8:	20000e60 	.word	0x20000e60
 8001dcc:	20000ea4 	.word	0x20000ea4
 8001dd0:	08009df4 	.word	0x08009df4
 8001dd4:	20000ea8 	.word	0x20000ea8
 8001dd8:	2000000c 	.word	0x2000000c
 8001ddc:	20000eac 	.word	0x20000eac
 8001de0:	08009df8 	.word	0x08009df8
 8001de4:	20000eb0 	.word	0x20000eb0
 8001de8:	20000014 	.word	0x20000014
 8001dec:	20000eb4 	.word	0x20000eb4
 8001df0:	200020ee 	.word	0x200020ee
 8001df4:	20000eb8 	.word	0x20000eb8
 8001df8:	20000e5a 	.word	0x20000e5a
 8001dfc:	20000ebc 	.word	0x20000ebc
 8001e00:	20000e74 	.word	0x20000e74
 8001e04:	20000ec0 	.word	0x20000ec0
 8001e08:	08009dfc 	.word	0x08009dfc
 8001e0c:	20000ec4 	.word	0x20000ec4
 8001e10:	08009e00 	.word	0x08009e00
 8001e14:	20000ec8 	.word	0x20000ec8
 8001e18:	20000ed0 	.word	0x20000ed0
 8001e1c:	20000f00 	.word	0x20000f00
 8001e20:	20000f04 	.word	0x20000f04

08001e24 <_GLOBAL__sub_I_PrevScreen>:
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff fe77 	bl	8001b20 <_Z41__static_initialization_and_destruction_0ii>
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_Z9GotoSleepv>:
#include "sleep.h"
#include "screens.h"
//#include <stm32l0xx.h>

void GotoSleep(void)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b08b      	sub	sp, #44	; 0x2c
 8001e38:	af00      	add	r7, sp, #0
	ByScreen();
 8001e3a:	f7ff fb4d 	bl	80014d8 <_Z8ByScreenv>
	osDelay(800);
 8001e3e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e42:	f004 fffd 	bl	8006e40 <osDelay>

	//put screen and MC to stop mode
	StandbyScr();
 8001e46:	f7ff fcc6 	bl	80017d6 <_Z10StandbyScrv>

	CAN_Sleep();
 8001e4a:	f7fe fcb3 	bl	80007b4 <_Z9CAN_Sleepv>
	HAL_SuspendTick();
 8001e4e:	f000 fa73 	bl	8002338 <HAL_SuspendTick>

    /* TIM2 clock DeInit */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <_Z9GotoSleepv+0xb0>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <_Z9GotoSleepv+0xb0>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	61d3      	str	r3, [r2, #28]
    /* TIM2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8001e5e:	201c      	movs	r0, #28
 8001e60:	f002 f81d 	bl	8003e9e <HAL_NVIC_DisableIRQ>

    EXTI_HandleTypeDef hexti_canrx = { 0 };
 8001e64:	f107 0320 	add.w	r3, r7, #32
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
    EXTI_ConfigTypeDef hexti_canrx_config, hexti_canrx_conf_bk;

    // Get the handle of the EXTI 11 ( bxCAN RX line )
    HAL_EXTI_GetHandle(&hexti_canrx, EXTI_LINE_11);
 8001e6e:	f107 0320 	add.w	r3, r7, #32
 8001e72:	491d      	ldr	r1, [pc, #116]	; (8001ee8 <_Z9GotoSleepv+0xb4>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 f9ef 	bl	8004258 <HAL_EXTI_GetHandle>

    HAL_EXTI_GetConfigLine(
 8001e7a:	f107 0210 	add.w	r2, r7, #16
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 f96f 	bl	8004168 <HAL_EXTI_GetConfigLine>
                           &hexti_canrx,
                           &hexti_canrx_config
                           );
    hexti_canrx_conf_bk = hexti_canrx_config;	//make a backup copy
 8001e8a:	463c      	mov	r4, r7
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    hexti_canrx_config.Mode = EXTI_MODE_EVENT;
 8001e96:	2302      	movs	r3, #2
 8001e98:	617b      	str	r3, [r7, #20]
    hexti_canrx_config.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	61bb      	str	r3, [r7, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9e:	b672      	cpsid	i
}
 8001ea0:	bf00      	nop

    __disable_irq(); //disable so that we don't end up in the ISR until we reconfigure the clocks after wakeup

    HAL_EXTI_SetConfigLine(&hexti_canrx, &hexti_canrx_config);
 8001ea2:	f107 0210 	add.w	r2, r7, #16
 8001ea6:	f107 0320 	add.w	r3, r7, #32
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 f8b5 	bl	800401c <HAL_EXTI_SetConfigLine>

    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE); // STOP mode, wake up at event
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f002 fd1d 	bl	80048f4 <HAL_PWR_EnterSTOPMode>

    HAL_EXTI_ClearPending(&hexti_canrx, EXTI_TRIGGER_RISING_FALLING);
 8001eba:	f107 0320 	add.w	r3, r7, #32
 8001ebe:	2103      	movs	r1, #3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 f9dd 	bl	8004280 <HAL_EXTI_ClearPending>
    HAL_EXTI_SetConfigLine(&hexti_canrx, &hexti_canrx_conf_bk); //restore line 11 config
 8001ec6:	463a      	mov	r2, r7
 8001ec8:	f107 0320 	add.w	r3, r7, #32
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 f8a4 	bl	800401c <HAL_EXTI_SetConfigLine>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ed4:	b662      	cpsie	i
}
 8001ed6:	bf00      	nop

	__enable_irq(); //now the EXTI interrupt will fire

    HAL_ResumeTick();
 8001ed8:	f000 fa3e 	bl	8002358 <HAL_ResumeTick>
}
 8001edc:	bf00      	nop
 8001ede:	372c      	adds	r7, #44	; 0x2c
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd90      	pop	{r4, r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	0600000b 	.word	0x0600000b

08001eec <_Z15ResumeFromSleepv>:

void ResumeFromSleep(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <_Z15ResumeFromSleepv+0x44>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <_Z15ResumeFromSleepv+0x44>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <_Z15ResumeFromSleepv+0x44>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 9, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2109      	movs	r1, #9
 8001f0e:	201c      	movs	r0, #28
 8001f10:	f001 ff9b 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f14:	201c      	movs	r0, #28
 8001f16:	f001 ffb4 	bl	8003e82 <HAL_NVIC_EnableIRQ>

    CAN_Resume();
 8001f1a:	f7fe fc71 	bl	8000800 <_Z10CAN_Resumev>

//	HiScreen();
	ResumeScr();
 8001f1e:	f7ff fc60 	bl	80017e2 <_Z9ResumeScrv>
//	osDelay(100);

	SwitchScreen(NORM_SCREEN);
 8001f22:	2003      	movs	r0, #3
 8001f24:	f7ff faa2 	bl	800146c <_Z12SwitchScreenh>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000

08001f34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_MspInit+0x68>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_MspInit+0x68>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6193      	str	r3, [r2, #24]
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_MspInit+0x68>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_MspInit+0x68>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <HAL_MspInit+0x68>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	61d3      	str	r3, [r2, #28]
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_MspInit+0x68>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	f06f 0001 	mvn.w	r0, #1
 8001f72:	f001 ff6a 	bl	8003e4a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_MspInit+0x6c>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_MspInit+0x6c>)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010000 	.word	0x40010000

08001fa4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a28      	ldr	r2, [pc, #160]	; (8002060 <HAL_CAN_MspInit+0xbc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d149      	bne.n	8002058 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_CAN_MspInit+0xc0>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4a26      	ldr	r2, [pc, #152]	; (8002064 <HAL_CAN_MspInit+0xc0>)
 8001fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fce:	61d3      	str	r3, [r2, #28]
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_CAN_MspInit+0xc0>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_CAN_MspInit+0xc0>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a20      	ldr	r2, [pc, #128]	; (8002064 <HAL_CAN_MspInit+0xc0>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <HAL_CAN_MspInit+0xc0>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ff4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ff8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	4619      	mov	r1, r3
 8002008:	4817      	ldr	r0, [pc, #92]	; (8002068 <HAL_CAN_MspInit+0xc4>)
 800200a:	f002 f951 	bl	80042b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800200e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	4619      	mov	r1, r3
 8002022:	4811      	ldr	r0, [pc, #68]	; (8002068 <HAL_CAN_MspInit+0xc4>)
 8002024:	f002 f944 	bl	80042b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 6, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2106      	movs	r1, #6
 800202c:	2014      	movs	r0, #20
 800202e:	f001 ff0c 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002032:	2014      	movs	r0, #20
 8002034:	f001 ff25 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 6, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	2106      	movs	r1, #6
 800203c:	2015      	movs	r0, #21
 800203e:	f001 ff04 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002042:	2015      	movs	r0, #21
 8002044:	f001 ff1d 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	2105      	movs	r1, #5
 800204c:	2016      	movs	r0, #22
 800204e:	f001 fefc 	bl	8003e4a <HAL_NVIC_SetPriority>
//    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8002052:	2016      	movs	r0, #22
 8002054:	f001 ff23 	bl	8003e9e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40006400 	.word	0x40006400
 8002064:	40021000 	.word	0x40021000
 8002068:	40010800 	.word	0x40010800

0800206c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <HAL_I2C_MspInit+0x70>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d123      	bne.n	80020d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_I2C_MspInit+0x74>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <HAL_I2C_MspInit+0x74>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_I2C_MspInit+0x74>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020a4:	23c0      	movs	r3, #192	; 0xc0
 80020a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a8:	2312      	movs	r3, #18
 80020aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	4619      	mov	r1, r3
 80020b6:	480b      	ldr	r0, [pc, #44]	; (80020e4 <HAL_I2C_MspInit+0x78>)
 80020b8:	f002 f8fa 	bl	80042b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <HAL_I2C_MspInit+0x74>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <HAL_I2C_MspInit+0x74>)
 80020c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c6:	61d3      	str	r3, [r2, #28]
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_I2C_MspInit+0x74>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020d4:	bf00      	nop
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40005400 	.word	0x40005400
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40010c00 	.word	0x40010c00

080020e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_SPI_MspInit+0x80>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d12b      	bne.n	8002160 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_SPI_MspInit+0x84>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_SPI_MspInit+0x84>)
 800210e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002112:	6193      	str	r3, [r2, #24]
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_SPI_MspInit+0x84>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_SPI_MspInit+0x84>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	4a11      	ldr	r2, [pc, #68]	; (800216c <HAL_SPI_MspInit+0x84>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6193      	str	r3, [r2, #24]
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HAL_SPI_MspInit+0x84>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002138:	23a0      	movs	r3, #160	; 0xa0
 800213a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	4619      	mov	r1, r3
 800214a:	4809      	ldr	r0, [pc, #36]	; (8002170 <HAL_SPI_MspInit+0x88>)
 800214c:	f002 f8b0 	bl	80042b0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 10, 0);
 8002150:	2200      	movs	r2, #0
 8002152:	210a      	movs	r1, #10
 8002154:	2023      	movs	r0, #35	; 0x23
 8002156:	f001 fe78 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800215a:	2023      	movs	r0, #35	; 0x23
 800215c:	f001 fe91 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002160:	bf00      	nop
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40013000 	.word	0x40013000
 800216c:	40021000 	.word	0x40021000
 8002170:	40010800 	.word	0x40010800

08002174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002184:	d114      	bne.n	80021b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_TIM_Base_MspInit+0x68>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a14      	ldr	r2, [pc, #80]	; (80021dc <HAL_TIM_Base_MspInit+0x68>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	61d3      	str	r3, [r2, #28]
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_TIM_Base_MspInit+0x68>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 9, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2109      	movs	r1, #9
 80021a2:	201c      	movs	r0, #28
 80021a4:	f001 fe51 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021a8:	201c      	movs	r0, #28
 80021aa:	f001 fe6a 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021ae:	e010      	b.n	80021d2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <HAL_TIM_Base_MspInit+0x6c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d10b      	bne.n	80021d2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_TIM_Base_MspInit+0x68>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4a07      	ldr	r2, [pc, #28]	; (80021dc <HAL_TIM_Base_MspInit+0x68>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	61d3      	str	r3, [r2, #28]
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_TIM_Base_MspInit+0x68>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40000400 	.word	0x40000400

080021e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0310 	add.w	r3, r7, #16
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a20      	ldr	r2, [pc, #128]	; (8002280 <HAL_UART_MspInit+0x9c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d139      	bne.n	8002278 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <HAL_UART_MspInit+0xa0>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <HAL_UART_MspInit+0xa0>)
 800220a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_UART_MspInit+0xa0>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_UART_MspInit+0xa0>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a18      	ldr	r2, [pc, #96]	; (8002284 <HAL_UART_MspInit+0xa0>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_UART_MspInit+0xa0>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002238:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	4619      	mov	r1, r3
 8002248:	480f      	ldr	r0, [pc, #60]	; (8002288 <HAL_UART_MspInit+0xa4>)
 800224a:	f002 f831 	bl	80042b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800224e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	4619      	mov	r1, r3
 8002262:	4809      	ldr	r0, [pc, #36]	; (8002288 <HAL_UART_MspInit+0xa4>)
 8002264:	f002 f824 	bl	80042b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 11, 0);
 8002268:	2200      	movs	r2, #0
 800226a:	210b      	movs	r1, #11
 800226c:	2025      	movs	r0, #37	; 0x25
 800226e:	f001 fdec 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002272:	2025      	movs	r0, #37	; 0x25
 8002274:	f001 fe05 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002278:	bf00      	nop
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40013800 	.word	0x40013800
 8002284:	40021000 	.word	0x40021000
 8002288:	40010800 	.word	0x40010800

0800228c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	; 0x30
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800229c:	2200      	movs	r2, #0
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	2019      	movs	r0, #25
 80022a2:	f001 fdd2 	bl	8003e4a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022a6:	2019      	movs	r0, #25
 80022a8:	f001 fdeb 	bl	8003e82 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022ac:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <HAL_InitTick+0x9c>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <HAL_InitTick+0x9c>)
 80022b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022b6:	6193      	str	r3, [r2, #24]
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_InitTick+0x9c>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022c4:	f107 0210 	add.w	r2, r7, #16
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 ff3e 	bl	8005150 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022d4:	f002 ff28 	bl	8005128 <HAL_RCC_GetPCLK2Freq>
 80022d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	4a13      	ldr	r2, [pc, #76]	; (800232c <HAL_InitTick+0xa0>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	3b01      	subs	r3, #1
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_InitTick+0xa4>)
 80022ea:	4a12      	ldr	r2, [pc, #72]	; (8002334 <HAL_InitTick+0xa8>)
 80022ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_InitTick+0xa4>)
 80022f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_InitTick+0xa4>)
 80022f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_InitTick+0xa4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_InitTick+0xa4>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002308:	4809      	ldr	r0, [pc, #36]	; (8002330 <HAL_InitTick+0xa4>)
 800230a:	f003 fc13 	bl	8005b34 <HAL_TIM_Base_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d104      	bne.n	800231e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002314:	4806      	ldr	r0, [pc, #24]	; (8002330 <HAL_InitTick+0xa4>)
 8002316:	f003 fc5d 	bl	8005bd4 <HAL_TIM_Base_Start_IT>
 800231a:	4603      	mov	r3, r0
 800231c:	e000      	b.n	8002320 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3730      	adds	r7, #48	; 0x30
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	431bde83 	.word	0x431bde83
 8002330:	200020a4 	.word	0x200020a4
 8002334:	40012c00 	.word	0x40012c00

08002338 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_SuspendTick+0x1c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	4b04      	ldr	r3, [pc, #16]	; (8002354 <HAL_SuspendTick+0x1c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	60da      	str	r2, [r3, #12]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	200020a4 	.word	0x200020a4

08002358 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_ResumeTick+0x1c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	4b04      	ldr	r3, [pc, #16]	; (8002374 <HAL_ResumeTick+0x1c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	60da      	str	r2, [r3, #12]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	200020a4 	.word	0x200020a4

08002378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	SendDebugMsg("F\n");

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <HardFault_Handler+0x4>

0800238a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <MemManage_Handler+0x4>

08002390 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <BusFault_Handler+0x4>

08002396 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239a:	e7fe      	b.n	800239a <UsageFault_Handler+0x4>

0800239c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	static BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	CANMsg_t CANMsg;

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80023ae:	4819      	ldr	r0, [pc, #100]	; (8002414 <USB_LP_CAN1_RX0_IRQHandler+0x6c>)
 80023b0:	f001 fa46 	bl	8003840 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  /* At this point xTaskToNotify should not be NULL as
  a transmission was in progress. */
//  configASSERT( xCANTaskHandle != NULL );

	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CANMsg.pRxHeader, CANMsg.rxData);
 80023b4:	463b      	mov	r3, r7
 80023b6:	331c      	adds	r3, #28
 80023b8:	463a      	mov	r2, r7
 80023ba:	2100      	movs	r1, #0
 80023bc:	4815      	ldr	r0, [pc, #84]	; (8002414 <USB_LP_CAN1_RX0_IRQHandler+0x6c>)
 80023be:	f001 f909 	bl	80035d4 <HAL_CAN_GetRxMessage>

		CANfifo1++;
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <USB_LP_CAN1_RX0_IRQHandler+0x70>)
 80023c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <USB_LP_CAN1_RX0_IRQHandler+0x70>)
 80023d2:	801a      	strh	r2, [r3, #0]

	if ( xCANTaskHandle != NULL )
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <USB_LP_CAN1_RX0_IRQHandler+0x74>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <USB_LP_CAN1_RX0_IRQHandler+0x4a>
	{
		if ( CANMsgQueueHandle != NULL ) xQueueSendFromISR(CANMsgQueueHandle, &CANMsg, &xHigherPriorityTaskWoken);
 80023dc:	4b10      	ldr	r3, [pc, #64]	; (8002420 <USB_LP_CAN1_RX0_IRQHandler+0x78>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <USB_LP_CAN1_RX0_IRQHandler+0x4a>
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <USB_LP_CAN1_RX0_IRQHandler+0x78>)
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	4639      	mov	r1, r7
 80023ea:	2300      	movs	r3, #0
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <USB_LP_CAN1_RX0_IRQHandler+0x7c>)
 80023ee:	f004 ff4f 	bl	8007290 <xQueueGenericSendFromISR>
//		vTaskNotifyGiveFromISR( xCANTaskHandle,  &xHigherPriorityTaskWoken );
	}
        // We should switch context so the ISR returns to a different task.
        // NOTE:  How this is done depends on the port you are using.  Check
        // the documentation and examples for your port.
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <USB_LP_CAN1_RX0_IRQHandler+0x7c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <USB_LP_CAN1_RX0_IRQHandler+0x62>
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <USB_LP_CAN1_RX0_IRQHandler+0x80>)
 80023fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	f3bf 8f4f 	dsb	sy
 8002406:	f3bf 8f6f 	isb	sy

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	; 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200009d0 	.word	0x200009d0
 8002418:	200020ee 	.word	0x200020ee
 800241c:	20000e4c 	.word	0x20000e4c
 8002420:	20000df8 	.word	0x20000df8
 8002424:	20000f08 	.word	0x20000f08
 8002428:	e000ed04 	.word	0xe000ed04

0800242c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af00      	add	r7, sp, #0
	static BaseType_t xHigherPriorityTaskWoken = pdFALSE;
//	xHigherPriorityTaskWoken = pdFALSE;
	CANMsg_t CANMsg;

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002432:	481a      	ldr	r0, [pc, #104]	; (800249c <CAN1_RX1_IRQHandler+0x70>)
 8002434:	f001 fa04 	bl	8003840 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
  /* At this point xTaskToNotify should not be NULL as
  a transmission was in progress. */
//  configASSERT( xCANTaskHandle != NULL );

	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO1, &CANMsg.pRxHeader, CANMsg.rxData);
 8002438:	463b      	mov	r3, r7
 800243a:	331c      	adds	r3, #28
 800243c:	463a      	mov	r2, r7
 800243e:	2101      	movs	r1, #1
 8002440:	4816      	ldr	r0, [pc, #88]	; (800249c <CAN1_RX1_IRQHandler+0x70>)
 8002442:	f001 f8c7 	bl	80035d4 <HAL_CAN_GetRxMessage>

		CANfifo2++;
 8002446:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <CAN1_RX1_IRQHandler+0x74>)
 8002448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800244c:	b29b      	uxth	r3, r3
 800244e:	3301      	adds	r3, #1
 8002450:	b29b      	uxth	r3, r3
 8002452:	b21a      	sxth	r2, r3
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <CAN1_RX1_IRQHandler+0x74>)
 8002456:	801a      	strh	r2, [r3, #0]

	if ( xCANTaskHandle != NULL )
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <CAN1_RX1_IRQHandler+0x78>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00c      	beq.n	800247a <CAN1_RX1_IRQHandler+0x4e>
	{
		xQueueSendFromISR(CANMsgQueueHandle, &CANMsg, &xHigherPriorityTaskWoken);
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <CAN1_RX1_IRQHandler+0x7c>)
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	4639      	mov	r1, r7
 8002466:	2300      	movs	r3, #0
 8002468:	4a10      	ldr	r2, [pc, #64]	; (80024ac <CAN1_RX1_IRQHandler+0x80>)
 800246a:	f004 ff11 	bl	8007290 <xQueueGenericSendFromISR>
// Notify the task that a CAN message received
		vTaskNotifyGiveFromISR( xCANTaskHandle,  &xHigherPriorityTaskWoken );
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <CAN1_RX1_IRQHandler+0x78>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	490e      	ldr	r1, [pc, #56]	; (80024ac <CAN1_RX1_IRQHandler+0x80>)
 8002474:	4618      	mov	r0, r3
 8002476:	f006 f94d 	bl	8008714 <vTaskNotifyGiveFromISR>
	}

    // We should switch context so the ISR returns to a different task.
    // NOTE:  How this is done depends on the port you are using.  Check
    // the documentation and examples for your port.
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <CAN1_RX1_IRQHandler+0x80>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <CAN1_RX1_IRQHandler+0x66>
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <CAN1_RX1_IRQHandler+0x84>)
 8002484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f3bf 8f4f 	dsb	sy
 800248e:	f3bf 8f6f 	isb	sy

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	3728      	adds	r7, #40	; 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200009d0 	.word	0x200009d0
 80024a0:	200020ec 	.word	0x200020ec
 80024a4:	20000e4c 	.word	0x20000e4c
 80024a8:	20000df8 	.word	0x20000df8
 80024ac:	20000f0c 	.word	0x20000f0c
 80024b0:	e000ed04 	.word	0xe000ed04

080024b4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */


  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <CAN1_SCE_IRQHandler+0x10>)
 80024ba:	f001 f9c1 	bl	8003840 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */
//  if (hcan.Instance->MSR & CAN_MSR_WKUI)
//	  	  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200009d0 	.word	0x200009d0

080024c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <TIM1_UP_IRQHandler+0x10>)
 80024ce:	f003 fc75 	bl	8005dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200020a4 	.word	0x200020a4

080024dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	BaseType_t xYieldRequired = pdFALSE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
	  /* At this point xTaskToNotify should not be NULL as
	  a transmission was in progress. */
//	  configASSERT( xScrTaskHandle != NULL );
	 uint32_t fmTicks = uwTick;
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <TIM2_IRQHandler+0x50>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	603b      	str	r3, [r7, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024ec:	4810      	ldr	r0, [pc, #64]	; (8002530 <TIM2_IRQHandler+0x54>)
 80024ee:	f003 fc65 	bl	8005dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Resume the suspended task.
	if ( xScrTaskHandle != NULL )
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <TIM2_IRQHandler+0x58>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d013      	beq.n	8002522 <TIM2_IRQHandler+0x46>
	{
		xYieldRequired = xTaskResumeFromISR( xScrTaskHandle );
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <TIM2_IRQHandler+0x58>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f005 fbde 	bl	8007cc0 <xTaskResumeFromISR>
 8002504:	6078      	str	r0, [r7, #4]

		if( xYieldRequired == pdTRUE )
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10a      	bne.n	8002522 <TIM2_IRQHandler+0x46>
		{
			// We should switch context so the ISR returns to a different task.
			// NOTE:  How this is done depends on the port you are using.  Check
			// the documentation and examples for your port.
			portYIELD_FROM_ISR(xYieldRequired);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <TIM2_IRQHandler+0x46>
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <TIM2_IRQHandler+0x5c>)
 8002514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	f3bf 8f6f 	isb	sy
		}

	}

  /* USER CODE END TIM2_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200020f0 	.word	0x200020f0
 8002530:	20000aa4 	.word	0x20000aa4
 8002534:	20000e50 	.word	0x20000e50
 8002538:	e000ed04 	.word	0xe000ed04

0800253c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
//	portENTER_CRITICAL();

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <SPI1_IRQHandler+0x10>)
 8002542:	f003 f89d 	bl	8005680 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */
//  portEXIT_CRITICAL();

  /* USER CODE END SPI1_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000a4c 	.word	0x20000a4c

08002550 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <USART1_IRQHandler+0x10>)
 8002556:	f004 f82b 	bl	80065b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000b34 	.word	0x20000b34

08002564 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002568:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800256c:	f002 f854 	bl	8004618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
	return 1;
 8002578:	2301      	movs	r3, #1
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <_kill>:

int _kill(int pid, int sig)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800258c:	f007 fa7e 	bl	8009a8c <__errno>
 8002590:	4603      	mov	r3, r0
 8002592:	2216      	movs	r2, #22
 8002594:	601a      	str	r2, [r3, #0]
	return -1;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <_exit>:

void _exit (int status)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffe7 	bl	8002582 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025b4:	e7fe      	b.n	80025b4 <_exit+0x12>
	...

080025b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c0:	4a14      	ldr	r2, [pc, #80]	; (8002614 <_sbrk+0x5c>)
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <_sbrk+0x60>)
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <_sbrk+0x64>)
 80025d6:	4a12      	ldr	r2, [pc, #72]	; (8002620 <_sbrk+0x68>)
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d207      	bcs.n	80025f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e8:	f007 fa50 	bl	8009a8c <__errno>
 80025ec:	4603      	mov	r3, r0
 80025ee:	220c      	movs	r2, #12
 80025f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f6:	e009      	b.n	800260c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <_sbrk+0x64>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <_sbrk+0x64>)
 8002608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20005000 	.word	0x20005000
 8002618:	00000400 	.word	0x00000400
 800261c:	20000f10 	.word	0x20000f10
 8002620:	20002108 	.word	0x20002108

08002624 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <_Z13UARTWait4Charv>:
 if((_ascii >= 'A') && (_ascii <= 'F')) return(_ascii - 'A') ;
 return(0xFF)	;
}

void UARTWait4Char()
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
	  HAL_UART_Receive_IT (&huart1, UserRxBufferFS, 1);
 8002634:	2201      	movs	r2, #1
 8002636:	4903      	ldr	r1, [pc, #12]	; (8002644 <_Z13UARTWait4Charv+0x14>)
 8002638:	4803      	ldr	r0, [pc, #12]	; (8002648 <_Z13UARTWait4Charv+0x18>)
 800263a:	f003 ff88 	bl	800654e <HAL_UART_Receive_IT>
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000f14 	.word	0x20000f14
 8002648:	20000b34 	.word	0x20000b34

0800264c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

	if (huart == &huart1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a0d      	ldr	r2, [pc, #52]	; (800268c <HAL_UART_RxCpltCallback+0x40>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d112      	bne.n	8002682 <HAL_UART_RxCpltCallback+0x36>
				HAL_UART_Transmit_IT(&huart1, (uint8_t*)"\r", 1);
				RXbuffIdx++;
			break ;
		 }
*/
	    switch(RXbuffIdx)
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_UART_RxCpltCallback+0x44>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
			case 0: case 1:
//				UserRxBufferFS[] = 0;
			break ;
		 }

	    RXbuffIdx++;
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_UART_RxCpltCallback+0x44>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_UART_RxCpltCallback+0x44>)
 800266c:	701a      	strb	r2, [r3, #0]

	    HAL_UART_Receive_IT (&huart1, UserRxBufferFS+RXbuffIdx, 1);
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_UART_RxCpltCallback+0x44>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4b07      	ldr	r3, [pc, #28]	; (8002694 <HAL_UART_RxCpltCallback+0x48>)
 8002676:	4413      	add	r3, r2
 8002678:	2201      	movs	r2, #1
 800267a:	4619      	mov	r1, r3
 800267c:	4803      	ldr	r0, [pc, #12]	; (800268c <HAL_UART_RxCpltCallback+0x40>)
 800267e:	f003 ff66 	bl	800654e <HAL_UART_Receive_IT>

	}
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000b34 	.word	0x20000b34
 8002690:	20000f34 	.word	0x20000f34
 8002694:	20000f14 	.word	0x20000f14

08002698 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002698:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800269a:	e003      	b.n	80026a4 <LoopCopyDataInit>

0800269c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800269e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026a2:	3104      	adds	r1, #4

080026a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026a4:	480a      	ldr	r0, [pc, #40]	; (80026d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80026a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80026aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026ac:	d3f6      	bcc.n	800269c <CopyDataInit>
  ldr r2, =_sbss
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026b0:	e002      	b.n	80026b8 <LoopFillZerobss>

080026b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026b4:	f842 3b04 	str.w	r3, [r2], #4

080026b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026bc:	d3f9      	bcc.n	80026b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026be:	f7ff ffb1 	bl	8002624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026c2:	f007 f9e9 	bl	8009a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026c6:	f7fe f8d5 	bl	8000874 <main>
  bx lr
 80026ca:	4770      	bx	lr
  ldr r3, =_sidata
 80026cc:	08009f9c 	.word	0x08009f9c
  ldr r0, =_sdata
 80026d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026d4:	20000718 	.word	0x20000718
  ldr r2, =_sbss
 80026d8:	20000718 	.word	0x20000718
  ldr r3, = _ebss
 80026dc:	20002104 	.word	0x20002104

080026e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026e0:	e7fe      	b.n	80026e0 <ADC1_2_IRQHandler>
	...

080026e4 <_Z17DISP_WriteCommandh>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
void DISP_WriteCommand(uint8_t cmd)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
	DISP_Select();
 80026ee:	2200      	movs	r2, #0
 80026f0:	2110      	movs	r1, #16
 80026f2:	480c      	ldr	r0, [pc, #48]	; (8002724 <_Z17DISP_WriteCommandh+0x40>)
 80026f4:	f001 ff77 	bl	80045e6 <HAL_GPIO_WritePin>
	DISP_DC_Clr();
 80026f8:	2200      	movs	r2, #0
 80026fa:	2108      	movs	r1, #8
 80026fc:	4809      	ldr	r0, [pc, #36]	; (8002724 <_Z17DISP_WriteCommandh+0x40>)
 80026fe:	f001 ff72 	bl	80045e6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&DISP_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002702:	1df9      	adds	r1, r7, #7
 8002704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002708:	2201      	movs	r2, #1
 800270a:	4807      	ldr	r0, [pc, #28]	; (8002728 <_Z17DISP_WriteCommandh+0x44>)
 800270c:	f002 fdf2 	bl	80052f4 <HAL_SPI_Transmit>
	DISP_UnSelect();
 8002710:	2201      	movs	r2, #1
 8002712:	2110      	movs	r1, #16
 8002714:	4803      	ldr	r0, [pc, #12]	; (8002724 <_Z17DISP_WriteCommandh+0x40>)
 8002716:	f001 ff66 	bl	80045e6 <HAL_GPIO_WritePin>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40010800 	.word	0x40010800
 8002728:	20000a4c 	.word	0x20000a4c

0800272c <_Z14DISP_WriteDataPhj>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
void DISP_WriteData(uint8_t *buff, size_t buff_size)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
	}

#else //for both St7565 and SSD1306/SPD0301
	uint8_t p;

	for (p=0;p<8;p++)
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b07      	cmp	r3, #7
 800273e:	d827      	bhi.n	8002790 <_Z14DISP_WriteDataPhj+0x64>
	{
		DISP_WriteCommand(0xb0 | p);	//Set page
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002746:	b2db      	uxtb	r3, r3
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ffcb 	bl	80026e4 <_Z17DISP_WriteCommandh>
//		DISP_WriteCommand(0x0 | 4);	//Set lower column for rotated ST7565
		DISP_WriteCommand(0x0 | 0);	//Set lower column
 800274e:	2000      	movs	r0, #0
 8002750:	f7ff ffc8 	bl	80026e4 <_Z17DISP_WriteCommandh>
		DISP_WriteCommand(0x10 | 0);	//Set upper column
 8002754:	2010      	movs	r0, #16
 8002756:	f7ff ffc5 	bl	80026e4 <_Z17DISP_WriteCommandh>
		DISP_WriteCommand(0xE0);	//Set RMW
 800275a:	20e0      	movs	r0, #224	; 0xe0
 800275c:	f7ff ffc2 	bl	80026e4 <_Z17DISP_WriteCommandh>

		DISP_Select();
 8002760:	2200      	movs	r2, #0
 8002762:	2110      	movs	r1, #16
 8002764:	480f      	ldr	r0, [pc, #60]	; (80027a4 <_Z14DISP_WriteDataPhj+0x78>)
 8002766:	f001 ff3e 	bl	80045e6 <HAL_GPIO_WritePin>
		DISP_DC_Set();
 800276a:	2201      	movs	r2, #1
 800276c:	2108      	movs	r1, #8
 800276e:	480d      	ldr	r0, [pc, #52]	; (80027a4 <_Z14DISP_WriteDataPhj+0x78>)
 8002770:	f001 ff39 	bl	80045e6 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, buff + SCREEN_WIDTH*p, SCREEN_WIDTH);
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	01db      	lsls	r3, r3, #7
 8002778:	461a      	mov	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	4619      	mov	r1, r3
 8002782:	4809      	ldr	r0, [pc, #36]	; (80027a8 <_Z14DISP_WriteDataPhj+0x7c>)
 8002784:	f002 fef2 	bl	800556c <HAL_SPI_Transmit_IT>
	for (p=0;p<8;p++)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	3301      	adds	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	e7d4      	b.n	800273a <_Z14DISP_WriteDataPhj+0xe>
	}

#endif


	DISP_UnSelect();
 8002790:	2201      	movs	r2, #1
 8002792:	2110      	movs	r1, #16
 8002794:	4803      	ldr	r0, [pc, #12]	; (80027a4 <_Z14DISP_WriteDataPhj+0x78>)
 8002796:	f001 ff26 	bl	80045e6 <HAL_GPIO_WritePin>
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40010800 	.word	0x40010800
 80027a8:	20000a4c 	.word	0x20000a4c

080027ac <_Z9DISP_Initv>:
 * @brief Initialize UC1609 controller
 * @param none
 * @return none
 */
void DISP_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
//	HAL_Delay(25);
    DISP_RST_Clr();
 80027b0:	2200      	movs	r2, #0
 80027b2:	2104      	movs	r1, #4
 80027b4:	482b      	ldr	r0, [pc, #172]	; (8002864 <_Z9DISP_Initv+0xb8>)
 80027b6:	f001 ff16 	bl	80045e6 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80027ba:	2064      	movs	r0, #100	; 0x64
 80027bc:	f000 fc04 	bl	8002fc8 <HAL_Delay>
    DISP_RST_Set();
 80027c0:	2201      	movs	r2, #1
 80027c2:	2104      	movs	r1, #4
 80027c4:	4827      	ldr	r0, [pc, #156]	; (8002864 <_Z9DISP_Initv+0xb8>)
 80027c6:	f001 ff0e 	bl	80045e6 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80027ca:	2014      	movs	r0, #20
 80027cc:	f000 fbfc 	bl	8002fc8 <HAL_Delay>

#ifdef SSD1306
//    DISP_WriteCommand(0xAE); //display off

// Set multiplex ratio.
    DISP_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80027d0:	20a8      	movs	r0, #168	; 0xa8
 80027d2:	f7ff ff87 	bl	80026e4 <_Z17DISP_WriteCommandh>
    DISP_WriteCommand(0x3F); // Seems to work for 128px high displays too.
 80027d6:	203f      	movs	r0, #63	; 0x3f
 80027d8:	f7ff ff84 	bl	80026e4 <_Z17DISP_WriteCommandh>

    DISP_WriteCommand(0xD3); //-set display vertical offset - CHECK
 80027dc:	20d3      	movs	r0, #211	; 0xd3
 80027de:	f7ff ff81 	bl	80026e4 <_Z17DISP_WriteCommandh>
    DISP_WriteCommand(0x00); //-not offset
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7ff ff7e 	bl	80026e4 <_Z17DISP_WriteCommandh>

    DISP_WriteCommand(0x40); //--set start line address - CHECK
 80027e8:	2040      	movs	r0, #64	; 0x40
 80027ea:	f7ff ff7b 	bl	80026e4 <_Z17DISP_WriteCommandh>

#ifdef DISP_MIRROR_HORIZ
    DISP_WriteCommand(0xA0); // Mirror horizontally
 80027ee:	20a0      	movs	r0, #160	; 0xa0
 80027f0:	f7ff ff78 	bl	80026e4 <_Z17DISP_WriteCommandh>
#else
    DISP_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef DISP_MIRROR_VERT
    DISP_WriteCommand(0xC0); // Mirror vertically
 80027f4:	20c0      	movs	r0, #192	; 0xc0
 80027f6:	f7ff ff75 	bl	80026e4 <_Z17DISP_WriteCommandh>
#else
    DISP_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    DISP_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80027fa:	20da      	movs	r0, #218	; 0xda
 80027fc:	f7ff ff72 	bl	80026e4 <_Z17DISP_WriteCommandh>
#if (SCREEN_HEIGHT == 32)
    DISP_WriteCommand(0x02);
#elif (SCREEN_HEIGHT == 64)
    DISP_WriteCommand(0x12);
 8002800:	2012      	movs	r0, #18
 8002802:	f7ff ff6f 	bl	80026e4 <_Z17DISP_WriteCommandh>
#elif (SCREEN_HEIGHT == 128)
    DISP_WriteCommand(0x12);
#endif

    DISP_SetContrast(0x0);
 8002806:	2000      	movs	r0, #0
 8002808:	f000 f866 	bl	80028d8 <_Z16DISP_SetContrasth>

    DISP_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800280c:	20a4      	movs	r0, #164	; 0xa4
 800280e:	f7ff ff69 	bl	80026e4 <_Z17DISP_WriteCommandh>
//    DISP_WriteCommand(0xA5); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content

#ifdef DISP_INVERSE_COLOR
    DISP_WriteCommand(0xA7); //--set inverse color
#else
    DISP_WriteCommand(0xA6); //--set normal color
 8002812:	20a6      	movs	r0, #166	; 0xa6
 8002814:	f7ff ff66 	bl	80026e4 <_Z17DISP_WriteCommandh>
#endif

    DISP_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002818:	20d5      	movs	r0, #213	; 0xd5
 800281a:	f7ff ff63 	bl	80026e4 <_Z17DISP_WriteCommandh>
    DISP_WriteCommand(0x80); //--set divide ratio
 800281e:	2080      	movs	r0, #128	; 0x80
 8002820:	f7ff ff60 	bl	80026e4 <_Z17DISP_WriteCommandh>

    DISP_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002824:	20b0      	movs	r0, #176	; 0xb0
 8002826:	f7ff ff5d 	bl	80026e4 <_Z17DISP_WriteCommandh>

    DISP_WriteCommand(0x00); //---set low column address
 800282a:	2000      	movs	r0, #0
 800282c:	f7ff ff5a 	bl	80026e4 <_Z17DISP_WriteCommandh>
    DISP_WriteCommand(0x10); //---set high column address
 8002830:	2010      	movs	r0, #16
 8002832:	f7ff ff57 	bl	80026e4 <_Z17DISP_WriteCommandh>

    DISP_WriteCommand(0x8D); //--set DC-DC enable
 8002836:	208d      	movs	r0, #141	; 0x8d
 8002838:	f7ff ff54 	bl	80026e4 <_Z17DISP_WriteCommandh>
    DISP_WriteCommand(0x14); //
 800283c:	2014      	movs	r0, #20
 800283e:	f7ff ff51 	bl	80026e4 <_Z17DISP_WriteCommandh>

    DISP_WriteCommand(0xDB); //--set vcomh
 8002842:	20db      	movs	r0, #219	; 0xdb
 8002844:	f7ff ff4e 	bl	80026e4 <_Z17DISP_WriteCommandh>
    DISP_WriteCommand(0x34); //0x20,0.77xVcc
 8002848:	2034      	movs	r0, #52	; 0x34
 800284a:	f7ff ff4b 	bl	80026e4 <_Z17DISP_WriteCommandh>

    DISP_WriteCommand(0xAF); //--turn on SSD1306 panel
 800284e:	20af      	movs	r0, #175	; 0xaf
 8002850:	f7ff ff48 	bl	80026e4 <_Z17DISP_WriteCommandh>
    // Flush buffer to screen
    //DISP_UpdateScreen();

#endif

 	HAL_Delay(50);
 8002854:	2032      	movs	r0, #50	; 0x32
 8002856:	f000 fbb7 	bl	8002fc8 <HAL_Delay>
	DISP_ClearScr(0);				//	Fill with Black.
 800285a:	2000      	movs	r0, #0
 800285c:	f000 f804 	bl	8002868 <_Z13DISP_ClearScrh>
}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40010800 	.word	0x40010800

08002868 <_Z13DISP_ClearScrh>:
 * @brief Fill the DisplayWindow with single style
 * @param style -> style to Fill with
 * @return none
 */
void DISP_ClearScr(uint8_t style)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < SCREEN_BYTES; i++)
 8002872:	2300      	movs	r3, #0
 8002874:	81fb      	strh	r3, [r7, #14]
 8002876:	89fb      	ldrh	r3, [r7, #14]
 8002878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287c:	d20c      	bcs.n	8002898 <_Z13DISP_ClearScrh+0x30>
		scr_buff[i] = style ? 0xff : 0x00;
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <_Z13DISP_ClearScrh+0x20>
 8002884:	21ff      	movs	r1, #255	; 0xff
 8002886:	e000      	b.n	800288a <_Z13DISP_ClearScrh+0x22>
 8002888:	2100      	movs	r1, #0
 800288a:	89fb      	ldrh	r3, [r7, #14]
 800288c:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <_Z13DISP_ClearScrh+0x3c>)
 800288e:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < SCREEN_BYTES; i++)
 8002890:	89fb      	ldrh	r3, [r7, #14]
 8002892:	3301      	adds	r3, #1
 8002894:	81fb      	strh	r3, [r7, #14]
 8002896:	e7ee      	b.n	8002876 <_Z13DISP_ClearScrh+0xe>
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000f44 	.word	0x20000f44

080028a8 <_Z12DISP_Standbyv>:

void DISP_Standby(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	DISP_WriteCommand(0xae);	//display OFF
	DISP_Bklit(0x100);
#endif

#ifdef SSD1306
	DISP_WriteCommand(0xae);	//display OFF
 80028ac:	20ae      	movs	r0, #174	; 0xae
 80028ae:	f7ff ff19 	bl	80026e4 <_Z17DISP_WriteCommandh>
#endif
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <_Z11DISP_Resumev>:

void DISP_Resume(void)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	af00      	add	r7, sp, #0
	DISP_WriteCommand(0xaf);	//display ON
 80028ba:	20af      	movs	r0, #175	; 0xaf
 80028bc:	f7ff ff12 	bl	80026e4 <_Z17DISP_WriteCommandh>

#ifdef ST7565
	DISP_WriteCommand(0xad);	//static indicator ON
	DISP_Bklit(0xb000);
#endif
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <_Z10DISP_Bklitt>:

void DISP_Bklit(uint16_t bri)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	80fb      	strh	r3, [r7, #6]
#ifndef SSD1306
	TIM3->CCR4 = bri;	//initial LCD backlit brightness
#endif
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <_Z16DISP_SetContrasth>:

void DISP_SetContrast(const uint8_t value) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]

    DISP_WriteCommand(0x81);
 80028e2:	2081      	movs	r0, #129	; 0x81
 80028e4:	f7ff fefe 	bl	80026e4 <_Z17DISP_WriteCommandh>
    DISP_WriteCommand(value);
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fefa 	bl	80026e4 <_Z17DISP_WriteCommandh>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_Z15DISP_DrawBitmapttP9BitmapDeft>:
 * @param style&bgstyle -> front & back styles
 * @param data -> pointer of the Bitmap array
 * @return none
 */
void DISP_DrawBitmap(uint16_t x, uint16_t y, BitmapDef *bmp, uint16_t color)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b08b      	sub	sp, #44	; 0x2c
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60ba      	str	r2, [r7, #8]
 8002900:	461a      	mov	r2, r3
 8002902:	4603      	mov	r3, r0
 8002904:	81fb      	strh	r3, [r7, #14]
 8002906:	460b      	mov	r3, r1
 8002908:	81bb      	strh	r3, [r7, #12]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
	uint8_t *bdata;
	uint16_t i;
	uint8_t j, b, w, h;
	uint16_t mem_ptr = y * SCREEN_WIDTH/8 + x + 1;
 800290e:	89bb      	ldrh	r3, [r7, #12]
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	b29a      	uxth	r2, r3
 8002914:	89fb      	ldrh	r3, [r7, #14]
 8002916:	4413      	add	r3, r2
 8002918:	b29b      	uxth	r3, r3
 800291a:	3301      	adds	r3, #1
 800291c:	847b      	strh	r3, [r7, #34]	; 0x22

	bdata = (uint8_t *)bmp->data;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61fb      	str	r3, [r7, #28]
	w = bmp->width;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	76fb      	strb	r3, [r7, #27]
	h = bmp->height;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	785b      	ldrb	r3, [r3, #1]
 800292e:	76bb      	strb	r3, [r7, #26]

	if ((x >= SCREEN_WIDTH) || (y >= SCREEN_HEIGHT))
 8002930:	89fb      	ldrh	r3, [r7, #14]
 8002932:	2b7f      	cmp	r3, #127	; 0x7f
 8002934:	d84f      	bhi.n	80029d6 <_Z15DISP_DrawBitmapttP9BitmapDeft+0xde>
 8002936:	89bb      	ldrh	r3, [r7, #12]
 8002938:	2b3f      	cmp	r3, #63	; 0x3f
 800293a:	d84c      	bhi.n	80029d6 <_Z15DISP_DrawBitmapttP9BitmapDeft+0xde>
		return;
	if ((x + w - 1) >= SCREEN_WIDTH)
 800293c:	89fa      	ldrh	r2, [r7, #14]
 800293e:	7efb      	ldrb	r3, [r7, #27]
 8002940:	4413      	add	r3, r2
 8002942:	2b80      	cmp	r3, #128	; 0x80
 8002944:	dc49      	bgt.n	80029da <_Z15DISP_DrawBitmapttP9BitmapDeft+0xe2>
		return;
	if ((y + h - 1) >= SCREEN_HEIGHT)
 8002946:	89ba      	ldrh	r2, [r7, #12]
 8002948:	7ebb      	ldrb	r3, [r7, #26]
 800294a:	4413      	add	r3, r2
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	dc46      	bgt.n	80029de <_Z15DISP_DrawBitmapttP9BitmapDeft+0xe6>
		return;

	j = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint16_t bmpBytes = h*w/8;
 8002956:	7ebb      	ldrb	r3, [r7, #26]
 8002958:	7efa      	ldrb	r2, [r7, #27]
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	da00      	bge.n	8002964 <_Z15DISP_DrawBitmapttP9BitmapDeft+0x6c>
 8002962:	3307      	adds	r3, #7
 8002964:	10db      	asrs	r3, r3, #3
 8002966:	833b      	strh	r3, [r7, #24]
	for (i = 0; i < bmpBytes; i++) {
 8002968:	2300      	movs	r3, #0
 800296a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800296c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800296e:	8b3b      	ldrh	r3, [r7, #24]
 8002970:	429a      	cmp	r2, r3
 8002972:	d235      	bcs.n	80029e0 <_Z15DISP_DrawBitmapttP9BitmapDeft+0xe8>
		b = (color & DISPLAY_REV) ? ~bdata[i] : bdata[i];
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d006      	beq.n	800298c <_Z15DISP_DrawBitmapttP9BitmapDeft+0x94>
 800297e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	43db      	mvns	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e003      	b.n	8002994 <_Z15DISP_DrawBitmapttP9BitmapDeft+0x9c>
 800298c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	4413      	add	r3, r2
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	75fb      	strb	r3, [r7, #23]
		scr_buff[mem_ptr + j] = b;
 8002996:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002998:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800299c:	4413      	add	r3, r2
 800299e:	4912      	ldr	r1, [pc, #72]	; (80029e8 <_Z15DISP_DrawBitmapttP9BitmapDeft+0xf0>)
 80029a0:	7dfa      	ldrb	r2, [r7, #23]
 80029a2:	54ca      	strb	r2, [r1, r3]
		if (++j >= w) {
 80029a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80029a8:	3301      	adds	r3, #1
 80029aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80029ae:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80029b2:	7efb      	ldrb	r3, [r7, #27]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	bf2c      	ite	cs
 80029b8:	2301      	movcs	r3, #1
 80029ba:	2300      	movcc	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <_Z15DISP_DrawBitmapttP9BitmapDeft+0xd6>
			j = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			mem_ptr += SCREEN_WIDTH;	//next row of bytes
 80029c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029ca:	3380      	adds	r3, #128	; 0x80
 80029cc:	847b      	strh	r3, [r7, #34]	; 0x22
	for (i = 0; i < bmpBytes; i++) {
 80029ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029d0:	3301      	adds	r3, #1
 80029d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80029d4:	e7ca      	b.n	800296c <_Z15DISP_DrawBitmapttP9BitmapDeft+0x74>
		return;
 80029d6:	bf00      	nop
 80029d8:	e002      	b.n	80029e0 <_Z15DISP_DrawBitmapttP9BitmapDeft+0xe8>
		return;
 80029da:	bf00      	nop
 80029dc:	e000      	b.n	80029e0 <_Z15DISP_DrawBitmapttP9BitmapDeft+0xe8>
		return;
 80029de:	bf00      	nop
		}
	}

}
 80029e0:	372c      	adds	r7, #44	; 0x2c
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	20000f44 	.word	0x20000f44

080029ec <_Z13DISP_DrawCharttcP4Fonth>:
 * @param font -> fontstyle of the string
 * @param style -> style of the char
 * @return  none
 */
void DISP_DrawChar(uint16_t x, uint16_t y, char ch, Font *font, uint8_t style)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	4603      	mov	r3, r0
 80029f6:	81fb      	strh	r3, [r7, #14]
 80029f8:	460b      	mov	r3, r1
 80029fa:	81bb      	strh	r3, [r7, #12]
 80029fc:	4613      	mov	r3, r2
 80029fe:	72fb      	strb	r3, [r7, #11]
	uint16_t i, ch_bytes;
	uint8_t j, b, w, sp = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	767b      	strb	r3, [r7, #25]

	y /= 8;	//vertical position should be a multiple of 8
 8002a04:	89bb      	ldrh	r3, [r7, #12]
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	81bb      	strh	r3, [r7, #12]
	uint16_t mem_ptr = y * SCREEN_WIDTH + x + 1;
 8002a0a:	89bb      	ldrh	r3, [r7, #12]
 8002a0c:	01db      	lsls	r3, r3, #7
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	89fb      	ldrh	r3, [r7, #14]
 8002a12:	4413      	add	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	82fb      	strh	r3, [r7, #22]

	if (ch < font->first_char || ch > (font->first_char + font->count)) {
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	789b      	ldrb	r3, [r3, #2]
 8002a1e:	7afa      	ldrb	r2, [r7, #11]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d308      	bcc.n	8002a36 <_Z13DISP_DrawCharttcP4Fonth+0x4a>
 8002a24:	7afa      	ldrb	r2, [r7, #11]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	789b      	ldrb	r3, [r3, #2]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	78db      	ldrb	r3, [r3, #3]
 8002a30:	440b      	add	r3, r1
 8002a32:	429a      	cmp	r2, r3
 8002a34:	dd0b      	ble.n	8002a4e <_Z13DISP_DrawCharttcP4Fonth+0x62>
		ch = font->first_char;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	789b      	ldrb	r3, [r3, #2]
 8002a3a:	72fb      	strb	r3, [r7, #11]
		sp = 1;	//all chars out of font range are shown as spaces
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	767b      	strb	r3, [r7, #25]
		ch_bytes = font->getCharBytes('4');	//bytes for a widest char
 8002a40:	2134      	movs	r1, #52	; 0x34
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fa01 	bl	8002e4a <_ZN4Font12getCharBytesEh>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	83bb      	strh	r3, [r7, #28]
 8002a4c:	e008      	b.n	8002a60 <_Z13DISP_DrawCharttcP4Fonth+0x74>
//		ch_bytes = font->setChar('4');	//bytes for a widest char
	}
	else
	{
//		ch_bytes = font->getCharBytes(ch);	//bytes per char
		ch_bytes = font->setChar(ch);	//bytes per char
 8002a4e:	7afb      	ldrb	r3, [r7, #11]
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa28 	bl	8002ea8 <_ZN4Font7setCharEh>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	83bb      	strh	r3, [r7, #28]
		sp = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	767b      	strb	r3, [r7, #25]
	}

	w = font->getWidth(ch);
 8002a60:	7afb      	ldrb	r3, [r7, #11]
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f9a7 	bl	8002db8 <_ZN4Font8getWidthEh>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	757b      	strb	r3, [r7, #21]

	i = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	83fb      	strh	r3, [r7, #30]
	while ( i < ch_bytes) {			//
 8002a72:	8bfa      	ldrh	r2, [r7, #30]
 8002a74:	8bbb      	ldrh	r3, [r7, #28]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d261      	bcs.n	8002b3e <_Z13DISP_DrawCharttcP4Fonth+0x152>
		for (j = 0; j < w; j++) {		//row  of vertical bytes
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	76fb      	strb	r3, [r7, #27]
 8002a7e:	7efa      	ldrb	r2, [r7, #27]
 8002a80:	7d7b      	ldrb	r3, [r7, #21]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d235      	bcs.n	8002af2 <_Z13DISP_DrawCharttcP4Fonth+0x106>
//			if (sp == 0) b = style ? ~font->getCharData(ch, i+j) : font->getCharData(ch, i+j);
			if (sp == 0) b = (style & DISPLAY_REV) ? ~font->getCharData(i+j) : font->getCharData(i+j);
 8002a86:	7e7b      	ldrb	r3, [r7, #25]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d11e      	bne.n	8002aca <_Z13DISP_DrawCharttcP4Fonth+0xde>
 8002a8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00c      	beq.n	8002ab2 <_Z13DISP_DrawCharttcP4Fonth+0xc6>
 8002a98:	8bfb      	ldrh	r3, [r7, #30]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	7efb      	ldrb	r3, [r7, #27]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f9b3 	bl	8002e10 <_ZN4Font11getCharDataEh>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	43db      	mvns	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	e009      	b.n	8002ac6 <_Z13DISP_DrawCharttcP4Fonth+0xda>
 8002ab2:	8bfb      	ldrh	r3, [r7, #30]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	7efb      	ldrb	r3, [r7, #27]
 8002ab8:	4413      	add	r3, r2
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f9a6 	bl	8002e10 <_ZN4Font11getCharDataEh>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	76bb      	strb	r3, [r7, #26]
 8002ac8:	e009      	b.n	8002ade <_Z13DISP_DrawCharttcP4Fonth+0xf2>
			else b = (style & DISPLAY_REV) ? 0xff : 0;
 8002aca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <_Z13DISP_DrawCharttcP4Fonth+0xee>
 8002ad6:	23ff      	movs	r3, #255	; 0xff
 8002ad8:	e000      	b.n	8002adc <_Z13DISP_DrawCharttcP4Fonth+0xf0>
 8002ada:	2300      	movs	r3, #0
 8002adc:	76bb      	strb	r3, [r7, #26]

			scr_buff[mem_ptr + j] = b;
 8002ade:	8afa      	ldrh	r2, [r7, #22]
 8002ae0:	7efb      	ldrb	r3, [r7, #27]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	4918      	ldr	r1, [pc, #96]	; (8002b48 <_Z13DISP_DrawCharttcP4Fonth+0x15c>)
 8002ae6:	7eba      	ldrb	r2, [r7, #26]
 8002ae8:	54ca      	strb	r2, [r1, r3]
		for (j = 0; j < w; j++) {		//row  of vertical bytes
 8002aea:	7efb      	ldrb	r3, [r7, #27]
 8002aec:	3301      	adds	r3, #1
 8002aee:	76fb      	strb	r3, [r7, #27]
 8002af0:	e7c5      	b.n	8002a7e <_Z13DISP_DrawCharttcP4Fonth+0x92>
//			HAL_SPI_Transmit(&hspi1, &b, sizeof(b), HAL_MAX_DELAY);

		}
		b = (style & DISPLAY_REV) ? 0xff : 0;	//add space after the char
 8002af2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <_Z13DISP_DrawCharttcP4Fonth+0x116>
 8002afe:	23ff      	movs	r3, #255	; 0xff
 8002b00:	e000      	b.n	8002b04 <_Z13DISP_DrawCharttcP4Fonth+0x118>
 8002b02:	2300      	movs	r3, #0
 8002b04:	76bb      	strb	r3, [r7, #26]
		for (j = 0; j < font->space; j++) scr_buff[mem_ptr + w + j] = b;
 8002b06:	2300      	movs	r3, #0
 8002b08:	76fb      	strb	r3, [r7, #27]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7b1b      	ldrb	r3, [r3, #12]
 8002b0e:	7efa      	ldrb	r2, [r7, #27]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d20b      	bcs.n	8002b2c <_Z13DISP_DrawCharttcP4Fonth+0x140>
 8002b14:	8afa      	ldrh	r2, [r7, #22]
 8002b16:	7d7b      	ldrb	r3, [r7, #21]
 8002b18:	441a      	add	r2, r3
 8002b1a:	7efb      	ldrb	r3, [r7, #27]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	490a      	ldr	r1, [pc, #40]	; (8002b48 <_Z13DISP_DrawCharttcP4Fonth+0x15c>)
 8002b20:	7eba      	ldrb	r2, [r7, #26]
 8002b22:	54ca      	strb	r2, [r1, r3]
 8002b24:	7efb      	ldrb	r3, [r7, #27]
 8002b26:	3301      	adds	r3, #1
 8002b28:	76fb      	strb	r3, [r7, #27]
 8002b2a:	e7ee      	b.n	8002b0a <_Z13DISP_DrawCharttcP4Fonth+0x11e>

		i += w;
 8002b2c:	7d7b      	ldrb	r3, [r7, #21]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	8bfb      	ldrh	r3, [r7, #30]
 8002b32:	4413      	add	r3, r2
 8002b34:	83fb      	strh	r3, [r7, #30]
		mem_ptr += SCREEN_WIDTH;	//next row of bytes
 8002b36:	8afb      	ldrh	r3, [r7, #22]
 8002b38:	3380      	adds	r3, #128	; 0x80
 8002b3a:	82fb      	strh	r3, [r7, #22]
	while ( i < ch_bytes) {			//
 8002b3c:	e799      	b.n	8002a72 <_Z13DISP_DrawCharttcP4Fonth+0x86>
	}

}
 8002b3e:	bf00      	nop
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000f44 	.word	0x20000f44

08002b4c <_Z15DISP_DrawStringttPKchh>:
 * @param style -> style of the string
 * @param bgstyle -> background style of the string
 * @return  none
 */
void DISP_DrawString(uint16_t x, uint16_t y, const char *str, uint8_t font, uint8_t style)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60ba      	str	r2, [r7, #8]
 8002b54:	461a      	mov	r2, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	81fb      	strh	r3, [r7, #14]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	81bb      	strh	r3, [r7, #12]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	71fb      	strb	r3, [r7, #7]
	Font *fnt;
	uint8_t w, len=0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	76bb      	strb	r3, [r7, #26]
	uint8_t *wstr = (uint8_t *)str;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	617b      	str	r3, [r7, #20]

	switch(font){
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	2b18      	cmp	r3, #24
 8002b6e:	d00e      	beq.n	8002b8e <_Z15DISP_DrawStringttPKchh+0x42>
 8002b70:	2b18      	cmp	r3, #24
 8002b72:	dc10      	bgt.n	8002b96 <_Z15DISP_DrawStringttPKchh+0x4a>
 8002b74:	2b0c      	cmp	r3, #12
 8002b76:	d002      	beq.n	8002b7e <_Z15DISP_DrawStringttPKchh+0x32>
 8002b78:	2b12      	cmp	r3, #18
 8002b7a:	d004      	beq.n	8002b86 <_Z15DISP_DrawStringttPKchh+0x3a>
 8002b7c:	e00b      	b.n	8002b96 <_Z15DISP_DrawStringttPKchh+0x4a>
	case FNT_SM:	fnt = FontSmall; break;
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <_Z15DISP_DrawStringttPKchh+0x128>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	e00a      	b.n	8002b9c <_Z15DISP_DrawStringttPKchh+0x50>
	case FNT_MED:	fnt = FontMedium; break;
 8002b86:	4b3c      	ldr	r3, [pc, #240]	; (8002c78 <_Z15DISP_DrawStringttPKchh+0x12c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	e006      	b.n	8002b9c <_Z15DISP_DrawStringttPKchh+0x50>
	case FNT_BIG:	fnt = FontBig; break;
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <_Z15DISP_DrawStringttPKchh+0x130>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	e002      	b.n	8002b9c <_Z15DISP_DrawStringttPKchh+0x50>
	default:	fnt = FontSmall;
 8002b96:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <_Z15DISP_DrawStringttPKchh+0x128>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	61fb      	str	r3, [r7, #28]
	}
	//calculate full length of the string if it is right aligned
	if (style & DISPLAY_RALIGN)
 8002b9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <_Z15DISP_DrawStringttPKchh+0x9e>
	{
		while (*wstr) {
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <_Z15DISP_DrawStringttPKchh+0x8a>
			len += (fnt->getWidth(*wstr) + fnt->space);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	69f8      	ldr	r0, [r7, #28]
 8002bb8:	f000 f8fe 	bl	8002db8 <_ZN4Font8getWidthEh>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	7b1b      	ldrb	r3, [r3, #12]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	7ebb      	ldrb	r3, [r7, #26]
 8002bca:	4413      	add	r3, r2
 8002bcc:	76bb      	strb	r3, [r7, #26]
			wstr++;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
		while (*wstr) {
 8002bd4:	e7e8      	b.n	8002ba8 <_Z15DISP_DrawStringttPKchh+0x5c>
		}
		x -= (len - fnt->space);
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	7b1b      	ldrb	r3, [r3, #12]
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	7ebb      	ldrb	r3, [r7, #26]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	4413      	add	r3, r2
 8002be8:	81fb      	strh	r3, [r7, #14]
	}

	while (*str) {
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d03b      	beq.n	8002c6a <_Z15DISP_DrawStringttPKchh+0x11e>
		if (fnt->widths != 0) w = fnt->getWidth(*str);
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <_Z15DISP_DrawStringttPKchh+0xc0>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	69f8      	ldr	r0, [r7, #28]
 8002c02:	f000 f8d9 	bl	8002db8 <_ZN4Font8getWidthEh>
 8002c06:	4603      	mov	r3, r0
 8002c08:	76fb      	strb	r3, [r7, #27]
 8002c0a:	e002      	b.n	8002c12 <_Z15DISP_DrawStringttPKchh+0xc6>
		else w = fnt->width;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	76fb      	strb	r3, [r7, #27]

		if (x + w > SCREEN_WIDTH) {
 8002c12:	89fa      	ldrh	r2, [r7, #14]
 8002c14:	7efb      	ldrb	r3, [r7, #27]
 8002c16:	4413      	add	r3, r2
 8002c18:	2b80      	cmp	r3, #128	; 0x80
 8002c1a:	dd0d      	ble.n	8002c38 <_Z15DISP_DrawStringttPKchh+0xec>
			x = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	81fb      	strh	r3, [r7, #14]
			y += fnt->height;
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	89bb      	ldrh	r3, [r7, #12]
 8002c28:	4413      	add	r3, r2
 8002c2a:	81bb      	strh	r3, [r7, #12]
			if (y + fnt->height > SCREEN_HEIGHT) {
 8002c2c:	89bb      	ldrh	r3, [r7, #12]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	7852      	ldrb	r2, [r2, #1]
 8002c32:	4413      	add	r3, r2
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	dc17      	bgt.n	8002c68 <_Z15DISP_DrawStringttPKchh+0x11c>
				break;
			}
		}
		DISP_DrawChar(x, y, *str, fnt, style);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	89b9      	ldrh	r1, [r7, #12]
 8002c3e:	89f8      	ldrh	r0, [r7, #14]
 8002c40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f7ff fed0 	bl	80029ec <_Z13DISP_DrawCharttcP4Fonth>
		x += w + fnt->space;	//add 1 bit space after
 8002c4c:	7efb      	ldrb	r3, [r7, #27]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	7b1b      	ldrb	r3, [r3, #12]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	89fb      	ldrh	r3, [r7, #14]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	81fb      	strh	r3, [r7, #14]
		str++;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	3301      	adds	r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8002c66:	e7c0      	b.n	8002bea <_Z15DISP_DrawStringttPKchh+0x9e>
				break;
 8002c68:	bf00      	nop

	}
}
 8002c6a:	bf00      	nop
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000f3c 	.word	0x20000f3c
 8002c78:	20000f38 	.word	0x20000f38
 8002c7c:	20000f40 	.word	0x20000f40

08002c80 <_Z12DISP_Refreshv>:
		DISP_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, style);
	}
}

void DISP_Refresh(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	DISP_WriteData(scr_buff, SCREEN_BYTES);
 8002c84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <_Z12DISP_Refreshv+0x14>)
 8002c8a:	f7ff fd4f 	bl	800272c <_Z14DISP_WriteDataPhj>
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000f44 	.word	0x20000f44

08002c98 <_Z41__static_initialization_and_destruction_0ii>:
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af04      	add	r7, sp, #16
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d143      	bne.n	8002d30 <_Z41__static_initialization_and_destruction_0ii+0x98>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d13e      	bne.n	8002d30 <_Z41__static_initialization_and_destruction_0ii+0x98>
	    0x30, 0x30, 0xC0, 0xC0 // 58
    
};
static uint8_t Arial16_wd[] = {6, 2, 6, 10, 6, 10, 10, 10, 10, 10, 10, 10, 10, 2};

Font *FontMedium = new Font(8, 16, '-', 14, (uint8_t *)Arial16_wd, (uint8_t *)Arial16, 1);
 8002cb2:	2014      	movs	r0, #20
 8002cb4:	f006 f9f2 	bl	800909c <_Znwj>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461c      	mov	r4, r3
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	9303      	str	r3, [sp, #12]
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002cc2:	9302      	str	r3, [sp, #8]
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	230e      	movs	r3, #14
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	232d      	movs	r3, #45	; 0x2d
 8002cce:	2210      	movs	r2, #16
 8002cd0:	2108      	movs	r1, #8
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f000 f848 	bl	8002d68 <_ZN4FontC1EhhhhPhS0_h>
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8002cda:	601c      	str	r4, [r3, #0]
	0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
	0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
    
};

Font *FontSmall = new Font(5, 7, ' ', 96, 0, (uint8_t *)System5x7, 1);
 8002cdc:	2014      	movs	r0, #20
 8002cde:	f006 f9dd 	bl	800909c <_Znwj>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461c      	mov	r4, r3
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	9303      	str	r3, [sp, #12]
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002cec:	9302      	str	r3, [sp, #8]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	2360      	movs	r3, #96	; 0x60
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	2105      	movs	r1, #5
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f000 f833 	bl	8002d68 <_ZN4FontC1EhhhhPhS0_h>
 8002d02:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002d04:	601c      	str	r4, [r3, #0]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC,  // 58 ':' 24
    
};
static uint8_t Arial32_wd[] = {13, 6, 12, 20, 14, 20, 20, 22, 21, 20, 20, 20, 20, 6};

Font *FontBig = new Font(20, 32, '-', 14, (uint8_t *)Arial32_wd, (uint8_t *)Arial32, 2);
 8002d06:	2014      	movs	r0, #20
 8002d08:	f006 f9c8 	bl	800909c <_Znwj>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461c      	mov	r4, r3
 8002d10:	2302      	movs	r3, #2
 8002d12:	9303      	str	r3, [sp, #12]
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002d16:	9302      	str	r3, [sp, #8]
 8002d18:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	230e      	movs	r3, #14
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	232d      	movs	r3, #45	; 0x2d
 8002d22:	2220      	movs	r2, #32
 8002d24:	2114      	movs	r1, #20
 8002d26:	4620      	mov	r0, r4
 8002d28:	f000 f81e 	bl	8002d68 <_ZN4FontC1EhhhhPhS0_h>
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002d2e:	601c      	str	r4, [r3, #0]
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd90      	pop	{r4, r7, pc}
 8002d38:	2000001c 	.word	0x2000001c
 8002d3c:	200000fc 	.word	0x200000fc
 8002d40:	20000f38 	.word	0x20000f38
 8002d44:	2000010c 	.word	0x2000010c
 8002d48:	20000f3c 	.word	0x20000f3c
 8002d4c:	200002ec 	.word	0x200002ec
 8002d50:	20000694 	.word	0x20000694
 8002d54:	20000f40 	.word	0x20000f40

08002d58 <_GLOBAL__sub_I_FontMedium>:
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d60:	2001      	movs	r0, #1
 8002d62:	f7ff ff99 	bl	8002c98 <_Z41__static_initialization_and_destruction_0ii>
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_ZN4FontC1EhhhhPhS0_h>:
    widths = 0;
    data = 0;
    space = 0;
}

Font::Font(uint8_t w, uint8_t h, uint8_t fc, uint8_t cn, uint8_t *wds, uint8_t *dt, uint8_t sp)
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	4608      	mov	r0, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	461a      	mov	r2, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	70fb      	strb	r3, [r7, #3]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	70bb      	strb	r3, [r7, #2]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	707b      	strb	r3, [r7, #1]
{
	width = w;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	701a      	strb	r2, [r3, #0]
	height = h;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	78ba      	ldrb	r2, [r7, #2]
 8002d8c:	705a      	strb	r2, [r3, #1]
    first_char = fc;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	787a      	ldrb	r2, [r7, #1]
 8002d92:	709a      	strb	r2, [r3, #2]
    count = cn;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7c3a      	ldrb	r2, [r7, #16]
 8002d98:	70da      	strb	r2, [r3, #3]
    widths = wds;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	605a      	str	r2, [r3, #4]
    data = dt;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	609a      	str	r2, [r3, #8]
    space = sp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7f3a      	ldrb	r2, [r7, #28]
 8002daa:	731a      	strb	r2, [r3, #12]
}
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <_ZN4Font8getWidthEh>:
{
	return this->width;
}

uint8_t Font::getWidth(uint8_t ch)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
	uint8_t w;

	if (this->widths != 0)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01a      	beq.n	8002e02 <_ZN4Font8getWidthEh+0x4a>
	{
		if (ch < this->first_char || ch > (this->first_char + this->count)) {
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	789b      	ldrb	r3, [r3, #2]
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d308      	bcc.n	8002de8 <_ZN4Font8getWidthEh+0x30>
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	789b      	ldrb	r3, [r3, #2]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	78db      	ldrb	r3, [r3, #3]
 8002de2:	440b      	add	r3, r1
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dd01      	ble.n	8002dec <_ZN4Font8getWidthEh+0x34>
			ch = '4';	//bytes for a widest char
 8002de8:	2334      	movs	r3, #52	; 0x34
 8002dea:	70fb      	strb	r3, [r7, #3]
		}

		w = this->widths[ch - this->first_char];
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	7889      	ldrb	r1, [r1, #2]
 8002df6:	1a52      	subs	r2, r2, r1
 8002df8:	4413      	add	r3, r2
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	73fb      	strb	r3, [r7, #15]
		return w;
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	e001      	b.n	8002e06 <_ZN4Font8getWidthEh+0x4e>
	}
	else return this->width;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	781b      	ldrb	r3, [r3, #0]

}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <_ZN4Font11getCharDataEh>:

	return dt;
}

uint8_t Font::getCharData(uint8_t idx)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
	uint8_t dt;

	if (idx > this->curr_char_bytes) return 0;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7c1b      	ldrb	r3, [r3, #16]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d901      	bls.n	8002e2a <_ZN4Font11getCharDataEh+0x1a>
 8002e26:	2300      	movs	r3, #0
 8002e28:	e00a      	b.n	8002e40 <_ZN4Font11getCharDataEh+0x30>
	else dt = this->data[curr_char_ptr + idx];
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	89d2      	ldrh	r2, [r2, #14]
 8002e32:	4611      	mov	r1, r2
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	440a      	add	r2, r1
 8002e38:	4413      	add	r3, r2
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	73fb      	strb	r3, [r7, #15]

	return dt;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <_ZN4Font12getCharBytesEh>:

uint8_t Font::getCharBytes(uint8_t ch)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	460b      	mov	r3, r1
 8002e54:	70fb      	strb	r3, [r7, #3]
	uint8_t w, char_bytes;

	if (this->widths != 0)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <_ZN4Font12getCharBytesEh+0x28>
	{
		w = this->widths[ch - this->first_char];
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	7889      	ldrb	r1, [r1, #2]
 8002e68:	1a52      	subs	r2, r2, r1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	73fb      	strb	r3, [r7, #15]
 8002e70:	e002      	b.n	8002e78 <_ZN4Font12getCharBytesEh+0x2e>
	}
	else w = this->width;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	73fb      	strb	r3, [r7, #15]

	char_bytes = w*(this->height/8);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	08db      	lsrs	r3, r3, #3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	73bb      	strb	r3, [r7, #14]
	if (this->height%8 >0) char_bytes += w;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	dd03      	ble.n	8002e9c <_ZN4Font12getCharBytesEh+0x52>
 8002e94:	7bba      	ldrb	r2, [r7, #14]
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	4413      	add	r3, r2
 8002e9a:	73bb      	strb	r3, [r7, #14]


	return char_bytes;
 8002e9c:	7bbb      	ldrb	r3, [r7, #14]

}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <_ZN4Font7setCharEh>:

uint8_t Font::setChar(uint8_t ch)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]
	uint8_t w, curr_char, char_bytes;

	curr_char  = ch - this->first_char;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	789b      	ldrb	r3, [r3, #2]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	737b      	strb	r3, [r7, #13]
	this->curr_char_ptr = 0;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	81da      	strh	r2, [r3, #14]

	if (this->widths != 0)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d029      	beq.n	8002f20 <_ZN4Font7setCharEh+0x78>
	{
		for (uint8_t i=0;i<curr_char; i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73bb      	strb	r3, [r7, #14]
 8002ed0:	7bba      	ldrb	r2, [r7, #14]
 8002ed2:	7b7b      	ldrb	r3, [r7, #13]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d233      	bcs.n	8002f40 <_ZN4Font7setCharEh+0x98>
		{
			w = this->widths[i];
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	7bbb      	ldrb	r3, [r7, #14]
 8002ede:	4413      	add	r3, r2
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	733b      	strb	r3, [r7, #12]

			char_bytes = w*(this->height/8);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	785b      	ldrb	r3, [r3, #1]
 8002ee8:	08db      	lsrs	r3, r3, #3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	7b3a      	ldrb	r2, [r7, #12]
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	73fb      	strb	r3, [r7, #15]
			if (this->height%8 >0) char_bytes += w;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	785b      	ldrb	r3, [r3, #1]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	dd03      	ble.n	8002f08 <_ZN4Font7setCharEh+0x60>
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	7b3b      	ldrb	r3, [r7, #12]
 8002f04:	4413      	add	r3, r2
 8002f06:	73fb      	strb	r3, [r7, #15]

			this->curr_char_ptr += char_bytes;	//sum of all widths before
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	89da      	ldrh	r2, [r3, #14]
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	81da      	strh	r2, [r3, #14]
		for (uint8_t i=0;i<curr_char; i++)
 8002f18:	7bbb      	ldrb	r3, [r7, #14]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	73bb      	strb	r3, [r7, #14]
 8002f1e:	e7d7      	b.n	8002ed0 <_ZN4Font7setCharEh+0x28>
		}
	}
	else
		{
			char_bytes = this->getCharBytes(curr_char);
 8002f20:	7b7b      	ldrb	r3, [r7, #13]
 8002f22:	4619      	mov	r1, r3
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff90 	bl	8002e4a <_ZN4Font12getCharBytesEh>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	73fb      	strb	r3, [r7, #15]

			this->curr_char_ptr = curr_char * char_bytes;
 8002f2e:	7b7b      	ldrb	r3, [r7, #13]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	b292      	uxth	r2, r2
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	81da      	strh	r2, [r3, #14]
		}
	char_bytes = this->curr_char_bytes = this->getCharBytes(ch);
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	4619      	mov	r1, r3
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff80 	bl	8002e4a <_ZN4Font12getCharBytesEh>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	741a      	strb	r2, [r3, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7c1b      	ldrb	r3, [r3, #16]
 8002f56:	73fb      	strb	r3, [r7, #15]

	return char_bytes;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <HAL_Init+0x28>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a07      	ldr	r2, [pc, #28]	; (8002f8c <HAL_Init+0x28>)
 8002f6e:	f043 0310 	orr.w	r3, r3, #16
 8002f72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f74:	2003      	movs	r0, #3
 8002f76:	f000 ff5d 	bl	8003e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7ff f986 	bl	800228c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f80:	f7fe ffd8 	bl	8001f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40022000 	.word	0x40022000

08002f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_IncTick+0x1c>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_IncTick+0x20>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <HAL_IncTick+0x20>)
 8002fa2:	6013      	str	r3, [r2, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	200006a8 	.word	0x200006a8
 8002fb0:	200020f0 	.word	0x200020f0

08002fb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb8:	4b02      	ldr	r3, [pc, #8]	; (8002fc4 <HAL_GetTick+0x10>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	200020f0 	.word	0x200020f0

08002fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff fff0 	bl	8002fb4 <HAL_GetTick>
 8002fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe0:	d005      	beq.n	8002fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_Delay+0x44>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fee:	bf00      	nop
 8002ff0:	f7ff ffe0 	bl	8002fb4 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d8f7      	bhi.n	8002ff0 <HAL_Delay+0x28>
  {
  }
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200006a8 	.word	0x200006a8

08003010 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0ed      	b.n	80031fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fe ffb8 	bl	8001fa4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003044:	f7ff ffb6 	bl	8002fb4 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800304a:	e012      	b.n	8003072 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800304c:	f7ff ffb2 	bl	8002fb4 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b0a      	cmp	r3, #10
 8003058:	d90b      	bls.n	8003072 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2205      	movs	r2, #5
 800306a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0c5      	b.n	80031fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0e5      	beq.n	800304c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0202 	bic.w	r2, r2, #2
 800308e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003090:	f7ff ff90 	bl	8002fb4 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003096:	e012      	b.n	80030be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003098:	f7ff ff8c 	bl	8002fb4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b0a      	cmp	r3, #10
 80030a4:	d90b      	bls.n	80030be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2205      	movs	r2, #5
 80030b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e09f      	b.n	80031fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e5      	bne.n	8003098 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7e1b      	ldrb	r3, [r3, #24]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d108      	bne.n	80030e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	e007      	b.n	80030f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	7e5b      	ldrb	r3, [r3, #25]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d108      	bne.n	8003110 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	e007      	b.n	8003120 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800311e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7e9b      	ldrb	r3, [r3, #26]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d108      	bne.n	800313a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0220 	orr.w	r2, r2, #32
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	e007      	b.n	800314a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0220 	bic.w	r2, r2, #32
 8003148:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	7edb      	ldrb	r3, [r3, #27]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d108      	bne.n	8003164 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0210 	bic.w	r2, r2, #16
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e007      	b.n	8003174 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0210 	orr.w	r2, r2, #16
 8003172:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7f1b      	ldrb	r3, [r3, #28]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d108      	bne.n	800318e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0208 	orr.w	r2, r2, #8
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e007      	b.n	800319e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0208 	bic.w	r2, r2, #8
 800319c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7f5b      	ldrb	r3, [r3, #29]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d108      	bne.n	80031b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0204 	orr.w	r2, r2, #4
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e007      	b.n	80031c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0204 	bic.w	r2, r2, #4
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	ea42 0103 	orr.w	r1, r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	1e5a      	subs	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003206:	b480      	push	{r7}
 8003208:	b087      	sub	sp, #28
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800321c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800321e:	7cfb      	ldrb	r3, [r7, #19]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d003      	beq.n	800322c <HAL_CAN_ConfigFilter+0x26>
 8003224:	7cfb      	ldrb	r3, [r7, #19]
 8003226:	2b02      	cmp	r3, #2
 8003228:	f040 80aa 	bne.w	8003380 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	2201      	movs	r2, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	43db      	mvns	r3, r3
 8003256:	401a      	ands	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d123      	bne.n	80032ae <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	43db      	mvns	r3, r3
 8003270:	401a      	ands	r2, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003288:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3248      	adds	r2, #72	; 0x48
 800328e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032a4:	6979      	ldr	r1, [r7, #20]
 80032a6:	3348      	adds	r3, #72	; 0x48
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	440b      	add	r3, r1
 80032ac:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d122      	bne.n	80032fc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	431a      	orrs	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3248      	adds	r2, #72	; 0x48
 80032dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032f2:	6979      	ldr	r1, [r7, #20]
 80032f4:	3348      	adds	r3, #72	; 0x48
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d109      	bne.n	8003318 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	43db      	mvns	r3, r3
 800330e:	401a      	ands	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003316:	e007      	b.n	8003328 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	431a      	orrs	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003342:	e007      	b.n	8003354 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	431a      	orrs	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	431a      	orrs	r2, r3
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003372:	f023 0201 	bic.w	r2, r3, #1
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e006      	b.n	800338e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d12e      	bne.n	800340a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033c4:	f7ff fdf6 	bl	8002fb4 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033ca:	e012      	b.n	80033f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033cc:	f7ff fdf2 	bl	8002fb4 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b0a      	cmp	r3, #10
 80033d8:	d90b      	bls.n	80033f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2205      	movs	r2, #5
 80033ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e012      	b.n	8003418 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e5      	bne.n	80033cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e006      	b.n	8003418 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
  }
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003434:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800343e:	7ffb      	ldrb	r3, [r7, #31]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d003      	beq.n	800344c <HAL_CAN_AddTxMessage+0x2c>
 8003444:	7ffb      	ldrb	r3, [r7, #31]
 8003446:	2b02      	cmp	r3, #2
 8003448:	f040 80b8 	bne.w	80035bc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80a0 	beq.w	80035ac <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d907      	bls.n	800348c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e09e      	b.n	80035ca <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800348c:	2201      	movs	r2, #1
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	409a      	lsls	r2, r3
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10d      	bne.n	80034ba <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	6809      	ldr	r1, [r1, #0]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	3318      	adds	r3, #24
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	440b      	add	r3, r1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e00f      	b.n	80034da <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034c4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034ca:	68f9      	ldr	r1, [r7, #12]
 80034cc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80034ce:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3318      	adds	r3, #24
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	440b      	add	r3, r1
 80034d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6819      	ldr	r1, [r3, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	3318      	adds	r3, #24
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	440b      	add	r3, r1
 80034ea:	3304      	adds	r3, #4
 80034ec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	7d1b      	ldrb	r3, [r3, #20]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d111      	bne.n	800351a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	3318      	adds	r3, #24
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	4413      	add	r3, r2
 8003502:	3304      	adds	r3, #4
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	6811      	ldr	r1, [r2, #0]
 800350a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3318      	adds	r3, #24
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	440b      	add	r3, r1
 8003516:	3304      	adds	r3, #4
 8003518:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3307      	adds	r3, #7
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	061a      	lsls	r2, r3, #24
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3306      	adds	r3, #6
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	041b      	lsls	r3, r3, #16
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3305      	adds	r3, #5
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	4313      	orrs	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	3204      	adds	r2, #4
 800353a:	7812      	ldrb	r2, [r2, #0]
 800353c:	4610      	mov	r0, r2
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	6811      	ldr	r1, [r2, #0]
 8003542:	ea43 0200 	orr.w	r2, r3, r0
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	440b      	add	r3, r1
 800354c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003550:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3303      	adds	r3, #3
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	061a      	lsls	r2, r3, #24
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3302      	adds	r3, #2
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3301      	adds	r3, #1
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	4313      	orrs	r3, r2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	7812      	ldrb	r2, [r2, #0]
 8003572:	4610      	mov	r0, r2
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	6811      	ldr	r1, [r2, #0]
 8003578:	ea43 0200 	orr.w	r2, r3, r0
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	440b      	add	r3, r1
 8003582:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003586:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	3318      	adds	r3, #24
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	4413      	add	r3, r2
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	6811      	ldr	r1, [r2, #0]
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3318      	adds	r3, #24
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	440b      	add	r3, r1
 80035a6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e00e      	b.n	80035ca <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e006      	b.n	80035ca <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
  }
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3724      	adds	r7, #36	; 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d003      	beq.n	80035f8 <HAL_CAN_GetRxMessage+0x24>
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	f040 80f3 	bne.w	80037de <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10e      	bne.n	800361c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d116      	bne.n	800363a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0e7      	b.n	80037ec <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d107      	bne.n	800363a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e0d8      	b.n	80037ec <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	331b      	adds	r3, #27
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	4413      	add	r3, r2
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0204 	and.w	r2, r3, #4
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10c      	bne.n	8003672 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	331b      	adds	r3, #27
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	4413      	add	r3, r2
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	0d5b      	lsrs	r3, r3, #21
 8003668:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e00b      	b.n	800368a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	331b      	adds	r3, #27
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	4413      	add	r3, r2
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	08db      	lsrs	r3, r3, #3
 8003682:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	331b      	adds	r3, #27
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	4413      	add	r3, r2
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0202 	and.w	r2, r3, #2
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	331b      	adds	r3, #27
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	4413      	add	r3, r2
 80036ac:	3304      	adds	r3, #4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 020f 	and.w	r2, r3, #15
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	331b      	adds	r3, #27
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	4413      	add	r3, r2
 80036c4:	3304      	adds	r3, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0a1b      	lsrs	r3, r3, #8
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	331b      	adds	r3, #27
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	4413      	add	r3, r2
 80036dc:	3304      	adds	r3, #4
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	0c1b      	lsrs	r3, r3, #16
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	4413      	add	r3, r2
 8003708:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	0a1a      	lsrs	r2, r3, #8
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	3301      	adds	r3, #1
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	4413      	add	r3, r2
 8003722:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0c1a      	lsrs	r2, r3, #16
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	3302      	adds	r3, #2
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	4413      	add	r3, r2
 800373c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	0e1a      	lsrs	r2, r3, #24
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	3303      	adds	r3, #3
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	4413      	add	r3, r2
 8003756:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	3304      	adds	r3, #4
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	4413      	add	r3, r2
 800376e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0a1a      	lsrs	r2, r3, #8
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	3305      	adds	r3, #5
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	4413      	add	r3, r2
 8003788:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	0c1a      	lsrs	r2, r3, #16
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	3306      	adds	r3, #6
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0e1a      	lsrs	r2, r3, #24
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	3307      	adds	r3, #7
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d108      	bne.n	80037ca <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0220 	orr.w	r2, r2, #32
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	e007      	b.n	80037da <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0220 	orr.w	r2, r2, #32
 80037d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e006      	b.n	80037ec <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003806:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d002      	beq.n	8003814 <HAL_CAN_ActivateNotification+0x1e>
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d109      	bne.n	8003828 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6959      	ldr	r1, [r3, #20]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	e006      	b.n	8003836 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003848:	2300      	movs	r3, #0
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d07c      	beq.n	8003980 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d023      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f983 	bl	8003bae <HAL_CAN_TxMailbox0CompleteCallback>
 80038a8:	e016      	b.n	80038d8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d004      	beq.n	80038be <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
 80038bc:	e00c      	b.n	80038d8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	e002      	b.n	80038d8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f986 	bl	8003be4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d024      	beq.n	800392c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f962 	bl	8003bc0 <HAL_CAN_TxMailbox1CompleteCallback>
 80038fc:	e016      	b.n	800392c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	2b00      	cmp	r3, #0
 8003906:	d004      	beq.n	8003912 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
 8003910:	e00c      	b.n	800392c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
 8003924:	e002      	b.n	800392c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f965 	bl	8003bf6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d024      	beq.n	8003980 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800393e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f941 	bl	8003bd2 <HAL_CAN_TxMailbox2CompleteCallback>
 8003950:	e016      	b.n	8003980 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
 8003964:	e00c      	b.n	8003980 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d004      	beq.n	800397a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
 8003978:	e002      	b.n	8003980 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f944 	bl	8003c08 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00c      	beq.n	80039a4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800399a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2210      	movs	r2, #16
 80039a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d006      	beq.n	80039c6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2208      	movs	r2, #8
 80039be:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f933 	bl	8003c2c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f91b 	bl	8003c1a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00c      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2210      	movs	r2, #16
 8003a06:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d006      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2208      	movs	r2, #8
 8003a22:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f913 	bl	8003c50 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d009      	beq.n	8003a48 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f8fb 	bl	8003c3e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d006      	beq.n	8003a6a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2210      	movs	r2, #16
 8003a62:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f8fc 	bl	8003c62 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00b      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d006      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2208      	movs	r2, #8
 8003a84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8f4 	bl	8003c74 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d07b      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d072      	beq.n	8003b86 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	f043 0304 	orr.w	r3, r3, #4
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d043      	beq.n	8003b86 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d03e      	beq.n	8003b86 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b0e:	2b60      	cmp	r3, #96	; 0x60
 8003b10:	d02b      	beq.n	8003b6a <HAL_CAN_IRQHandler+0x32a>
 8003b12:	2b60      	cmp	r3, #96	; 0x60
 8003b14:	d82e      	bhi.n	8003b74 <HAL_CAN_IRQHandler+0x334>
 8003b16:	2b50      	cmp	r3, #80	; 0x50
 8003b18:	d022      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x320>
 8003b1a:	2b50      	cmp	r3, #80	; 0x50
 8003b1c:	d82a      	bhi.n	8003b74 <HAL_CAN_IRQHandler+0x334>
 8003b1e:	2b40      	cmp	r3, #64	; 0x40
 8003b20:	d019      	beq.n	8003b56 <HAL_CAN_IRQHandler+0x316>
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d826      	bhi.n	8003b74 <HAL_CAN_IRQHandler+0x334>
 8003b26:	2b30      	cmp	r3, #48	; 0x30
 8003b28:	d010      	beq.n	8003b4c <HAL_CAN_IRQHandler+0x30c>
 8003b2a:	2b30      	cmp	r3, #48	; 0x30
 8003b2c:	d822      	bhi.n	8003b74 <HAL_CAN_IRQHandler+0x334>
 8003b2e:	2b10      	cmp	r3, #16
 8003b30:	d002      	beq.n	8003b38 <HAL_CAN_IRQHandler+0x2f8>
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d005      	beq.n	8003b42 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b36:	e01d      	b.n	8003b74 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	f043 0308 	orr.w	r3, r3, #8
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b40:	e019      	b.n	8003b76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	f043 0310 	orr.w	r3, r3, #16
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b4a:	e014      	b.n	8003b76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	f043 0320 	orr.w	r3, r3, #32
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b54:	e00f      	b.n	8003b76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b5e:	e00a      	b.n	8003b76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b68:	e005      	b.n	8003b76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b72:	e000      	b.n	8003b76 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b74:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b84:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f870 	bl	8003c86 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	3728      	adds	r7, #40	; 0x28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr

08003c3e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cca:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	60d3      	str	r3, [r2, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f003 0307 	and.w	r3, r3, #7
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	db0b      	blt.n	8003d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	4906      	ldr	r1, [pc, #24]	; (8003d30 <__NVIC_EnableIRQ+0x34>)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	e000e100 	.word	0xe000e100

08003d34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	db12      	blt.n	8003d6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	f003 021f 	and.w	r2, r3, #31
 8003d4c:	490a      	ldr	r1, [pc, #40]	; (8003d78 <__NVIC_DisableIRQ+0x44>)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2001      	movs	r0, #1
 8003d56:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5a:	3320      	adds	r3, #32
 8003d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d60:	f3bf 8f4f 	dsb	sy
}
 8003d64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d66:	f3bf 8f6f 	isb	sy
}
 8003d6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	e000e100 	.word	0xe000e100

08003d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	6039      	str	r1, [r7, #0]
 8003d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	db0a      	blt.n	8003da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	490c      	ldr	r1, [pc, #48]	; (8003dc8 <__NVIC_SetPriority+0x4c>)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	0112      	lsls	r2, r2, #4
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	440b      	add	r3, r1
 8003da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003da4:	e00a      	b.n	8003dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4908      	ldr	r1, [pc, #32]	; (8003dcc <__NVIC_SetPriority+0x50>)
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	3b04      	subs	r3, #4
 8003db4:	0112      	lsls	r2, r2, #4
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	440b      	add	r3, r1
 8003dba:	761a      	strb	r2, [r3, #24]
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000e100 	.word	0xe000e100
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b089      	sub	sp, #36	; 0x24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f1c3 0307 	rsb	r3, r3, #7
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	bf28      	it	cs
 8003dee:	2304      	movcs	r3, #4
 8003df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	3304      	adds	r3, #4
 8003df6:	2b06      	cmp	r3, #6
 8003df8:	d902      	bls.n	8003e00 <NVIC_EncodePriority+0x30>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3b03      	subs	r3, #3
 8003dfe:	e000      	b.n	8003e02 <NVIC_EncodePriority+0x32>
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43da      	mvns	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	401a      	ands	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	43d9      	mvns	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e28:	4313      	orrs	r3, r2
         );
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3724      	adds	r7, #36	; 0x24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff2b 	bl	8003c98 <__NVIC_SetPriorityGrouping>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b086      	sub	sp, #24
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	4603      	mov	r3, r0
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e5c:	f7ff ff40 	bl	8003ce0 <__NVIC_GetPriorityGrouping>
 8003e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	6978      	ldr	r0, [r7, #20]
 8003e68:	f7ff ffb2 	bl	8003dd0 <NVIC_EncodePriority>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff81 	bl	8003d7c <__NVIC_SetPriority>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff33 	bl	8003cfc <__NVIC_EnableIRQ>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff41 	bl	8003d34 <__NVIC_DisableIRQ>
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d008      	beq.n	8003ee2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e020      	b.n	8003f24 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 020e 	bic.w	r2, r2, #14
 8003ef0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d005      	beq.n	8003f52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
 8003f50:	e051      	b.n	8003ff6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 020e 	bic.w	r2, r2, #14
 8003f60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a22      	ldr	r2, [pc, #136]	; (8004000 <HAL_DMA_Abort_IT+0xd0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d029      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0xa0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a20      	ldr	r2, [pc, #128]	; (8004004 <HAL_DMA_Abort_IT+0xd4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d022      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x9c>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1f      	ldr	r2, [pc, #124]	; (8004008 <HAL_DMA_Abort_IT+0xd8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d01a      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x96>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1d      	ldr	r2, [pc, #116]	; (800400c <HAL_DMA_Abort_IT+0xdc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d012      	beq.n	8003fc0 <HAL_DMA_Abort_IT+0x90>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <HAL_DMA_Abort_IT+0xe0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00a      	beq.n	8003fba <HAL_DMA_Abort_IT+0x8a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1a      	ldr	r2, [pc, #104]	; (8004014 <HAL_DMA_Abort_IT+0xe4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d102      	bne.n	8003fb4 <HAL_DMA_Abort_IT+0x84>
 8003fae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003fb2:	e00e      	b.n	8003fd2 <HAL_DMA_Abort_IT+0xa2>
 8003fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fb8:	e00b      	b.n	8003fd2 <HAL_DMA_Abort_IT+0xa2>
 8003fba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fbe:	e008      	b.n	8003fd2 <HAL_DMA_Abort_IT+0xa2>
 8003fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fc4:	e005      	b.n	8003fd2 <HAL_DMA_Abort_IT+0xa2>
 8003fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fca:	e002      	b.n	8003fd2 <HAL_DMA_Abort_IT+0xa2>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	e000      	b.n	8003fd2 <HAL_DMA_Abort_IT+0xa2>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4a11      	ldr	r2, [pc, #68]	; (8004018 <HAL_DMA_Abort_IT+0xe8>)
 8003fd4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
    } 
  }
  return status;
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40020008 	.word	0x40020008
 8004004:	4002001c 	.word	0x4002001c
 8004008:	40020030 	.word	0x40020030
 800400c:	40020044 	.word	0x40020044
 8004010:	40020058 	.word	0x40020058
 8004014:	4002006c 	.word	0x4002006c
 8004018:	40020000 	.word	0x40020000

0800401c <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_EXTI_SetConfigLine+0x16>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e08f      	b.n	8004156 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8004048:	2201      	movs	r2, #1
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d052      	beq.n	8004104 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d006      	beq.n	8004078 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 800406a:	4b3d      	ldr	r3, [pc, #244]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	493c      	ldr	r1, [pc, #240]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
 8004076:	e006      	b.n	8004086 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8004078:	4b39      	ldr	r3, [pc, #228]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	43db      	mvns	r3, r3
 8004080:	4937      	ldr	r1, [pc, #220]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 8004082:	4013      	ands	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d006      	beq.n	80040a0 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 8004092:	4b33      	ldr	r3, [pc, #204]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	4932      	ldr	r1, [pc, #200]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	60cb      	str	r3, [r1, #12]
 800409e:	e006      	b.n	80040ae <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 80040a0:	4b2f      	ldr	r3, [pc, #188]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	492d      	ldr	r1, [pc, #180]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80040b6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80040ba:	d123      	bne.n	8004104 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));
      
      regval = AFIO->EXTICR[linepos >> 2u];
 80040bc:	4a29      	ldr	r2, [pc, #164]	; (8004164 <HAL_EXTI_SetConfigLine+0x148>)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	3302      	adds	r3, #2
 80040c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c8:	60fb      	str	r3, [r7, #12]
      regval &= ~(AFIO_EXTICR1_EXTI0 << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	220f      	movs	r2, #15
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4013      	ands	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
      AFIO->EXTICR[linepos >> 2u] = regval;
 80040f6:	491b      	ldr	r1, [pc, #108]	; (8004164 <HAL_EXTI_SetConfigLine+0x148>)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	3302      	adds	r3, #2
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d006      	beq.n	800411e <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 8004110:	4b13      	ldr	r3, [pc, #76]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4912      	ldr	r1, [pc, #72]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]
 800411c:	e006      	b.n	800412c <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 800411e:	4b10      	ldr	r3, [pc, #64]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	43db      	mvns	r3, r3
 8004126:	490e      	ldr	r1, [pc, #56]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 8004128:	4013      	ands	r3, r2
 800412a:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d006      	beq.n	8004146 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	4908      	ldr	r1, [pc, #32]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
 8004144:	e006      	b.n	8004154 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	43db      	mvns	r3, r3
 800414e:	4904      	ldr	r1, [pc, #16]	; (8004160 <HAL_EXTI_SetConfigLine+0x144>)
 8004150:	4013      	ands	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr
 8004160:	40010400 	.word	0x40010400
 8004164:	40010000 	.word	0x40010000

08004168 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_EXTI_GetConfigLine+0x16>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e061      	b.n	8004246 <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8004194:	2201      	movs	r2, #1
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 800419e:	4b2c      	ldr	r3, [pc, #176]	; (8004250 <HAL_EXTI_GetConfigLine+0xe8>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2201      	movs	r2, #1
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	e002      	b.n	80041b8 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2200      	movs	r2, #0
 80041b6:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 80041b8:	4b25      	ldr	r3, [pc, #148]	; (8004250 <HAL_EXTI_GetConfigLine+0xe8>)
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f043 0202 	orr.w	r2, r3, #2
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2200      	movs	r2, #0
 80041d4:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2200      	movs	r2, #0
 80041da:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02d      	beq.n	8004244 <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_EXTI_GetConfigLine+0xe8>)
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2201      	movs	r2, #1
 80041f8:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <HAL_EXTI_GetConfigLine+0xe8>)
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f043 0202 	orr.w	r2, r3, #2
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800421a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800421e:	d111      	bne.n	8004244 <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = AFIO->EXTICR[linepos >> 2u];
 8004220:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <HAL_EXTI_GetConfigLine+0xec>)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	3302      	adds	r3, #2
 8004228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422c:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (AFIO_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	43db      	mvns	r3, r3
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	0e1a      	lsrs	r2, r3, #24
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	40010400 	.word	0x40010400
 8004254:	40010000 	.word	0x40010000

08004258 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e003      	b.n	8004274 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004272:	2300      	movs	r3, #0
  }
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr
	...

08004280 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument compilation warning */
  UNUSED(Edge);

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	2201      	movs	r2, #1
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800429a:	4a04      	ldr	r2, [pc, #16]	; (80042ac <HAL_EXTI_ClearPending+0x2c>)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6153      	str	r3, [r2, #20]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40010400 	.word	0x40010400

080042b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b08b      	sub	sp, #44	; 0x2c
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042be:	2300      	movs	r3, #0
 80042c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042c2:	e169      	b.n	8004598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042c4:	2201      	movs	r2, #1
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	429a      	cmp	r2, r3
 80042de:	f040 8158 	bne.w	8004592 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4a9a      	ldr	r2, [pc, #616]	; (8004550 <HAL_GPIO_Init+0x2a0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d05e      	beq.n	80043aa <HAL_GPIO_Init+0xfa>
 80042ec:	4a98      	ldr	r2, [pc, #608]	; (8004550 <HAL_GPIO_Init+0x2a0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d875      	bhi.n	80043de <HAL_GPIO_Init+0x12e>
 80042f2:	4a98      	ldr	r2, [pc, #608]	; (8004554 <HAL_GPIO_Init+0x2a4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d058      	beq.n	80043aa <HAL_GPIO_Init+0xfa>
 80042f8:	4a96      	ldr	r2, [pc, #600]	; (8004554 <HAL_GPIO_Init+0x2a4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d86f      	bhi.n	80043de <HAL_GPIO_Init+0x12e>
 80042fe:	4a96      	ldr	r2, [pc, #600]	; (8004558 <HAL_GPIO_Init+0x2a8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d052      	beq.n	80043aa <HAL_GPIO_Init+0xfa>
 8004304:	4a94      	ldr	r2, [pc, #592]	; (8004558 <HAL_GPIO_Init+0x2a8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d869      	bhi.n	80043de <HAL_GPIO_Init+0x12e>
 800430a:	4a94      	ldr	r2, [pc, #592]	; (800455c <HAL_GPIO_Init+0x2ac>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d04c      	beq.n	80043aa <HAL_GPIO_Init+0xfa>
 8004310:	4a92      	ldr	r2, [pc, #584]	; (800455c <HAL_GPIO_Init+0x2ac>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d863      	bhi.n	80043de <HAL_GPIO_Init+0x12e>
 8004316:	4a92      	ldr	r2, [pc, #584]	; (8004560 <HAL_GPIO_Init+0x2b0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d046      	beq.n	80043aa <HAL_GPIO_Init+0xfa>
 800431c:	4a90      	ldr	r2, [pc, #576]	; (8004560 <HAL_GPIO_Init+0x2b0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d85d      	bhi.n	80043de <HAL_GPIO_Init+0x12e>
 8004322:	2b12      	cmp	r3, #18
 8004324:	d82a      	bhi.n	800437c <HAL_GPIO_Init+0xcc>
 8004326:	2b12      	cmp	r3, #18
 8004328:	d859      	bhi.n	80043de <HAL_GPIO_Init+0x12e>
 800432a:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <HAL_GPIO_Init+0x80>)
 800432c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004330:	080043ab 	.word	0x080043ab
 8004334:	08004385 	.word	0x08004385
 8004338:	08004397 	.word	0x08004397
 800433c:	080043d9 	.word	0x080043d9
 8004340:	080043df 	.word	0x080043df
 8004344:	080043df 	.word	0x080043df
 8004348:	080043df 	.word	0x080043df
 800434c:	080043df 	.word	0x080043df
 8004350:	080043df 	.word	0x080043df
 8004354:	080043df 	.word	0x080043df
 8004358:	080043df 	.word	0x080043df
 800435c:	080043df 	.word	0x080043df
 8004360:	080043df 	.word	0x080043df
 8004364:	080043df 	.word	0x080043df
 8004368:	080043df 	.word	0x080043df
 800436c:	080043df 	.word	0x080043df
 8004370:	080043df 	.word	0x080043df
 8004374:	0800438d 	.word	0x0800438d
 8004378:	080043a1 	.word	0x080043a1
 800437c:	4a79      	ldr	r2, [pc, #484]	; (8004564 <HAL_GPIO_Init+0x2b4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004382:	e02c      	b.n	80043de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	623b      	str	r3, [r7, #32]
          break;
 800438a:	e029      	b.n	80043e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	3304      	adds	r3, #4
 8004392:	623b      	str	r3, [r7, #32]
          break;
 8004394:	e024      	b.n	80043e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	3308      	adds	r3, #8
 800439c:	623b      	str	r3, [r7, #32]
          break;
 800439e:	e01f      	b.n	80043e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	330c      	adds	r3, #12
 80043a6:	623b      	str	r3, [r7, #32]
          break;
 80043a8:	e01a      	b.n	80043e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043b2:	2304      	movs	r3, #4
 80043b4:	623b      	str	r3, [r7, #32]
          break;
 80043b6:	e013      	b.n	80043e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d105      	bne.n	80043cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043c0:	2308      	movs	r3, #8
 80043c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	611a      	str	r2, [r3, #16]
          break;
 80043ca:	e009      	b.n	80043e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043cc:	2308      	movs	r3, #8
 80043ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	615a      	str	r2, [r3, #20]
          break;
 80043d6:	e003      	b.n	80043e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80043d8:	2300      	movs	r3, #0
 80043da:	623b      	str	r3, [r7, #32]
          break;
 80043dc:	e000      	b.n	80043e0 <HAL_GPIO_Init+0x130>
          break;
 80043de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2bff      	cmp	r3, #255	; 0xff
 80043e4:	d801      	bhi.n	80043ea <HAL_GPIO_Init+0x13a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	e001      	b.n	80043ee <HAL_GPIO_Init+0x13e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3304      	adds	r3, #4
 80043ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2bff      	cmp	r3, #255	; 0xff
 80043f4:	d802      	bhi.n	80043fc <HAL_GPIO_Init+0x14c>
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	e002      	b.n	8004402 <HAL_GPIO_Init+0x152>
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	3b08      	subs	r3, #8
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	210f      	movs	r1, #15
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	401a      	ands	r2, r3
 8004414:	6a39      	ldr	r1, [r7, #32]
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	fa01 f303 	lsl.w	r3, r1, r3
 800441c:	431a      	orrs	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80b1 	beq.w	8004592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004430:	4b4d      	ldr	r3, [pc, #308]	; (8004568 <HAL_GPIO_Init+0x2b8>)
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	4a4c      	ldr	r2, [pc, #304]	; (8004568 <HAL_GPIO_Init+0x2b8>)
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	6193      	str	r3, [r2, #24]
 800443c:	4b4a      	ldr	r3, [pc, #296]	; (8004568 <HAL_GPIO_Init+0x2b8>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004448:	4a48      	ldr	r2, [pc, #288]	; (800456c <HAL_GPIO_Init+0x2bc>)
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	089b      	lsrs	r3, r3, #2
 800444e:	3302      	adds	r3, #2
 8004450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004454:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	220f      	movs	r2, #15
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4013      	ands	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a40      	ldr	r2, [pc, #256]	; (8004570 <HAL_GPIO_Init+0x2c0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d013      	beq.n	800449c <HAL_GPIO_Init+0x1ec>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a3f      	ldr	r2, [pc, #252]	; (8004574 <HAL_GPIO_Init+0x2c4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00d      	beq.n	8004498 <HAL_GPIO_Init+0x1e8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a3e      	ldr	r2, [pc, #248]	; (8004578 <HAL_GPIO_Init+0x2c8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d007      	beq.n	8004494 <HAL_GPIO_Init+0x1e4>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a3d      	ldr	r2, [pc, #244]	; (800457c <HAL_GPIO_Init+0x2cc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d101      	bne.n	8004490 <HAL_GPIO_Init+0x1e0>
 800448c:	2303      	movs	r3, #3
 800448e:	e006      	b.n	800449e <HAL_GPIO_Init+0x1ee>
 8004490:	2304      	movs	r3, #4
 8004492:	e004      	b.n	800449e <HAL_GPIO_Init+0x1ee>
 8004494:	2302      	movs	r3, #2
 8004496:	e002      	b.n	800449e <HAL_GPIO_Init+0x1ee>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <HAL_GPIO_Init+0x1ee>
 800449c:	2300      	movs	r3, #0
 800449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a0:	f002 0203 	and.w	r2, r2, #3
 80044a4:	0092      	lsls	r2, r2, #2
 80044a6:	4093      	lsls	r3, r2
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80044ae:	492f      	ldr	r1, [pc, #188]	; (800456c <HAL_GPIO_Init+0x2bc>)
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	089b      	lsrs	r3, r3, #2
 80044b4:	3302      	adds	r3, #2
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80044c8:	4b2d      	ldr	r3, [pc, #180]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	492c      	ldr	r1, [pc, #176]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	600b      	str	r3, [r1, #0]
 80044d4:	e006      	b.n	80044e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80044d6:	4b2a      	ldr	r3, [pc, #168]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	43db      	mvns	r3, r3
 80044de:	4928      	ldr	r1, [pc, #160]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d006      	beq.n	80044fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80044f0:	4b23      	ldr	r3, [pc, #140]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	4922      	ldr	r1, [pc, #136]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
 80044fc:	e006      	b.n	800450c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80044fe:	4b20      	ldr	r3, [pc, #128]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	43db      	mvns	r3, r3
 8004506:	491e      	ldr	r1, [pc, #120]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 8004508:	4013      	ands	r3, r2
 800450a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d006      	beq.n	8004526 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004518:	4b19      	ldr	r3, [pc, #100]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	4918      	ldr	r1, [pc, #96]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4313      	orrs	r3, r2
 8004522:	608b      	str	r3, [r1, #8]
 8004524:	e006      	b.n	8004534 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004526:	4b16      	ldr	r3, [pc, #88]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	43db      	mvns	r3, r3
 800452e:	4914      	ldr	r1, [pc, #80]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 8004530:	4013      	ands	r3, r2
 8004532:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d021      	beq.n	8004584 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004540:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	490e      	ldr	r1, [pc, #56]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	60cb      	str	r3, [r1, #12]
 800454c:	e021      	b.n	8004592 <HAL_GPIO_Init+0x2e2>
 800454e:	bf00      	nop
 8004550:	10320000 	.word	0x10320000
 8004554:	10310000 	.word	0x10310000
 8004558:	10220000 	.word	0x10220000
 800455c:	10210000 	.word	0x10210000
 8004560:	10120000 	.word	0x10120000
 8004564:	10110000 	.word	0x10110000
 8004568:	40021000 	.word	0x40021000
 800456c:	40010000 	.word	0x40010000
 8004570:	40010800 	.word	0x40010800
 8004574:	40010c00 	.word	0x40010c00
 8004578:	40011000 	.word	0x40011000
 800457c:	40011400 	.word	0x40011400
 8004580:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_GPIO_Init+0x304>)
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	43db      	mvns	r3, r3
 800458c:	4909      	ldr	r1, [pc, #36]	; (80045b4 <HAL_GPIO_Init+0x304>)
 800458e:	4013      	ands	r3, r2
 8004590:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	3301      	adds	r3, #1
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	fa22 f303 	lsr.w	r3, r2, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f47f ae8e 	bne.w	80042c4 <HAL_GPIO_Init+0x14>
  }
}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop
 80045ac:	372c      	adds	r7, #44	; 0x2c
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	40010400 	.word	0x40010400

080045b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	887b      	ldrh	r3, [r7, #2]
 80045ca:	4013      	ands	r3, r2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
 80045d4:	e001      	b.n	80045da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045d6:	2300      	movs	r3, #0
 80045d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045da:	7bfb      	ldrb	r3, [r7, #15]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	807b      	strh	r3, [r7, #2]
 80045f2:	4613      	mov	r3, r2
 80045f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045f6:	787b      	ldrb	r3, [r7, #1]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045fc:	887a      	ldrh	r2, [r7, #2]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004602:	e003      	b.n	800460c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004604:	887b      	ldrh	r3, [r7, #2]
 8004606:	041a      	lsls	r2, r3, #16
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	611a      	str	r2, [r3, #16]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
	...

08004618 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004624:	695a      	ldr	r2, [r3, #20]
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	4013      	ands	r3, r2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d006      	beq.n	800463c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800462e:	4a05      	ldr	r2, [pc, #20]	; (8004644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f806 	bl	8004648 <HAL_GPIO_EXTI_Callback>
  }
}
 800463c:	bf00      	nop
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40010400 	.word	0x40010400

08004648 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e12b      	b.n	80048c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fd fcf2 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	; 0x24
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046c0:	f000 fd1e 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 80046c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4a81      	ldr	r2, [pc, #516]	; (80048d0 <HAL_I2C_Init+0x274>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d807      	bhi.n	80046e0 <HAL_I2C_Init+0x84>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a80      	ldr	r2, [pc, #512]	; (80048d4 <HAL_I2C_Init+0x278>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	bf94      	ite	ls
 80046d8:	2301      	movls	r3, #1
 80046da:	2300      	movhi	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	e006      	b.n	80046ee <HAL_I2C_Init+0x92>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a7d      	ldr	r2, [pc, #500]	; (80048d8 <HAL_I2C_Init+0x27c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	bf94      	ite	ls
 80046e8:	2301      	movls	r3, #1
 80046ea:	2300      	movhi	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e0e7      	b.n	80048c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a78      	ldr	r2, [pc, #480]	; (80048dc <HAL_I2C_Init+0x280>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	0c9b      	lsrs	r3, r3, #18
 8004700:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4a6a      	ldr	r2, [pc, #424]	; (80048d0 <HAL_I2C_Init+0x274>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d802      	bhi.n	8004730 <HAL_I2C_Init+0xd4>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	3301      	adds	r3, #1
 800472e:	e009      	b.n	8004744 <HAL_I2C_Init+0xe8>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	4a69      	ldr	r2, [pc, #420]	; (80048e0 <HAL_I2C_Init+0x284>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	099b      	lsrs	r3, r3, #6
 8004742:	3301      	adds	r3, #1
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	430b      	orrs	r3, r1
 800474a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004756:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	495c      	ldr	r1, [pc, #368]	; (80048d0 <HAL_I2C_Init+0x274>)
 8004760:	428b      	cmp	r3, r1
 8004762:	d819      	bhi.n	8004798 <HAL_I2C_Init+0x13c>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	1e59      	subs	r1, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004772:	1c59      	adds	r1, r3, #1
 8004774:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004778:	400b      	ands	r3, r1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_I2C_Init+0x138>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1e59      	subs	r1, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fbb1 f3f3 	udiv	r3, r1, r3
 800478c:	3301      	adds	r3, #1
 800478e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004792:	e051      	b.n	8004838 <HAL_I2C_Init+0x1dc>
 8004794:	2304      	movs	r3, #4
 8004796:	e04f      	b.n	8004838 <HAL_I2C_Init+0x1dc>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d111      	bne.n	80047c4 <HAL_I2C_Init+0x168>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1e58      	subs	r0, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6859      	ldr	r1, [r3, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	440b      	add	r3, r1
 80047ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b2:	3301      	adds	r3, #1
 80047b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e012      	b.n	80047ea <HAL_I2C_Init+0x18e>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	1e58      	subs	r0, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6859      	ldr	r1, [r3, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	0099      	lsls	r1, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047da:	3301      	adds	r3, #1
 80047dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Init+0x196>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e022      	b.n	8004838 <HAL_I2C_Init+0x1dc>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10e      	bne.n	8004818 <HAL_I2C_Init+0x1bc>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1e58      	subs	r0, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6859      	ldr	r1, [r3, #4]
 8004802:	460b      	mov	r3, r1
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	440b      	add	r3, r1
 8004808:	fbb0 f3f3 	udiv	r3, r0, r3
 800480c:	3301      	adds	r3, #1
 800480e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004816:	e00f      	b.n	8004838 <HAL_I2C_Init+0x1dc>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1e58      	subs	r0, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6859      	ldr	r1, [r3, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	0099      	lsls	r1, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	fbb0 f3f3 	udiv	r3, r0, r3
 800482e:	3301      	adds	r3, #1
 8004830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	6809      	ldr	r1, [r1, #0]
 800483c:	4313      	orrs	r3, r2
 800483e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004866:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6911      	ldr	r1, [r2, #16]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68d2      	ldr	r2, [r2, #12]
 8004872:	4311      	orrs	r1, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	430b      	orrs	r3, r1
 800487a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695a      	ldr	r2, [r3, #20]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	000186a0 	.word	0x000186a0
 80048d4:	001e847f 	.word	0x001e847f
 80048d8:	003d08ff 	.word	0x003d08ff
 80048dc:	431bde83 	.word	0x431bde83
 80048e0:	10624dd3 	.word	0x10624dd3

080048e4 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 80048e8:	bf20      	wfe
  __asm volatile( "nop" );
 80048ea:	bf00      	nop
}
 80048ec:	bf00      	nop
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8004900:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a12      	ldr	r2, [pc, #72]	; (8004950 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004906:	f023 0302 	bic.w	r3, r3, #2
 800490a:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 800490c:	4b10      	ldr	r3, [pc, #64]	; (8004950 <HAL_PWR_EnterSTOPMode+0x5c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f023 0201 	bic.w	r2, r3, #1
 8004914:	490e      	ldr	r1, [pc, #56]	; (8004950 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4313      	orrs	r3, r2
 800491a:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800491c:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <HAL_PWR_EnterSTOPMode+0x60>)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	4a0c      	ldr	r2, [pc, #48]	; (8004954 <HAL_PWR_EnterSTOPMode+0x60>)
 8004922:	f043 0304 	orr.w	r3, r3, #4
 8004926:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800492e:	bf30      	wfi
 8004930:	e004      	b.n	800493c <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004932:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8004934:	f7ff ffd6 	bl	80048e4 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8004938:	f7ff ffd4 	bl	80048e4 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_PWR_EnterSTOPMode+0x60>)
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	4a04      	ldr	r2, [pc, #16]	; (8004954 <HAL_PWR_EnterSTOPMode+0x60>)
 8004942:	f023 0304 	bic.w	r3, r3, #4
 8004946:	6113      	str	r3, [r2, #16]
}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40007000 	.word	0x40007000
 8004954:	e000ed00 	.word	0xe000ed00

08004958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e26c      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 8087 	beq.w	8004a86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004978:	4b92      	ldr	r3, [pc, #584]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 030c 	and.w	r3, r3, #12
 8004980:	2b04      	cmp	r3, #4
 8004982:	d00c      	beq.n	800499e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004984:	4b8f      	ldr	r3, [pc, #572]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b08      	cmp	r3, #8
 800498e:	d112      	bne.n	80049b6 <HAL_RCC_OscConfig+0x5e>
 8004990:	4b8c      	ldr	r3, [pc, #560]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499c:	d10b      	bne.n	80049b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800499e:	4b89      	ldr	r3, [pc, #548]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d06c      	beq.n	8004a84 <HAL_RCC_OscConfig+0x12c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d168      	bne.n	8004a84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e246      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049be:	d106      	bne.n	80049ce <HAL_RCC_OscConfig+0x76>
 80049c0:	4b80      	ldr	r3, [pc, #512]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a7f      	ldr	r2, [pc, #508]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 80049c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	e02e      	b.n	8004a2c <HAL_RCC_OscConfig+0xd4>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10c      	bne.n	80049f0 <HAL_RCC_OscConfig+0x98>
 80049d6:	4b7b      	ldr	r3, [pc, #492]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a7a      	ldr	r2, [pc, #488]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	4b78      	ldr	r3, [pc, #480]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a77      	ldr	r2, [pc, #476]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	e01d      	b.n	8004a2c <HAL_RCC_OscConfig+0xd4>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCC_OscConfig+0xbc>
 80049fa:	4b72      	ldr	r3, [pc, #456]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a71      	ldr	r2, [pc, #452]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	4b6f      	ldr	r3, [pc, #444]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a6e      	ldr	r2, [pc, #440]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e00b      	b.n	8004a2c <HAL_RCC_OscConfig+0xd4>
 8004a14:	4b6b      	ldr	r3, [pc, #428]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a6a      	ldr	r2, [pc, #424]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	4b68      	ldr	r3, [pc, #416]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a67      	ldr	r2, [pc, #412]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d013      	beq.n	8004a5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a34:	f7fe fabe 	bl	8002fb4 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a3c:	f7fe faba 	bl	8002fb4 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b64      	cmp	r3, #100	; 0x64
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e1fa      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4e:	4b5d      	ldr	r3, [pc, #372]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f0      	beq.n	8004a3c <HAL_RCC_OscConfig+0xe4>
 8004a5a:	e014      	b.n	8004a86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5c:	f7fe faaa 	bl	8002fb4 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a64:	f7fe faa6 	bl	8002fb4 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b64      	cmp	r3, #100	; 0x64
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e1e6      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a76:	4b53      	ldr	r3, [pc, #332]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x10c>
 8004a82:	e000      	b.n	8004a86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d063      	beq.n	8004b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a92:	4b4c      	ldr	r3, [pc, #304]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a9e:	4b49      	ldr	r3, [pc, #292]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d11c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x18c>
 8004aaa:	4b46      	ldr	r3, [pc, #280]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d116      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ab6:	4b43      	ldr	r3, [pc, #268]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <HAL_RCC_OscConfig+0x176>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d001      	beq.n	8004ace <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e1ba      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ace:	4b3d      	ldr	r3, [pc, #244]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4939      	ldr	r1, [pc, #228]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae2:	e03a      	b.n	8004b5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d020      	beq.n	8004b2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aec:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <HAL_RCC_OscConfig+0x270>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af2:	f7fe fa5f 	bl	8002fb4 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afa:	f7fe fa5b 	bl	8002fb4 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e19b      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0c:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b18:	4b2a      	ldr	r3, [pc, #168]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	4927      	ldr	r1, [pc, #156]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]
 8004b2c:	e015      	b.n	8004b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b2e:	4b26      	ldr	r3, [pc, #152]	; (8004bc8 <HAL_RCC_OscConfig+0x270>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b34:	f7fe fa3e 	bl	8002fb4 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b3c:	f7fe fa3a 	bl	8002fb4 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e17a      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d03a      	beq.n	8004bdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d019      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b6e:	4b17      	ldr	r3, [pc, #92]	; (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b74:	f7fe fa1e 	bl	8002fb4 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b7c:	f7fe fa1a 	bl	8002fb4 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e15a      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <HAL_RCC_OscConfig+0x26c>)
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	f000 fb08 	bl	80051b0 <RCC_Delay>
 8004ba0:	e01c      	b.n	8004bdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba8:	f7fe fa04 	bl	8002fb4 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bae:	e00f      	b.n	8004bd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb0:	f7fe fa00 	bl	8002fb4 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d908      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e140      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	42420000 	.word	0x42420000
 8004bcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd0:	4b9e      	ldr	r3, [pc, #632]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e9      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80a6 	beq.w	8004d36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bee:	4b97      	ldr	r3, [pc, #604]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10d      	bne.n	8004c16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfa:	4b94      	ldr	r3, [pc, #592]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	4a93      	ldr	r2, [pc, #588]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c04:	61d3      	str	r3, [r2, #28]
 8004c06:	4b91      	ldr	r3, [pc, #580]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	60bb      	str	r3, [r7, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c12:	2301      	movs	r3, #1
 8004c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c16:	4b8e      	ldr	r3, [pc, #568]	; (8004e50 <HAL_RCC_OscConfig+0x4f8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d118      	bne.n	8004c54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c22:	4b8b      	ldr	r3, [pc, #556]	; (8004e50 <HAL_RCC_OscConfig+0x4f8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a8a      	ldr	r2, [pc, #552]	; (8004e50 <HAL_RCC_OscConfig+0x4f8>)
 8004c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c2e:	f7fe f9c1 	bl	8002fb4 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c36:	f7fe f9bd 	bl	8002fb4 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b64      	cmp	r3, #100	; 0x64
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e0fd      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c48:	4b81      	ldr	r3, [pc, #516]	; (8004e50 <HAL_RCC_OscConfig+0x4f8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0f0      	beq.n	8004c36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d106      	bne.n	8004c6a <HAL_RCC_OscConfig+0x312>
 8004c5c:	4b7b      	ldr	r3, [pc, #492]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	4a7a      	ldr	r2, [pc, #488]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	6213      	str	r3, [r2, #32]
 8004c68:	e02d      	b.n	8004cc6 <HAL_RCC_OscConfig+0x36e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10c      	bne.n	8004c8c <HAL_RCC_OscConfig+0x334>
 8004c72:	4b76      	ldr	r3, [pc, #472]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	4a75      	ldr	r2, [pc, #468]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	6213      	str	r3, [r2, #32]
 8004c7e:	4b73      	ldr	r3, [pc, #460]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4a72      	ldr	r2, [pc, #456]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004c84:	f023 0304 	bic.w	r3, r3, #4
 8004c88:	6213      	str	r3, [r2, #32]
 8004c8a:	e01c      	b.n	8004cc6 <HAL_RCC_OscConfig+0x36e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b05      	cmp	r3, #5
 8004c92:	d10c      	bne.n	8004cae <HAL_RCC_OscConfig+0x356>
 8004c94:	4b6d      	ldr	r3, [pc, #436]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	4a6c      	ldr	r2, [pc, #432]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004c9a:	f043 0304 	orr.w	r3, r3, #4
 8004c9e:	6213      	str	r3, [r2, #32]
 8004ca0:	4b6a      	ldr	r3, [pc, #424]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	4a69      	ldr	r2, [pc, #420]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	6213      	str	r3, [r2, #32]
 8004cac:	e00b      	b.n	8004cc6 <HAL_RCC_OscConfig+0x36e>
 8004cae:	4b67      	ldr	r3, [pc, #412]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	4a66      	ldr	r2, [pc, #408]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	6213      	str	r3, [r2, #32]
 8004cba:	4b64      	ldr	r3, [pc, #400]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	4a63      	ldr	r2, [pc, #396]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004cc0:	f023 0304 	bic.w	r3, r3, #4
 8004cc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d015      	beq.n	8004cfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cce:	f7fe f971 	bl	8002fb4 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd4:	e00a      	b.n	8004cec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd6:	f7fe f96d 	bl	8002fb4 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e0ab      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cec:	4b57      	ldr	r3, [pc, #348]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ee      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x37e>
 8004cf8:	e014      	b.n	8004d24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfa:	f7fe f95b 	bl	8002fb4 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d00:	e00a      	b.n	8004d18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fe f957 	bl	8002fb4 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e095      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d18:	4b4c      	ldr	r3, [pc, #304]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ee      	bne.n	8004d02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d105      	bne.n	8004d36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2a:	4b48      	ldr	r3, [pc, #288]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	4a47      	ldr	r2, [pc, #284]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8081 	beq.w	8004e42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d40:	4b42      	ldr	r3, [pc, #264]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d061      	beq.n	8004e10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d146      	bne.n	8004de2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d54:	4b3f      	ldr	r3, [pc, #252]	; (8004e54 <HAL_RCC_OscConfig+0x4fc>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fe f92b 	bl	8002fb4 <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d62:	f7fe f927 	bl	8002fb4 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e067      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d74:	4b35      	ldr	r3, [pc, #212]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d88:	d108      	bne.n	8004d9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d8a:	4b30      	ldr	r3, [pc, #192]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	492d      	ldr	r1, [pc, #180]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d9c:	4b2b      	ldr	r3, [pc, #172]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a19      	ldr	r1, [r3, #32]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	430b      	orrs	r3, r1
 8004dae:	4927      	ldr	r1, [pc, #156]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004db4:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <HAL_RCC_OscConfig+0x4fc>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dba:	f7fe f8fb 	bl	8002fb4 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc2:	f7fe f8f7 	bl	8002fb4 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e037      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dd4:	4b1d      	ldr	r3, [pc, #116]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x46a>
 8004de0:	e02f      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de2:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <HAL_RCC_OscConfig+0x4fc>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de8:	f7fe f8e4 	bl	8002fb4 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df0:	f7fe f8e0 	bl	8002fb4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e020      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0x498>
 8004e0e:	e018      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e013      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_RCC_OscConfig+0x4f4>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d106      	bne.n	8004e3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	40007000 	.word	0x40007000
 8004e54:	42420060 	.word	0x42420060

08004e58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0d0      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e6c:	4b6a      	ldr	r3, [pc, #424]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d910      	bls.n	8004e9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7a:	4b67      	ldr	r3, [pc, #412]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f023 0207 	bic.w	r2, r3, #7
 8004e82:	4965      	ldr	r1, [pc, #404]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b63      	ldr	r3, [pc, #396]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d001      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0b8      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d020      	beq.n	8004eea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb4:	4b59      	ldr	r3, [pc, #356]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	4a58      	ldr	r2, [pc, #352]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ebe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ecc:	4b53      	ldr	r3, [pc, #332]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4a52      	ldr	r2, [pc, #328]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004ed2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ed6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed8:	4b50      	ldr	r3, [pc, #320]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	494d      	ldr	r1, [pc, #308]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d040      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d107      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	4b47      	ldr	r3, [pc, #284]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d115      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e07f      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d107      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	4b41      	ldr	r3, [pc, #260]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e073      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f26:	4b3d      	ldr	r3, [pc, #244]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e06b      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f36:	4b39      	ldr	r3, [pc, #228]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f023 0203 	bic.w	r2, r3, #3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	4936      	ldr	r1, [pc, #216]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f48:	f7fe f834 	bl	8002fb4 <HAL_GetTick>
 8004f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4e:	e00a      	b.n	8004f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f50:	f7fe f830 	bl	8002fb4 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e053      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f66:	4b2d      	ldr	r3, [pc, #180]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f003 020c 	and.w	r2, r3, #12
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d1eb      	bne.n	8004f50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f78:	4b27      	ldr	r3, [pc, #156]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d210      	bcs.n	8004fa8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f023 0207 	bic.w	r2, r3, #7
 8004f8e:	4922      	ldr	r1, [pc, #136]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f96:	4b20      	ldr	r3, [pc, #128]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e032      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb4:	4b19      	ldr	r3, [pc, #100]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4916      	ldr	r1, [pc, #88]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	490e      	ldr	r1, [pc, #56]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fe6:	f000 f821 	bl	800502c <HAL_RCC_GetSysClockFreq>
 8004fea:	4602      	mov	r2, r0
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	490a      	ldr	r1, [pc, #40]	; (8005020 <HAL_RCC_ClockConfig+0x1c8>)
 8004ff8:	5ccb      	ldrb	r3, [r1, r3]
 8004ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffe:	4a09      	ldr	r2, [pc, #36]	; (8005024 <HAL_RCC_ClockConfig+0x1cc>)
 8005000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005002:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_RCC_ClockConfig+0x1d0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fd f940 	bl	800228c <HAL_InitTick>

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40022000 	.word	0x40022000
 800501c:	40021000 	.word	0x40021000
 8005020:	08009e5c 	.word	0x08009e5c
 8005024:	20000008 	.word	0x20000008
 8005028:	200006a4 	.word	0x200006a4

0800502c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800502c:	b490      	push	{r4, r7}
 800502e:	b08a      	sub	sp, #40	; 0x28
 8005030:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005032:	4b2a      	ldr	r3, [pc, #168]	; (80050dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005034:	1d3c      	adds	r4, r7, #4
 8005036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800503c:	f240 2301 	movw	r3, #513	; 0x201
 8005040:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	2300      	movs	r3, #0
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005056:	4b22      	ldr	r3, [pc, #136]	; (80050e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 030c 	and.w	r3, r3, #12
 8005062:	2b04      	cmp	r3, #4
 8005064:	d002      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x40>
 8005066:	2b08      	cmp	r3, #8
 8005068:	d003      	beq.n	8005072 <HAL_RCC_GetSysClockFreq+0x46>
 800506a:	e02d      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800506c:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800506e:	623b      	str	r3, [r7, #32]
      break;
 8005070:	e02d      	b.n	80050ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	0c9b      	lsrs	r3, r3, #18
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800507e:	4413      	add	r3, r2
 8005080:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005084:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d013      	beq.n	80050b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005090:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	0c5b      	lsrs	r3, r3, #17
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800509e:	4413      	add	r3, r2
 80050a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	4a0e      	ldr	r2, [pc, #56]	; (80050e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050aa:	fb02 f203 	mul.w	r2, r2, r3
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
 80050b6:	e004      	b.n	80050c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4a0b      	ldr	r2, [pc, #44]	; (80050e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050bc:	fb02 f303 	mul.w	r3, r2, r3
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	623b      	str	r3, [r7, #32]
      break;
 80050c6:	e002      	b.n	80050ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050c8:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ca:	623b      	str	r3, [r7, #32]
      break;
 80050cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ce:	6a3b      	ldr	r3, [r7, #32]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3728      	adds	r7, #40	; 0x28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc90      	pop	{r4, r7}
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	08009e08 	.word	0x08009e08
 80050e0:	40021000 	.word	0x40021000
 80050e4:	007a1200 	.word	0x007a1200
 80050e8:	003d0900 	.word	0x003d0900

080050ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f0:	4b02      	ldr	r3, [pc, #8]	; (80050fc <HAL_RCC_GetHCLKFreq+0x10>)
 80050f2:	681b      	ldr	r3, [r3, #0]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	20000008 	.word	0x20000008

08005100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005104:	f7ff fff2 	bl	80050ec <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b05      	ldr	r3, [pc, #20]	; (8005120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4903      	ldr	r1, [pc, #12]	; (8005124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800511c:	4618      	mov	r0, r3
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000
 8005124:	08009e6c 	.word	0x08009e6c

08005128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800512c:	f7ff ffde 	bl	80050ec <HAL_RCC_GetHCLKFreq>
 8005130:	4602      	mov	r2, r0
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	0adb      	lsrs	r3, r3, #11
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	4903      	ldr	r1, [pc, #12]	; (800514c <HAL_RCC_GetPCLK2Freq+0x24>)
 800513e:	5ccb      	ldrb	r3, [r1, r3]
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005144:	4618      	mov	r0, r3
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40021000 	.word	0x40021000
 800514c:	08009e6c 	.word	0x08009e6c

08005150 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	220f      	movs	r2, #15
 800515e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <HAL_RCC_GetClockConfig+0x58>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 0203 	and.w	r2, r3, #3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800516c:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <HAL_RCC_GetClockConfig+0x58>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <HAL_RCC_GetClockConfig+0x58>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005184:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <HAL_RCC_GetClockConfig+0x58>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	08db      	lsrs	r3, r3, #3
 800518a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005192:	4b06      	ldr	r3, [pc, #24]	; (80051ac <HAL_RCC_GetClockConfig+0x5c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0207 	and.w	r2, r3, #7
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr
 80051a8:	40021000 	.word	0x40021000
 80051ac:	40022000 	.word	0x40022000

080051b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051b8:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <RCC_Delay+0x34>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <RCC_Delay+0x38>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	0a5b      	lsrs	r3, r3, #9
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051cc:	bf00      	nop
  }
  while (Delay --);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	1e5a      	subs	r2, r3, #1
 80051d2:	60fa      	str	r2, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1f9      	bne.n	80051cc <RCC_Delay+0x1c>
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	20000008 	.word	0x20000008
 80051e8:	10624dd3 	.word	0x10624dd3

080051ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e076      	b.n	80052ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d108      	bne.n	8005218 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800520e:	d009      	beq.n	8005224 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	61da      	str	r2, [r3, #28]
 8005216:	e005      	b.n	8005224 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fc ff52 	bl	80020e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800525a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a8:	ea42 0103 	orr.w	r1, r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	0c1a      	lsrs	r2, r3, #16
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f002 0204 	and.w	r2, r2, #4
 80052ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69da      	ldr	r2, [r3, #28]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_SPI_Transmit+0x22>
 8005312:	2302      	movs	r3, #2
 8005314:	e126      	b.n	8005564 <HAL_SPI_Transmit+0x270>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800531e:	f7fd fe49 	bl	8002fb4 <HAL_GetTick>
 8005322:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005324:	88fb      	ldrh	r3, [r7, #6]
 8005326:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d002      	beq.n	800533a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005334:	2302      	movs	r3, #2
 8005336:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005338:	e10b      	b.n	8005552 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <HAL_SPI_Transmit+0x52>
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	77fb      	strb	r3, [r7, #31]
    goto error;
 800534a:	e102      	b.n	8005552 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2203      	movs	r2, #3
 8005350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	88fa      	ldrh	r2, [r7, #6]
 800536a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005392:	d10f      	bne.n	80053b4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053be:	2b40      	cmp	r3, #64	; 0x40
 80053c0:	d007      	beq.n	80053d2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053da:	d14b      	bne.n	8005474 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <HAL_SPI_Transmit+0xf6>
 80053e4:	8afb      	ldrh	r3, [r7, #22]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d13e      	bne.n	8005468 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	881a      	ldrh	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	1c9a      	adds	r2, r3, #2
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800540e:	e02b      	b.n	8005468 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b02      	cmp	r3, #2
 800541c:	d112      	bne.n	8005444 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	881a      	ldrh	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	1c9a      	adds	r2, r3, #2
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	86da      	strh	r2, [r3, #54]	; 0x36
 8005442:	e011      	b.n	8005468 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005444:	f7fd fdb6 	bl	8002fb4 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d803      	bhi.n	800545c <HAL_SPI_Transmit+0x168>
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800545a:	d102      	bne.n	8005462 <HAL_SPI_Transmit+0x16e>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d102      	bne.n	8005468 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005466:	e074      	b.n	8005552 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1ce      	bne.n	8005410 <HAL_SPI_Transmit+0x11c>
 8005472:	e04c      	b.n	800550e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <HAL_SPI_Transmit+0x18e>
 800547c:	8afb      	ldrh	r3, [r7, #22]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d140      	bne.n	8005504 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	330c      	adds	r3, #12
 800548c:	7812      	ldrb	r2, [r2, #0]
 800548e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054a8:	e02c      	b.n	8005504 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d113      	bne.n	80054e0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	7812      	ldrb	r2, [r2, #0]
 80054c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	3b01      	subs	r3, #1
 80054d8:	b29a      	uxth	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80054de:	e011      	b.n	8005504 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e0:	f7fd fd68 	bl	8002fb4 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d803      	bhi.n	80054f8 <HAL_SPI_Transmit+0x204>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f6:	d102      	bne.n	80054fe <HAL_SPI_Transmit+0x20a>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005502:	e026      	b.n	8005552 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1cd      	bne.n	80054aa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fa8e 	bl	8005a34 <SPI_EndRxTxTransaction>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10a      	bne.n	8005542 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800552c:	2300      	movs	r3, #0
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	77fb      	strb	r3, [r7, #31]
 800554e:	e000      	b.n	8005552 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005550:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005562:	7ffb      	ldrb	r3, [r7, #31]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	4613      	mov	r3, r2
 8005578:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_SPI_Transmit_IT+0x20>
 8005588:	2302      	movs	r3, #2
 800558a:	e06f      	b.n	800566c <HAL_SPI_Transmit_IT+0x100>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <HAL_SPI_Transmit_IT+0x34>
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055a4:	e05d      	b.n	8005662 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d002      	beq.n	80055b8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
 80055b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055b6:	e054      	b.n	8005662 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2203      	movs	r2, #3
 80055bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	88fa      	ldrh	r2, [r7, #6]
 80055d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	88fa      	ldrh	r2, [r7, #6]
 80055d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4a1f      	ldr	r2, [pc, #124]	; (8005678 <HAL_SPI_Transmit_IT+0x10c>)
 80055fc:	645a      	str	r2, [r3, #68]	; 0x44
 80055fe:	e002      	b.n	8005606 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4a1e      	ldr	r2, [pc, #120]	; (800567c <HAL_SPI_Transmit_IT+0x110>)
 8005604:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560e:	d10f      	bne.n	8005630 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800561e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800563e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564a:	2b40      	cmp	r3, #64	; 0x40
 800564c:	d008      	beq.n	8005660 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e000      	b.n	8005662 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8005660:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800566a:	7dfb      	ldrb	r3, [r7, #23]
}
 800566c:	4618      	mov	r0, r3
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	080058df 	.word	0x080058df
 800567c:	08005899 	.word	0x08005899

08005680 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	099b      	lsrs	r3, r3, #6
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10f      	bne.n	80056c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	099b      	lsrs	r3, r3, #6
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d004      	beq.n	80056c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	4798      	blx	r3
    return;
 80056c2:	e0be      	b.n	8005842 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <HAL_SPI_IRQHandler+0x66>
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	09db      	lsrs	r3, r3, #7
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	4798      	blx	r3
    return;
 80056e4:	e0ad      	b.n	8005842 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <HAL_SPI_IRQHandler+0x80>
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	099b      	lsrs	r3, r3, #6
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80a1 	beq.w	8005842 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 809a 	beq.w	8005842 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	099b      	lsrs	r3, r3, #6
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d023      	beq.n	8005762 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b03      	cmp	r3, #3
 8005724:	d011      	beq.n	800574a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572a:	f043 0204 	orr.w	r2, r3, #4
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	e00b      	b.n	8005762 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	693b      	ldr	r3, [r7, #16]
        return;
 8005760:	e06f      	b.n	8005842 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d014      	beq.n	8005798 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	f043 0201 	orr.w	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579c:	2b00      	cmp	r3, #0
 800579e:	d04f      	beq.n	8005840 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057ae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <HAL_SPI_IRQHandler+0x14c>
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d034      	beq.n	8005836 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0203 	bic.w	r2, r2, #3
 80057da:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d011      	beq.n	8005808 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e8:	4a17      	ldr	r2, [pc, #92]	; (8005848 <HAL_SPI_IRQHandler+0x1c8>)
 80057ea:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fe fb9d 	bl	8003f30 <HAL_DMA_Abort_IT>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005800:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580c:	2b00      	cmp	r3, #0
 800580e:	d016      	beq.n	800583e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005814:	4a0c      	ldr	r2, [pc, #48]	; (8005848 <HAL_SPI_IRQHandler+0x1c8>)
 8005816:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe fb87 	bl	8003f30 <HAL_DMA_Abort_IT>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005834:	e003      	b.n	800583e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f811 	bl	800585e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800583c:	e000      	b.n	8005840 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800583e:	bf00      	nop
    return;
 8005840:	bf00      	nop
  }
}
 8005842:	3720      	adds	r7, #32
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	08005871 	.word	0x08005871

0800584c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr

0800585e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr

08005870 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f7ff ffe7 	bl	800585e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	7812      	ldrb	r2, [r2, #0]
 80058ac:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f8cd 	bl	8005a70 <SPI_CloseTx_ISR>
  }
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	881a      	ldrh	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	1c9a      	adds	r2, r3, #2
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f8ab 	bl	8005a70 <SPI_CloseTx_ISR>
  }
}
 800591a:	bf00      	nop
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005934:	f7fd fb3e 	bl	8002fb4 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	4413      	add	r3, r2
 8005942:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005944:	f7fd fb36 	bl	8002fb4 <HAL_GetTick>
 8005948:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800594a:	4b39      	ldr	r3, [pc, #228]	; (8005a30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	015b      	lsls	r3, r3, #5
 8005950:	0d1b      	lsrs	r3, r3, #20
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	fb02 f303 	mul.w	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800595a:	e054      	b.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005962:	d050      	beq.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005964:	f7fd fb26 	bl	8002fb4 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	429a      	cmp	r2, r3
 8005972:	d902      	bls.n	800597a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d13d      	bne.n	80059f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005988:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005992:	d111      	bne.n	80059b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800599c:	d004      	beq.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a6:	d107      	bne.n	80059b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c0:	d10f      	bne.n	80059e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e017      	b.n	8005a26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	bf0c      	ite	eq
 8005a16:	2301      	moveq	r3, #1
 8005a18:	2300      	movne	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d19b      	bne.n	800595c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000008 	.word	0x20000008

08005a34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2200      	movs	r2, #0
 8005a48:	2180      	movs	r1, #128	; 0x80
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff ff6a 	bl	8005924 <SPI_WaitFlagStateUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e000      	b.n	8005a68 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005a78:	4b2c      	ldr	r3, [pc, #176]	; (8005b2c <SPI_CloseTx_ISR+0xbc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2c      	ldr	r2, [pc, #176]	; (8005b30 <SPI_CloseTx_ISR+0xc0>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	0a5b      	lsrs	r3, r3, #9
 8005a84:	2264      	movs	r2, #100	; 0x64
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a8c:	f7fd fa92 	bl	8002fb4 <HAL_GetTick>
 8005a90:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d106      	bne.n	8005aa6 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9c:	f043 0220 	orr.w	r2, r3, #32
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005aa4:	e009      	b.n	8005aba <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0eb      	beq.n	8005a92 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ac8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	2164      	movs	r1, #100	; 0x64
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff ffb0 	bl	8005a34 <SPI_EndRxTxTransaction>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ade:	f043 0220 	orr.w	r2, r3, #32
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff fea2 	bl	800585e <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005b1a:	e002      	b.n	8005b22 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff fe95 	bl	800584c <HAL_SPI_TxCpltCallback>
}
 8005b22:	bf00      	nop
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20000008 	.word	0x20000008
 8005b30:	057619f1 	.word	0x057619f1

08005b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e041      	b.n	8005bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fc fb0a 	bl	8002174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4619      	mov	r1, r3
 8005b72:	4610      	mov	r0, r2
 8005b74:	f000 fb12 	bl	800619c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d001      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e03a      	b.n	8005c62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a18      	ldr	r2, [pc, #96]	; (8005c6c <HAL_TIM_Base_Start_IT+0x98>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x58>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c16:	d009      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x58>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a14      	ldr	r2, [pc, #80]	; (8005c70 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x58>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <HAL_TIM_Base_Start_IT+0xa0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d111      	bne.n	8005c50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b06      	cmp	r3, #6
 8005c3c:	d010      	beq.n	8005c60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	e007      	b.n	8005c60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800

08005c78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_TIM_PWM_Start+0x24>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	bf14      	ite	ne
 8005c94:	2301      	movne	r3, #1
 8005c96:	2300      	moveq	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	e022      	b.n	8005ce2 <HAL_TIM_PWM_Start+0x6a>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d109      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0x3e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	bf14      	ite	ne
 8005cae:	2301      	movne	r3, #1
 8005cb0:	2300      	moveq	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	e015      	b.n	8005ce2 <HAL_TIM_PWM_Start+0x6a>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d109      	bne.n	8005cd0 <HAL_TIM_PWM_Start+0x58>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	bf14      	ite	ne
 8005cc8:	2301      	movne	r3, #1
 8005cca:	2300      	moveq	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	e008      	b.n	8005ce2 <HAL_TIM_PWM_Start+0x6a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	bf14      	ite	ne
 8005cdc:	2301      	movne	r3, #1
 8005cde:	2300      	moveq	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e05e      	b.n	8005da8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d104      	bne.n	8005cfa <HAL_TIM_PWM_Start+0x82>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cf8:	e013      	b.n	8005d22 <HAL_TIM_PWM_Start+0xaa>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d104      	bne.n	8005d0a <HAL_TIM_PWM_Start+0x92>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d08:	e00b      	b.n	8005d22 <HAL_TIM_PWM_Start+0xaa>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d104      	bne.n	8005d1a <HAL_TIM_PWM_Start+0xa2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d18:	e003      	b.n	8005d22 <HAL_TIM_PWM_Start+0xaa>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2201      	movs	r2, #1
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fb2e 	bl	800638c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <HAL_TIM_PWM_Start+0x138>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d107      	bne.n	8005d4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <HAL_TIM_PWM_Start+0x138>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00e      	beq.n	8005d72 <HAL_TIM_PWM_Start+0xfa>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5c:	d009      	beq.n	8005d72 <HAL_TIM_PWM_Start+0xfa>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a14      	ldr	r2, [pc, #80]	; (8005db4 <HAL_TIM_PWM_Start+0x13c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d004      	beq.n	8005d72 <HAL_TIM_PWM_Start+0xfa>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a12      	ldr	r2, [pc, #72]	; (8005db8 <HAL_TIM_PWM_Start+0x140>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d111      	bne.n	8005d96 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b06      	cmp	r3, #6
 8005d82:	d010      	beq.n	8005da6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d94:	e007      	b.n	8005da6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0201 	orr.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800

08005dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d122      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d11b      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0202 	mvn.w	r2, #2
 8005de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f9b1 	bl	8006166 <HAL_TIM_IC_CaptureCallback>
 8005e04:	e005      	b.n	8005e12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f9a4 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f9b3 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d122      	bne.n	8005e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d11b      	bne.n	8005e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0204 	mvn.w	r2, #4
 8005e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f987 	bl	8006166 <HAL_TIM_IC_CaptureCallback>
 8005e58:	e005      	b.n	8005e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f97a 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f989 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d122      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d11b      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0208 	mvn.w	r2, #8
 8005e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2204      	movs	r2, #4
 8005e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f95d 	bl	8006166 <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f950 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f95f 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	2b10      	cmp	r3, #16
 8005ecc:	d122      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f003 0310 	and.w	r3, r3, #16
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d11b      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0210 	mvn.w	r2, #16
 8005ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2208      	movs	r2, #8
 8005eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f933 	bl	8006166 <HAL_TIM_IC_CaptureCallback>
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f926 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f935 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d10e      	bne.n	8005f40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d107      	bne.n	8005f40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0201 	mvn.w	r2, #1
 8005f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fb f816 	bl	8000f6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b80      	cmp	r3, #128	; 0x80
 8005f4c:	d10e      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f58:	2b80      	cmp	r3, #128	; 0x80
 8005f5a:	d107      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa9b 	bl	80064a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d10e      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d107      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f8f9 	bl	800618a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	d10e      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d107      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0220 	mvn.w	r2, #32
 8005fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fa66 	bl	8006490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_TIM_ConfigClockSource+0x18>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e0b3      	b.n	800614c <HAL_TIM_ConfigClockSource+0x180>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006002:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800600a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800601c:	d03e      	beq.n	800609c <HAL_TIM_ConfigClockSource+0xd0>
 800601e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006022:	f200 8087 	bhi.w	8006134 <HAL_TIM_ConfigClockSource+0x168>
 8006026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602a:	f000 8085 	beq.w	8006138 <HAL_TIM_ConfigClockSource+0x16c>
 800602e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006032:	d87f      	bhi.n	8006134 <HAL_TIM_ConfigClockSource+0x168>
 8006034:	2b70      	cmp	r3, #112	; 0x70
 8006036:	d01a      	beq.n	800606e <HAL_TIM_ConfigClockSource+0xa2>
 8006038:	2b70      	cmp	r3, #112	; 0x70
 800603a:	d87b      	bhi.n	8006134 <HAL_TIM_ConfigClockSource+0x168>
 800603c:	2b60      	cmp	r3, #96	; 0x60
 800603e:	d050      	beq.n	80060e2 <HAL_TIM_ConfigClockSource+0x116>
 8006040:	2b60      	cmp	r3, #96	; 0x60
 8006042:	d877      	bhi.n	8006134 <HAL_TIM_ConfigClockSource+0x168>
 8006044:	2b50      	cmp	r3, #80	; 0x50
 8006046:	d03c      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0xf6>
 8006048:	2b50      	cmp	r3, #80	; 0x50
 800604a:	d873      	bhi.n	8006134 <HAL_TIM_ConfigClockSource+0x168>
 800604c:	2b40      	cmp	r3, #64	; 0x40
 800604e:	d058      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0x136>
 8006050:	2b40      	cmp	r3, #64	; 0x40
 8006052:	d86f      	bhi.n	8006134 <HAL_TIM_ConfigClockSource+0x168>
 8006054:	2b30      	cmp	r3, #48	; 0x30
 8006056:	d064      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0x156>
 8006058:	2b30      	cmp	r3, #48	; 0x30
 800605a:	d86b      	bhi.n	8006134 <HAL_TIM_ConfigClockSource+0x168>
 800605c:	2b20      	cmp	r3, #32
 800605e:	d060      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0x156>
 8006060:	2b20      	cmp	r3, #32
 8006062:	d867      	bhi.n	8006134 <HAL_TIM_ConfigClockSource+0x168>
 8006064:	2b00      	cmp	r3, #0
 8006066:	d05c      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0x156>
 8006068:	2b10      	cmp	r3, #16
 800606a:	d05a      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800606c:	e062      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6818      	ldr	r0, [r3, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	6899      	ldr	r1, [r3, #8]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f000 f966 	bl	800634e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006090:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	609a      	str	r2, [r3, #8]
      break;
 800609a:	e04e      	b.n	800613a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	6899      	ldr	r1, [r3, #8]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f000 f94f 	bl	800634e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060be:	609a      	str	r2, [r3, #8]
      break;
 80060c0:	e03b      	b.n	800613a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	6859      	ldr	r1, [r3, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	461a      	mov	r2, r3
 80060d0:	f000 f8c6 	bl	8006260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2150      	movs	r1, #80	; 0x50
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 f91d 	bl	800631a <TIM_ITRx_SetConfig>
      break;
 80060e0:	e02b      	b.n	800613a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	6859      	ldr	r1, [r3, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	461a      	mov	r2, r3
 80060f0:	f000 f8e4 	bl	80062bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2160      	movs	r1, #96	; 0x60
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 f90d 	bl	800631a <TIM_ITRx_SetConfig>
      break;
 8006100:	e01b      	b.n	800613a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6859      	ldr	r1, [r3, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	461a      	mov	r2, r3
 8006110:	f000 f8a6 	bl	8006260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2140      	movs	r1, #64	; 0x40
 800611a:	4618      	mov	r0, r3
 800611c:	f000 f8fd 	bl	800631a <TIM_ITRx_SetConfig>
      break;
 8006120:	e00b      	b.n	800613a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4619      	mov	r1, r3
 800612c:	4610      	mov	r0, r2
 800612e:	f000 f8f4 	bl	800631a <TIM_ITRx_SetConfig>
        break;
 8006132:	e002      	b.n	800613a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006134:	bf00      	nop
 8006136:	e000      	b.n	800613a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006138:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr

08006166 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr

08006178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr

0800618a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr

0800619c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a29      	ldr	r2, [pc, #164]	; (8006254 <TIM_Base_SetConfig+0xb8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00b      	beq.n	80061cc <TIM_Base_SetConfig+0x30>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ba:	d007      	beq.n	80061cc <TIM_Base_SetConfig+0x30>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a26      	ldr	r2, [pc, #152]	; (8006258 <TIM_Base_SetConfig+0xbc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d003      	beq.n	80061cc <TIM_Base_SetConfig+0x30>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a25      	ldr	r2, [pc, #148]	; (800625c <TIM_Base_SetConfig+0xc0>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d108      	bne.n	80061de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a1c      	ldr	r2, [pc, #112]	; (8006254 <TIM_Base_SetConfig+0xb8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00b      	beq.n	80061fe <TIM_Base_SetConfig+0x62>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ec:	d007      	beq.n	80061fe <TIM_Base_SetConfig+0x62>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a19      	ldr	r2, [pc, #100]	; (8006258 <TIM_Base_SetConfig+0xbc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_Base_SetConfig+0x62>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a18      	ldr	r2, [pc, #96]	; (800625c <TIM_Base_SetConfig+0xc0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d108      	bne.n	8006210 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a07      	ldr	r2, [pc, #28]	; (8006254 <TIM_Base_SetConfig+0xb8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d103      	bne.n	8006244 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	615a      	str	r2, [r3, #20]
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr
 8006254:	40012c00 	.word	0x40012c00
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800

08006260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f023 0201 	bic.w	r2, r3, #1
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800628a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	4313      	orrs	r3, r2
 8006294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f023 030a 	bic.w	r3, r3, #10
 800629c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr

080062bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f023 0210 	bic.w	r2, r3, #16
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	031b      	lsls	r3, r3, #12
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	4313      	orrs	r3, r2
 8006302:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	621a      	str	r2, [r3, #32]
}
 8006310:	bf00      	nop
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr

0800631a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800631a:	b480      	push	{r7}
 800631c:	b085      	sub	sp, #20
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	f043 0307 	orr.w	r3, r3, #7
 800633c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	609a      	str	r2, [r3, #8]
}
 8006344:	bf00      	nop
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr

0800634e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800634e:	b480      	push	{r7}
 8006350:	b087      	sub	sp, #28
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]
 800635a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006368:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	021a      	lsls	r2, r3, #8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	431a      	orrs	r2, r3
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4313      	orrs	r3, r2
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	609a      	str	r2, [r3, #8]
}
 8006382:	bf00      	nop
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr

0800638c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	2201      	movs	r2, #1
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a1a      	ldr	r2, [r3, #32]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	43db      	mvns	r3, r3
 80063ae:	401a      	ands	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a1a      	ldr	r2, [r3, #32]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	fa01 f303 	lsl.w	r3, r1, r3
 80063c4:	431a      	orrs	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	621a      	str	r2, [r3, #32]
}
 80063ca:	bf00      	nop
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc80      	pop	{r7}
 80063d2:	4770      	bx	lr

080063d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e046      	b.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a16      	ldr	r2, [pc, #88]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00e      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006438:	d009      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a12      	ldr	r2, [pc, #72]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d004      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a10      	ldr	r2, [pc, #64]	; (800648c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d10c      	bne.n	8006468 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	4313      	orrs	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	bc80      	pop	{r7}
 8006482:	4770      	bx	lr
 8006484:	40012c00 	.word	0x40012c00
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800

08006490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr

080064b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e03f      	b.n	8006546 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fb fe82 	bl	80021e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2224      	movs	r2, #36	; 0x24
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fba9 	bl	8006c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800650c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695a      	ldr	r2, [r3, #20]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800651c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800652c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	4613      	mov	r3, r2
 800655a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b20      	cmp	r3, #32
 8006566:	d11d      	bne.n	80065a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <HAL_UART_Receive_IT+0x26>
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e016      	b.n	80065a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_UART_Receive_IT+0x38>
 8006582:	2302      	movs	r3, #2
 8006584:	e00f      	b.n	80065a6 <HAL_UART_Receive_IT+0x58>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006594:	88fb      	ldrh	r3, [r7, #6]
 8006596:	461a      	mov	r2, r3
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 f9cf 	bl	800693e <UART_Start_Receive_IT>
 80065a0:	4603      	mov	r3, r0
 80065a2:	e000      	b.n	80065a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
  }
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10d      	bne.n	8006602 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <HAL_UART_IRQHandler+0x52>
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa7f 	bl	8006afe <UART_Receive_IT>
      return;
 8006600:	e17b      	b.n	80068fa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80b1 	beq.w	800676c <HAL_UART_IRQHandler+0x1bc>
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d105      	bne.n	8006620 <HAL_UART_IRQHandler+0x70>
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 80a6 	beq.w	800676c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <HAL_UART_IRQHandler+0x90>
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	f043 0201 	orr.w	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <HAL_UART_IRQHandler+0xb0>
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d005      	beq.n	8006660 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	f043 0202 	orr.w	r2, r3, #2
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <HAL_UART_IRQHandler+0xd0>
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d005      	beq.n	8006680 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	f043 0204 	orr.w	r2, r3, #4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00f      	beq.n	80066aa <HAL_UART_IRQHandler+0xfa>
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <HAL_UART_IRQHandler+0xee>
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	f043 0208 	orr.w	r2, r3, #8
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 811e 	beq.w	80068f0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_UART_IRQHandler+0x11e>
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fa18 	bl	8006afe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bf14      	ite	ne
 80066dc:	2301      	movne	r3, #1
 80066de:	2300      	moveq	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d102      	bne.n	80066f6 <HAL_UART_IRQHandler+0x146>
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d031      	beq.n	800675a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f95a 	bl	80069b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006706:	2b00      	cmp	r3, #0
 8006708:	d023      	beq.n	8006752 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695a      	ldr	r2, [r3, #20]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006718:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	2b00      	cmp	r3, #0
 8006720:	d013      	beq.n	800674a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	4a76      	ldr	r2, [pc, #472]	; (8006900 <HAL_UART_IRQHandler+0x350>)
 8006728:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	4618      	mov	r0, r3
 8006730:	f7fd fbfe 	bl	8003f30 <HAL_DMA_Abort_IT>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d016      	beq.n	8006768 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006748:	e00e      	b.n	8006768 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f8e3 	bl	8006916 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006750:	e00a      	b.n	8006768 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f8df 	bl	8006916 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006758:	e006      	b.n	8006768 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f8db 	bl	8006916 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006766:	e0c3      	b.n	80068f0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006768:	bf00      	nop
    return;
 800676a:	e0c1      	b.n	80068f0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	2b01      	cmp	r3, #1
 8006772:	f040 80a1 	bne.w	80068b8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 809b 	beq.w	80068b8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 8095 	beq.w	80068b8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d04e      	beq.n	8006850 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80067bc:	8a3b      	ldrh	r3, [r7, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 8098 	beq.w	80068f4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067c8:	8a3a      	ldrh	r2, [r7, #16]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	f080 8092 	bcs.w	80068f4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8a3a      	ldrh	r2, [r7, #16]
 80067d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d02b      	beq.n	8006838 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067ee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695a      	ldr	r2, [r3, #20]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800680e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0210 	bic.w	r2, r2, #16
 800682c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	4618      	mov	r0, r3
 8006834:	f7fd fb41 	bl	8003eba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006840:	b29b      	uxth	r3, r3
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	b29b      	uxth	r3, r3
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f86d 	bl	8006928 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800684e:	e051      	b.n	80068f4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006858:	b29b      	uxth	r3, r3
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006862:	b29b      	uxth	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d047      	beq.n	80068f8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006868:	8a7b      	ldrh	r3, [r7, #18]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d044      	beq.n	80068f8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800687c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695a      	ldr	r2, [r3, #20]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0201 	bic.w	r2, r2, #1
 800688c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2220      	movs	r2, #32
 8006892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0210 	bic.w	r2, r2, #16
 80068aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068ac:	8a7b      	ldrh	r3, [r7, #18]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f839 	bl	8006928 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80068b6:	e01f      	b.n	80068f8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <HAL_UART_IRQHandler+0x324>
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f8af 	bl	8006a30 <UART_Transmit_IT>
    return;
 80068d2:	e012      	b.n	80068fa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00d      	beq.n	80068fa <HAL_UART_IRQHandler+0x34a>
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d008      	beq.n	80068fa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f8f0 	bl	8006ace <UART_EndTransmit_IT>
    return;
 80068ee:	e004      	b.n	80068fa <HAL_UART_IRQHandler+0x34a>
    return;
 80068f0:	bf00      	nop
 80068f2:	e002      	b.n	80068fa <HAL_UART_IRQHandler+0x34a>
      return;
 80068f4:	bf00      	nop
 80068f6:	e000      	b.n	80068fa <HAL_UART_IRQHandler+0x34a>
      return;
 80068f8:	bf00      	nop
  }
}
 80068fa:	3728      	adds	r7, #40	; 0x28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	08006a09 	.word	0x08006a09

08006904 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	bc80      	pop	{r7}
 8006914:	4770      	bx	lr

08006916 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr

0800693e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	4613      	mov	r3, r2
 800694a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	88fa      	ldrh	r2, [r7, #6]
 8006956:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	88fa      	ldrh	r2, [r7, #6]
 800695c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2222      	movs	r2, #34	; 0x22
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006982:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695a      	ldr	r2, [r3, #20]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0201 	orr.w	r2, r2, #1
 8006992:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0220 	orr.w	r2, r2, #32
 80069a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr

080069b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695a      	ldr	r2, [r3, #20]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0201 	bic.w	r2, r2, #1
 80069d6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d107      	bne.n	80069f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0210 	bic.w	r2, r2, #16
 80069ee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f7ff ff77 	bl	8006916 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b21      	cmp	r3, #33	; 0x21
 8006a42:	d13e      	bne.n	8006ac2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a4c:	d114      	bne.n	8006a78 <UART_Transmit_IT+0x48>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d110      	bne.n	8006a78 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	461a      	mov	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	1c9a      	adds	r2, r3, #2
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	621a      	str	r2, [r3, #32]
 8006a76:	e008      	b.n	8006a8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	1c59      	adds	r1, r3, #1
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6211      	str	r1, [r2, #32]
 8006a82:	781a      	ldrb	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	4619      	mov	r1, r3
 8006a98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10f      	bne.n	8006abe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006abc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e000      	b.n	8006ac4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ac2:	2302      	movs	r3, #2
  }
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	4770      	bx	lr

08006ace <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff ff08 	bl	8006904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b22      	cmp	r3, #34	; 0x22
 8006b10:	f040 8099 	bne.w	8006c46 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1c:	d117      	bne.n	8006b4e <UART_Receive_IT+0x50>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d113      	bne.n	8006b4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	1c9a      	adds	r2, r3, #2
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b4c:	e026      	b.n	8006b9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006b54:	2300      	movs	r3, #0
 8006b56:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b60:	d007      	beq.n	8006b72 <UART_Receive_IT+0x74>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <UART_Receive_IT+0x82>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	e008      	b.n	8006b92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d148      	bne.n	8006c42 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0220 	bic.w	r2, r2, #32
 8006bbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695a      	ldr	r2, [r3, #20]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d123      	bne.n	8006c38 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0210 	bic.w	r2, r2, #16
 8006c04:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d10a      	bne.n	8006c2a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	60fb      	str	r3, [r7, #12]
 8006c28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff fe79 	bl	8006928 <HAL_UARTEx_RxEventCallback>
 8006c36:	e002      	b.n	8006c3e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7fb fd07 	bl	800264c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e002      	b.n	8006c48 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	e000      	b.n	8006c48 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006c46:	2302      	movs	r3, #2
  }
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c8a:	f023 030c 	bic.w	r3, r3, #12
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6812      	ldr	r2, [r2, #0]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	430b      	orrs	r3, r1
 8006c96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a2c      	ldr	r2, [pc, #176]	; (8006d64 <UART_SetConfig+0x114>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d103      	bne.n	8006cc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006cb8:	f7fe fa36 	bl	8005128 <HAL_RCC_GetPCLK2Freq>
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	e002      	b.n	8006cc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006cc0:	f7fe fa1e 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8006cc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	009a      	lsls	r2, r3, #2
 8006cd0:	441a      	add	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cdc:	4a22      	ldr	r2, [pc, #136]	; (8006d68 <UART_SetConfig+0x118>)
 8006cde:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce2:	095b      	lsrs	r3, r3, #5
 8006ce4:	0119      	lsls	r1, r3, #4
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	009a      	lsls	r2, r3, #2
 8006cf0:	441a      	add	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cfc:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <UART_SetConfig+0x118>)
 8006cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	2064      	movs	r0, #100	; 0x64
 8006d06:	fb00 f303 	mul.w	r3, r0, r3
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	3332      	adds	r3, #50	; 0x32
 8006d10:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <UART_SetConfig+0x118>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d1c:	4419      	add	r1, r3
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4613      	mov	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	009a      	lsls	r2, r3, #2
 8006d28:	441a      	add	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d34:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <UART_SetConfig+0x118>)
 8006d36:	fba3 0302 	umull	r0, r3, r3, r2
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	2064      	movs	r0, #100	; 0x64
 8006d3e:	fb00 f303 	mul.w	r3, r0, r3
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	3332      	adds	r3, #50	; 0x32
 8006d48:	4a07      	ldr	r2, [pc, #28]	; (8006d68 <UART_SetConfig+0x118>)
 8006d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	f003 020f 	and.w	r2, r3, #15
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	440a      	add	r2, r1
 8006d5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d5c:	bf00      	nop
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	40013800 	.word	0x40013800
 8006d68:	51eb851f 	.word	0x51eb851f

08006d6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	4603      	mov	r3, r0
 8006d74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d7e:	2b84      	cmp	r3, #132	; 0x84
 8006d80:	d005      	beq.n	8006d8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006d82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4413      	add	r3, r2
 8006d8a:	3303      	adds	r3, #3
 8006d8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr

08006d9a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006d9e:	f001 f801 	bl	8007da4 <vTaskStartScheduler>
  
  return osOK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006daa:	b089      	sub	sp, #36	; 0x24
 8006dac:	af04      	add	r7, sp, #16
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d020      	beq.n	8006dfc <osThreadCreate+0x54>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d01c      	beq.n	8006dfc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685c      	ldr	r4, [r3, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681d      	ldr	r5, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691e      	ldr	r6, [r3, #16]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff ffc9 	bl	8006d6c <makeFreeRtosPriority>
 8006dda:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006de4:	9202      	str	r2, [sp, #8]
 8006de6:	9301      	str	r3, [sp, #4]
 8006de8:	9100      	str	r1, [sp, #0]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	4632      	mov	r2, r6
 8006dee:	4629      	mov	r1, r5
 8006df0:	4620      	mov	r0, r4
 8006df2:	f000 fcdb 	bl	80077ac <xTaskCreateStatic>
 8006df6:	4603      	mov	r3, r0
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	e01c      	b.n	8006e36 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685c      	ldr	r4, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e08:	b29e      	uxth	r6, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff ffab 	bl	8006d6c <makeFreeRtosPriority>
 8006e16:	4602      	mov	r2, r0
 8006e18:	f107 030c 	add.w	r3, r7, #12
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	9200      	str	r2, [sp, #0]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	4632      	mov	r2, r6
 8006e24:	4629      	mov	r1, r5
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 fd1c 	bl	8007864 <xTaskCreate>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d001      	beq.n	8006e36 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	e000      	b.n	8006e38 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006e36:	68fb      	ldr	r3, [r7, #12]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e40 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <osDelay+0x16>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	e000      	b.n	8006e58 <osDelay+0x18>
 8006e56:	2301      	movs	r3, #1
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fe31 	bl	8007ac0 <vTaskDelay>
  
  return osOK;
 8006e5e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006e68:	b590      	push	{r4, r7, lr}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d011      	beq.n	8006e9e <osMessageCreate+0x36>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00d      	beq.n	8006e9e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6818      	ldr	r0, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6859      	ldr	r1, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	2400      	movs	r4, #0
 8006e94:	9400      	str	r4, [sp, #0]
 8006e96:	f000 f927 	bl	80070e8 <xQueueGenericCreateStatic>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	e008      	b.n	8006eb0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	f000 f994 	bl	80071d6 <xQueueGenericCreate>
 8006eae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd90      	pop	{r4, r7, pc}

08006eb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f103 0208 	add.w	r2, r3, #8
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ed0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f103 0208 	add.w	r2, r3, #8
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f103 0208 	add.w	r2, r3, #8
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bc80      	pop	{r7}
 8006ef4:	4770      	bx	lr

08006ef6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bc80      	pop	{r7}
 8006f0c:	4770      	bx	lr

08006f0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b085      	sub	sp, #20
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	601a      	str	r2, [r3, #0]
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr

08006f54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f6a:	d103      	bne.n	8006f74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	e00c      	b.n	8006f8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3308      	adds	r3, #8
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	e002      	b.n	8006f82 <vListInsert+0x2e>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d2f6      	bcs.n	8006f7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	601a      	str	r2, [r3, #0]
}
 8006fba:	bf00      	nop
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bc80      	pop	{r7}
 8006fc2:	4770      	bx	lr

08006fc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6892      	ldr	r2, [r2, #8]
 8006fda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6852      	ldr	r2, [r2, #4]
 8006fe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d103      	bne.n	8006ff8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	1e5a      	subs	r2, r3, #1
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr
	...

08007018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007042:	f001 fd53 	bl	8008aec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	441a      	add	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	3b01      	subs	r3, #1
 8007074:	68f9      	ldr	r1, [r7, #12]
 8007076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007078:	fb01 f303 	mul.w	r3, r1, r3
 800707c:	441a      	add	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	22ff      	movs	r2, #255	; 0xff
 8007086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	22ff      	movs	r2, #255	; 0xff
 800708e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d114      	bne.n	80070c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01a      	beq.n	80070d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3310      	adds	r3, #16
 80070a4:	4618      	mov	r0, r3
 80070a6:	f001 f8c3 	bl	8008230 <xTaskRemoveFromEventList>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d012      	beq.n	80070d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <xQueueGenericReset+0xcc>)
 80070b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	e009      	b.n	80070d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3310      	adds	r3, #16
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7ff fef6 	bl	8006eb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3324      	adds	r3, #36	; 0x24
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff fef1 	bl	8006eb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070d6:	f001 fd39 	bl	8008b4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070da:	2301      	movs	r3, #1
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	e000ed04 	.word	0xe000ed04

080070e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08e      	sub	sp, #56	; 0x38
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <xQueueGenericCreateStatic+0x52>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <xQueueGenericCreateStatic+0x56>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <xQueueGenericCreateStatic+0x58>
 800713e:	2300      	movs	r3, #0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	623b      	str	r3, [r7, #32]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d102      	bne.n	8007166 <xQueueGenericCreateStatic+0x7e>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <xQueueGenericCreateStatic+0x82>
 8007166:	2301      	movs	r3, #1
 8007168:	e000      	b.n	800716c <xQueueGenericCreateStatic+0x84>
 800716a:	2300      	movs	r3, #0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	61fb      	str	r3, [r7, #28]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007186:	2348      	movs	r3, #72	; 0x48
 8007188:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b48      	cmp	r3, #72	; 0x48
 800718e:	d00a      	beq.n	80071a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	61bb      	str	r3, [r7, #24]
}
 80071a2:	bf00      	nop
 80071a4:	e7fe      	b.n	80071a4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00d      	beq.n	80071cc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	4613      	mov	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 f843 	bl	8007252 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3730      	adds	r7, #48	; 0x30
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b08a      	sub	sp, #40	; 0x28
 80071da:	af02      	add	r7, sp, #8
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	4613      	mov	r3, r2
 80071e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10a      	bne.n	8007200 <xQueueGenericCreate+0x2a>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	613b      	str	r3, [r7, #16]
}
 80071fc:	bf00      	nop
 80071fe:	e7fe      	b.n	80071fe <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d102      	bne.n	800720c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007206:	2300      	movs	r3, #0
 8007208:	61fb      	str	r3, [r7, #28]
 800720a:	e004      	b.n	8007216 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	fb02 f303 	mul.w	r3, r2, r3
 8007214:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	3348      	adds	r3, #72	; 0x48
 800721a:	4618      	mov	r0, r3
 800721c:	f001 fd66 	bl	8008cec <pvPortMalloc>
 8007220:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00f      	beq.n	8007248 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	3348      	adds	r3, #72	; 0x48
 800722c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007236:	79fa      	ldrb	r2, [r7, #7]
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	4613      	mov	r3, r2
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 f805 	bl	8007252 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007248:	69bb      	ldr	r3, [r7, #24]
	}
 800724a:	4618      	mov	r0, r3
 800724c:	3720      	adds	r7, #32
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
 800725e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d103      	bne.n	800726e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e002      	b.n	8007274 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007280:	2101      	movs	r1, #1
 8007282:	69b8      	ldr	r0, [r7, #24]
 8007284:	f7ff fec8 	bl	8007018 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007288:	bf00      	nop
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08e      	sub	sp, #56	; 0x38
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d103      	bne.n	80072cc <xQueueGenericSendFromISR+0x3c>
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <xQueueGenericSendFromISR+0x40>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <xQueueGenericSendFromISR+0x42>
 80072d0:	2300      	movs	r3, #0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	623b      	str	r3, [r7, #32]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d103      	bne.n	80072fa <xQueueGenericSendFromISR+0x6a>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d101      	bne.n	80072fe <xQueueGenericSendFromISR+0x6e>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <xQueueGenericSendFromISR+0x70>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	61fb      	str	r3, [r7, #28]
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800731a:	f001 fca9 	bl	8008c70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800731e:	f3ef 8211 	mrs	r2, BASEPRI
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	61ba      	str	r2, [r7, #24]
 8007334:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007336:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007338:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007342:	429a      	cmp	r2, r3
 8007344:	d302      	bcc.n	800734c <xQueueGenericSendFromISR+0xbc>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b02      	cmp	r3, #2
 800734a:	d12c      	bne.n	80073a6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800735c:	f000 f92e 	bl	80075bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007360:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007368:	d112      	bne.n	8007390 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	d016      	beq.n	80073a0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	3324      	adds	r3, #36	; 0x24
 8007376:	4618      	mov	r0, r3
 8007378:	f000 ff5a 	bl	8008230 <xTaskRemoveFromEventList>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00e      	beq.n	80073a0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00b      	beq.n	80073a0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e007      	b.n	80073a0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007394:	3301      	adds	r3, #1
 8007396:	b2db      	uxtb	r3, r3
 8007398:	b25a      	sxtb	r2, r3
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073a0:	2301      	movs	r3, #1
 80073a2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80073a4:	e001      	b.n	80073aa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	637b      	str	r3, [r7, #52]	; 0x34
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3738      	adds	r7, #56	; 0x38
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08c      	sub	sp, #48	; 0x30
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073cc:	2300      	movs	r3, #0
 80073ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <xQueueReceive+0x30>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	623b      	str	r3, [r7, #32]
}
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d103      	bne.n	80073fe <xQueueReceive+0x3e>
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <xQueueReceive+0x42>
 80073fe:	2301      	movs	r3, #1
 8007400:	e000      	b.n	8007404 <xQueueReceive+0x44>
 8007402:	2300      	movs	r3, #0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <xQueueReceive+0x5e>
	__asm volatile
 8007408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	61fb      	str	r3, [r7, #28]
}
 800741a:	bf00      	nop
 800741c:	e7fe      	b.n	800741c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800741e:	f001 f8d5 	bl	80085cc <xTaskGetSchedulerState>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d102      	bne.n	800742e <xQueueReceive+0x6e>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <xQueueReceive+0x72>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <xQueueReceive+0x74>
 8007432:	2300      	movs	r3, #0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <xQueueReceive+0x8e>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	61bb      	str	r3, [r7, #24]
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800744e:	f001 fb4d 	bl	8008aec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007456:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	2b00      	cmp	r3, #0
 800745c:	d01f      	beq.n	800749e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800745e:	68b9      	ldr	r1, [r7, #8]
 8007460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007462:	f000 f915 	bl	8007690 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	1e5a      	subs	r2, r3, #1
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00f      	beq.n	8007496 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	3310      	adds	r3, #16
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fed8 	bl	8008230 <xTaskRemoveFromEventList>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007486:	4b3d      	ldr	r3, [pc, #244]	; (800757c <xQueueReceive+0x1bc>)
 8007488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007496:	f001 fb59 	bl	8008b4c <vPortExitCritical>
				return pdPASS;
 800749a:	2301      	movs	r3, #1
 800749c:	e069      	b.n	8007572 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d103      	bne.n	80074ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074a4:	f001 fb52 	bl	8008b4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074a8:	2300      	movs	r3, #0
 80074aa:	e062      	b.n	8007572 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d106      	bne.n	80074c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074b2:	f107 0310 	add.w	r3, r7, #16
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 ff1c 	bl	80082f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074bc:	2301      	movs	r3, #1
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074c0:	f001 fb44 	bl	8008b4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074c4:	f000 fcce 	bl	8007e64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074c8:	f001 fb10 	bl	8008aec <vPortEnterCritical>
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074d2:	b25b      	sxtb	r3, r3
 80074d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074d8:	d103      	bne.n	80074e2 <xQueueReceive+0x122>
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074e8:	b25b      	sxtb	r3, r3
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ee:	d103      	bne.n	80074f8 <xQueueReceive+0x138>
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074f8:	f001 fb28 	bl	8008b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074fc:	1d3a      	adds	r2, r7, #4
 80074fe:	f107 0310 	add.w	r3, r7, #16
 8007502:	4611      	mov	r1, r2
 8007504:	4618      	mov	r0, r3
 8007506:	f000 ff0b 	bl	8008320 <xTaskCheckForTimeOut>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d123      	bne.n	8007558 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007512:	f000 f935 	bl	8007780 <prvIsQueueEmpty>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d017      	beq.n	800754c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	3324      	adds	r3, #36	; 0x24
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	4611      	mov	r1, r2
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fe5f 	bl	80081e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800752a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800752c:	f000 f8d6 	bl	80076dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007530:	f000 fca6 	bl	8007e80 <xTaskResumeAll>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d189      	bne.n	800744e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800753a:	4b10      	ldr	r3, [pc, #64]	; (800757c <xQueueReceive+0x1bc>)
 800753c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	e780      	b.n	800744e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800754c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800754e:	f000 f8c5 	bl	80076dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007552:	f000 fc95 	bl	8007e80 <xTaskResumeAll>
 8007556:	e77a      	b.n	800744e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800755a:	f000 f8bf 	bl	80076dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800755e:	f000 fc8f 	bl	8007e80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007564:	f000 f90c 	bl	8007780 <prvIsQueueEmpty>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	f43f af6f 	beq.w	800744e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007570:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007572:	4618      	mov	r0, r3
 8007574:	3730      	adds	r7, #48	; 0x30
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	e000ed04 	.word	0xe000ed04

08007580 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	60bb      	str	r3, [r7, #8]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80075a4:	f001 faa2 	bl	8008aec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80075ae:	f001 facd 	bl	8008b4c <vPortExitCritical>

	return uxReturn;
 80075b2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10d      	bne.n	80075f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d14d      	bne.n	800767e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 f80e 	bl	8008608 <xTaskPriorityDisinherit>
 80075ec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	605a      	str	r2, [r3, #4]
 80075f4:	e043      	b.n	800767e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d119      	bne.n	8007630 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6898      	ldr	r0, [r3, #8]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007604:	461a      	mov	r2, r3
 8007606:	68b9      	ldr	r1, [r7, #8]
 8007608:	f002 fa8c 	bl	8009b24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	441a      	add	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	429a      	cmp	r2, r3
 8007624:	d32b      	bcc.n	800767e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	609a      	str	r2, [r3, #8]
 800762e:	e026      	b.n	800767e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	68d8      	ldr	r0, [r3, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	461a      	mov	r2, r3
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	f002 fa72 	bl	8009b24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	425b      	negs	r3, r3
 800764a:	441a      	add	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	429a      	cmp	r2, r3
 800765a:	d207      	bcs.n	800766c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	425b      	negs	r3, r3
 8007666:	441a      	add	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d105      	bne.n	800767e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	3b01      	subs	r3, #1
 800767c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007686:	697b      	ldr	r3, [r7, #20]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d018      	beq.n	80076d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	441a      	add	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d303      	bcc.n	80076c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68d9      	ldr	r1, [r3, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	461a      	mov	r2, r3
 80076ce:	6838      	ldr	r0, [r7, #0]
 80076d0:	f002 fa28 	bl	8009b24 <memcpy>
	}
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076e4:	f001 fa02 	bl	8008aec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076f0:	e011      	b.n	8007716 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d012      	beq.n	8007720 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3324      	adds	r3, #36	; 0x24
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fd96 	bl	8008230 <xTaskRemoveFromEventList>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800770a:	f000 fe6b 	bl	80083e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	3b01      	subs	r3, #1
 8007712:	b2db      	uxtb	r3, r3
 8007714:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dce9      	bgt.n	80076f2 <prvUnlockQueue+0x16>
 800771e:	e000      	b.n	8007722 <prvUnlockQueue+0x46>
					break;
 8007720:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	22ff      	movs	r2, #255	; 0xff
 8007726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800772a:	f001 fa0f 	bl	8008b4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800772e:	f001 f9dd 	bl	8008aec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007738:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800773a:	e011      	b.n	8007760 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d012      	beq.n	800776a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3310      	adds	r3, #16
 8007748:	4618      	mov	r0, r3
 800774a:	f000 fd71 	bl	8008230 <xTaskRemoveFromEventList>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007754:	f000 fe46 	bl	80083e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	3b01      	subs	r3, #1
 800775c:	b2db      	uxtb	r3, r3
 800775e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	dce9      	bgt.n	800773c <prvUnlockQueue+0x60>
 8007768:	e000      	b.n	800776c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800776a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	22ff      	movs	r2, #255	; 0xff
 8007770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007774:	f001 f9ea 	bl	8008b4c <vPortExitCritical>
}
 8007778:	bf00      	nop
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007788:	f001 f9b0 	bl	8008aec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007794:	2301      	movs	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e001      	b.n	800779e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800779e:	f001 f9d5 	bl	8008b4c <vPortExitCritical>

	return xReturn;
 80077a2:	68fb      	ldr	r3, [r7, #12]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08e      	sub	sp, #56	; 0x38
 80077b0:	af04      	add	r7, sp, #16
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10a      	bne.n	80077d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	623b      	str	r3, [r7, #32]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	61fb      	str	r3, [r7, #28]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077f2:	2354      	movs	r3, #84	; 0x54
 80077f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b54      	cmp	r3, #84	; 0x54
 80077fa:	d00a      	beq.n	8007812 <xTaskCreateStatic+0x66>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	61bb      	str	r3, [r7, #24]
}
 800780e:	bf00      	nop
 8007810:	e7fe      	b.n	8007810 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007814:	2b00      	cmp	r3, #0
 8007816:	d01e      	beq.n	8007856 <xTaskCreateStatic+0xaa>
 8007818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781a:	2b00      	cmp	r3, #0
 800781c:	d01b      	beq.n	8007856 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800781e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007826:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	2202      	movs	r2, #2
 800782c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007830:	2300      	movs	r3, #0
 8007832:	9303      	str	r3, [sp, #12]
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	9302      	str	r3, [sp, #8]
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	68b9      	ldr	r1, [r7, #8]
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 f850 	bl	80078ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800784e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007850:	f000 f8cc 	bl	80079ec <prvAddNewTaskToReadyList>
 8007854:	e001      	b.n	800785a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800785a:	697b      	ldr	r3, [r7, #20]
	}
 800785c:	4618      	mov	r0, r3
 800785e:	3728      	adds	r7, #40	; 0x28
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08c      	sub	sp, #48	; 0x30
 8007868:	af04      	add	r7, sp, #16
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	4613      	mov	r3, r2
 8007872:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007874:	88fb      	ldrh	r3, [r7, #6]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4618      	mov	r0, r3
 800787a:	f001 fa37 	bl	8008cec <pvPortMalloc>
 800787e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00e      	beq.n	80078a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007886:	2054      	movs	r0, #84	; 0x54
 8007888:	f001 fa30 	bl	8008cec <pvPortMalloc>
 800788c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	631a      	str	r2, [r3, #48]	; 0x30
 800789a:	e005      	b.n	80078a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800789c:	6978      	ldr	r0, [r7, #20]
 800789e:	f001 fae9 	bl	8008e74 <vPortFree>
 80078a2:	e001      	b.n	80078a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d017      	beq.n	80078de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078b6:	88fa      	ldrh	r2, [r7, #6]
 80078b8:	2300      	movs	r3, #0
 80078ba:	9303      	str	r3, [sp, #12]
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	9302      	str	r3, [sp, #8]
 80078c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c2:	9301      	str	r3, [sp, #4]
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	68b9      	ldr	r1, [r7, #8]
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f80e 	bl	80078ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078d2:	69f8      	ldr	r0, [r7, #28]
 80078d4:	f000 f88a 	bl	80079ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078d8:	2301      	movs	r3, #1
 80078da:	61bb      	str	r3, [r7, #24]
 80078dc:	e002      	b.n	80078e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078e4:	69bb      	ldr	r3, [r7, #24]
	}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3720      	adds	r7, #32
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b088      	sub	sp, #32
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	607a      	str	r2, [r7, #4]
 80078fa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007906:	3b01      	subs	r3, #1
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	f023 0307 	bic.w	r3, r3, #7
 8007914:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00a      	beq.n	8007936 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	617b      	str	r3, [r7, #20]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007936:	2300      	movs	r3, #0
 8007938:	61fb      	str	r3, [r7, #28]
 800793a:	e012      	b.n	8007962 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	7819      	ldrb	r1, [r3, #0]
 8007944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	4413      	add	r3, r2
 800794a:	3334      	adds	r3, #52	; 0x34
 800794c:	460a      	mov	r2, r1
 800794e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	4413      	add	r3, r2
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d006      	beq.n	800796a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	3301      	adds	r3, #1
 8007960:	61fb      	str	r3, [r7, #28]
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	2b0f      	cmp	r3, #15
 8007966:	d9e9      	bls.n	800793c <prvInitialiseNewTask+0x4e>
 8007968:	e000      	b.n	800796c <prvInitialiseNewTask+0x7e>
		{
			break;
 800796a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	2b06      	cmp	r3, #6
 8007978:	d901      	bls.n	800797e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800797a:	2306      	movs	r3, #6
 800797c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007982:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007988:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	2200      	movs	r2, #0
 800798e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	3304      	adds	r3, #4
 8007994:	4618      	mov	r0, r3
 8007996:	f7ff faae 	bl	8006ef6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	3318      	adds	r3, #24
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff faa9 	bl	8006ef6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	f1c3 0207 	rsb	r2, r3, #7
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	2200      	movs	r2, #0
 80079be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	68f9      	ldr	r1, [r7, #12]
 80079cc:	69b8      	ldr	r0, [r7, #24]
 80079ce:	f000 ff99 	bl	8008904 <pxPortInitialiseStack>
 80079d2:	4602      	mov	r2, r0
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079e4:	bf00      	nop
 80079e6:	3720      	adds	r7, #32
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079f4:	f001 f87a 	bl	8008aec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079f8:	4b2a      	ldr	r3, [pc, #168]	; (8007aa4 <prvAddNewTaskToReadyList+0xb8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3301      	adds	r3, #1
 80079fe:	4a29      	ldr	r2, [pc, #164]	; (8007aa4 <prvAddNewTaskToReadyList+0xb8>)
 8007a00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a02:	4b29      	ldr	r3, [pc, #164]	; (8007aa8 <prvAddNewTaskToReadyList+0xbc>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d109      	bne.n	8007a1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a0a:	4a27      	ldr	r2, [pc, #156]	; (8007aa8 <prvAddNewTaskToReadyList+0xbc>)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a10:	4b24      	ldr	r3, [pc, #144]	; (8007aa4 <prvAddNewTaskToReadyList+0xb8>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d110      	bne.n	8007a3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a18:	f000 fd08 	bl	800842c <prvInitialiseTaskLists>
 8007a1c:	e00d      	b.n	8007a3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a1e:	4b23      	ldr	r3, [pc, #140]	; (8007aac <prvAddNewTaskToReadyList+0xc0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a26:	4b20      	ldr	r3, [pc, #128]	; (8007aa8 <prvAddNewTaskToReadyList+0xbc>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d802      	bhi.n	8007a3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a34:	4a1c      	ldr	r2, [pc, #112]	; (8007aa8 <prvAddNewTaskToReadyList+0xbc>)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a3a:	4b1d      	ldr	r3, [pc, #116]	; (8007ab0 <prvAddNewTaskToReadyList+0xc4>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	4a1b      	ldr	r2, [pc, #108]	; (8007ab0 <prvAddNewTaskToReadyList+0xc4>)
 8007a42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	2201      	movs	r2, #1
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	4b19      	ldr	r3, [pc, #100]	; (8007ab4 <prvAddNewTaskToReadyList+0xc8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	4a18      	ldr	r2, [pc, #96]	; (8007ab4 <prvAddNewTaskToReadyList+0xc8>)
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4a15      	ldr	r2, [pc, #84]	; (8007ab8 <prvAddNewTaskToReadyList+0xcc>)
 8007a64:	441a      	add	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f7ff fa4e 	bl	8006f0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a72:	f001 f86b 	bl	8008b4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a76:	4b0d      	ldr	r3, [pc, #52]	; (8007aac <prvAddNewTaskToReadyList+0xc0>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00e      	beq.n	8007a9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a7e:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <prvAddNewTaskToReadyList+0xbc>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d207      	bcs.n	8007a9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a8c:	4b0b      	ldr	r3, [pc, #44]	; (8007abc <prvAddNewTaskToReadyList+0xd0>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a9c:	bf00      	nop
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	2000144c 	.word	0x2000144c
 8007aa8:	2000134c 	.word	0x2000134c
 8007aac:	20001458 	.word	0x20001458
 8007ab0:	20001468 	.word	0x20001468
 8007ab4:	20001454 	.word	0x20001454
 8007ab8:	20001350 	.word	0x20001350
 8007abc:	e000ed04 	.word	0xe000ed04

08007ac0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d017      	beq.n	8007b02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ad2:	4b13      	ldr	r3, [pc, #76]	; (8007b20 <vTaskDelay+0x60>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <vTaskDelay+0x30>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	60bb      	str	r3, [r7, #8]
}
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007af0:	f000 f9b8 	bl	8007e64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007af4:	2100      	movs	r1, #0
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fe9e 	bl	8008838 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007afc:	f000 f9c0 	bl	8007e80 <xTaskResumeAll>
 8007b00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d107      	bne.n	8007b18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007b08:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <vTaskDelay+0x64>)
 8007b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b18:	bf00      	nop
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20001474 	.word	0x20001474
 8007b24:	e000ed04 	.word	0xe000ed04

08007b28 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007b30:	f000 ffdc 	bl	8008aec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d102      	bne.n	8007b40 <vTaskSuspend+0x18>
 8007b3a:	4b3c      	ldr	r3, [pc, #240]	; (8007c2c <vTaskSuspend+0x104>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	e000      	b.n	8007b42 <vTaskSuspend+0x1a>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff fa3b 	bl	8006fc4 <uxListRemove>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d115      	bne.n	8007b80 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b58:	4935      	ldr	r1, [pc, #212]	; (8007c30 <vTaskSuspend+0x108>)
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10a      	bne.n	8007b80 <vTaskSuspend+0x58>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	2201      	movs	r2, #1
 8007b70:	fa02 f303 	lsl.w	r3, r2, r3
 8007b74:	43da      	mvns	r2, r3
 8007b76:	4b2f      	ldr	r3, [pc, #188]	; (8007c34 <vTaskSuspend+0x10c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	4a2d      	ldr	r2, [pc, #180]	; (8007c34 <vTaskSuspend+0x10c>)
 8007b7e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	3318      	adds	r3, #24
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff fa19 	bl	8006fc4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3304      	adds	r3, #4
 8007b96:	4619      	mov	r1, r3
 8007b98:	4827      	ldr	r0, [pc, #156]	; (8007c38 <vTaskSuspend+0x110>)
 8007b9a:	f7ff f9b8 	bl	8006f0e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d103      	bne.n	8007bb2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007bb2:	f000 ffcb 	bl	8008b4c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007bb6:	4b21      	ldr	r3, [pc, #132]	; (8007c3c <vTaskSuspend+0x114>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d005      	beq.n	8007bca <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007bbe:	f000 ff95 	bl	8008aec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007bc2:	f000 fcd1 	bl	8008568 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007bc6:	f000 ffc1 	bl	8008b4c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007bca:	4b18      	ldr	r3, [pc, #96]	; (8007c2c <vTaskSuspend+0x104>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d127      	bne.n	8007c24 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007bd4:	4b19      	ldr	r3, [pc, #100]	; (8007c3c <vTaskSuspend+0x114>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d017      	beq.n	8007c0c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007bdc:	4b18      	ldr	r3, [pc, #96]	; (8007c40 <vTaskSuspend+0x118>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00a      	beq.n	8007bfa <vTaskSuspend+0xd2>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	60bb      	str	r3, [r7, #8]
}
 8007bf6:	bf00      	nop
 8007bf8:	e7fe      	b.n	8007bf8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007bfa:	4b12      	ldr	r3, [pc, #72]	; (8007c44 <vTaskSuspend+0x11c>)
 8007bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c0a:	e00b      	b.n	8007c24 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8007c0c:	4b0a      	ldr	r3, [pc, #40]	; (8007c38 <vTaskSuspend+0x110>)
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	4b0d      	ldr	r3, [pc, #52]	; (8007c48 <vTaskSuspend+0x120>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d103      	bne.n	8007c20 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007c18:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <vTaskSuspend+0x104>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
	}
 8007c1e:	e001      	b.n	8007c24 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007c20:	f000 fa88 	bl	8008134 <vTaskSwitchContext>
	}
 8007c24:	bf00      	nop
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	2000134c 	.word	0x2000134c
 8007c30:	20001350 	.word	0x20001350
 8007c34:	20001454 	.word	0x20001454
 8007c38:	20001438 	.word	0x20001438
 8007c3c:	20001458 	.word	0x20001458
 8007c40:	20001474 	.word	0x20001474
 8007c44:	e000ed04 	.word	0xe000ed04
 8007c48:	2000144c 	.word	0x2000144c

08007c4c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007c54:	2300      	movs	r3, #0
 8007c56:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	60fb      	str	r3, [r7, #12]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	4a0e      	ldr	r2, [pc, #56]	; (8007cb8 <prvTaskIsTaskSuspended+0x6c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d101      	bne.n	8007c86 <prvTaskIsTaskSuspended+0x3a>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <prvTaskIsTaskSuspended+0x3c>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00f      	beq.n	8007cac <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	4a0a      	ldr	r2, [pc, #40]	; (8007cbc <prvTaskIsTaskSuspended+0x70>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d00a      	beq.n	8007cac <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <prvTaskIsTaskSuspended+0x56>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e000      	b.n	8007ca4 <prvTaskIsTaskSuspended+0x58>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cac:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007cae:	4618      	mov	r0, r3
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bc80      	pop	{r7}
 8007cb6:	4770      	bx	lr
 8007cb8:	20001438 	.word	0x20001438
 8007cbc:	2000140c 	.word	0x2000140c

08007cc0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	; 0x28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10a      	bne.n	8007cec <xTaskResumeFromISR+0x2c>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	61bb      	str	r3, [r7, #24]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cec:	f000 ffc0 	bl	8008c70 <vPortValidateInterruptPriority>
	__asm volatile
 8007cf0:	f3ef 8211 	mrs	r2, BASEPRI
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	617a      	str	r2, [r7, #20]
 8007d06:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007d08:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d0a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007d0c:	6a38      	ldr	r0, [r7, #32]
 8007d0e:	f7ff ff9d 	bl	8007c4c <prvTaskIsTaskSuspended>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d02f      	beq.n	8007d78 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d18:	4b1d      	ldr	r3, [pc, #116]	; (8007d90 <xTaskResumeFromISR+0xd0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d125      	bne.n	8007d6c <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d24:	4b1b      	ldr	r3, [pc, #108]	; (8007d94 <xTaskResumeFromISR+0xd4>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d301      	bcc.n	8007d32 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	3304      	adds	r3, #4
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7ff f944 	bl	8006fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	2201      	movs	r2, #1
 8007d42:	409a      	lsls	r2, r3
 8007d44:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <xTaskResumeFromISR+0xd8>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	4a13      	ldr	r2, [pc, #76]	; (8007d98 <xTaskResumeFromISR+0xd8>)
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d52:	4613      	mov	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4a10      	ldr	r2, [pc, #64]	; (8007d9c <xTaskResumeFromISR+0xdc>)
 8007d5c:	441a      	add	r2, r3
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	3304      	adds	r3, #4
 8007d62:	4619      	mov	r1, r3
 8007d64:	4610      	mov	r0, r2
 8007d66:	f7ff f8d2 	bl	8006f0e <vListInsertEnd>
 8007d6a:	e005      	b.n	8007d78 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	3318      	adds	r3, #24
 8007d70:	4619      	mov	r1, r3
 8007d72:	480b      	ldr	r0, [pc, #44]	; (8007da0 <xTaskResumeFromISR+0xe0>)
 8007d74:	f7ff f8cb 	bl	8006f0e <vListInsertEnd>
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f383 8811 	msr	BASEPRI, r3
}
 8007d82:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3728      	adds	r7, #40	; 0x28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20001474 	.word	0x20001474
 8007d94:	2000134c 	.word	0x2000134c
 8007d98:	20001454 	.word	0x20001454
 8007d9c:	20001350 	.word	0x20001350
 8007da0:	2000140c 	.word	0x2000140c

08007da4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007db2:	463a      	mov	r2, r7
 8007db4:	1d39      	adds	r1, r7, #4
 8007db6:	f107 0308 	add.w	r3, r7, #8
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7f8 fd42 	bl	8000844 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	9202      	str	r2, [sp, #8]
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	460a      	mov	r2, r1
 8007dd2:	491e      	ldr	r1, [pc, #120]	; (8007e4c <vTaskStartScheduler+0xa8>)
 8007dd4:	481e      	ldr	r0, [pc, #120]	; (8007e50 <vTaskStartScheduler+0xac>)
 8007dd6:	f7ff fce9 	bl	80077ac <xTaskCreateStatic>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	4a1d      	ldr	r2, [pc, #116]	; (8007e54 <vTaskStartScheduler+0xb0>)
 8007dde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007de0:	4b1c      	ldr	r3, [pc, #112]	; (8007e54 <vTaskStartScheduler+0xb0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007de8:	2301      	movs	r3, #1
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	e001      	b.n	8007df2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d116      	bne.n	8007e26 <vTaskStartScheduler+0x82>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	613b      	str	r3, [r7, #16]
}
 8007e0a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e0c:	4b12      	ldr	r3, [pc, #72]	; (8007e58 <vTaskStartScheduler+0xb4>)
 8007e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e14:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <vTaskStartScheduler+0xb8>)
 8007e16:	2201      	movs	r2, #1
 8007e18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007e1a:	4b11      	ldr	r3, [pc, #68]	; (8007e60 <vTaskStartScheduler+0xbc>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e20:	f000 fdf2 	bl	8008a08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e24:	e00e      	b.n	8007e44 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e2c:	d10a      	bne.n	8007e44 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	60fb      	str	r3, [r7, #12]
}
 8007e40:	bf00      	nop
 8007e42:	e7fe      	b.n	8007e42 <vTaskStartScheduler+0x9e>
}
 8007e44:	bf00      	nop
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	08009e18 	.word	0x08009e18
 8007e50:	080083fd 	.word	0x080083fd
 8007e54:	20001470 	.word	0x20001470
 8007e58:	2000146c 	.word	0x2000146c
 8007e5c:	20001458 	.word	0x20001458
 8007e60:	20001450 	.word	0x20001450

08007e64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007e68:	4b04      	ldr	r3, [pc, #16]	; (8007e7c <vTaskSuspendAll+0x18>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	4a03      	ldr	r2, [pc, #12]	; (8007e7c <vTaskSuspendAll+0x18>)
 8007e70:	6013      	str	r3, [r2, #0]
}
 8007e72:	bf00      	nop
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	20001474 	.word	0x20001474

08007e80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e8e:	4b41      	ldr	r3, [pc, #260]	; (8007f94 <xTaskResumeAll+0x114>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10a      	bne.n	8007eac <xTaskResumeAll+0x2c>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	603b      	str	r3, [r7, #0]
}
 8007ea8:	bf00      	nop
 8007eaa:	e7fe      	b.n	8007eaa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007eac:	f000 fe1e 	bl	8008aec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007eb0:	4b38      	ldr	r3, [pc, #224]	; (8007f94 <xTaskResumeAll+0x114>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	4a37      	ldr	r2, [pc, #220]	; (8007f94 <xTaskResumeAll+0x114>)
 8007eb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eba:	4b36      	ldr	r3, [pc, #216]	; (8007f94 <xTaskResumeAll+0x114>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d161      	bne.n	8007f86 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ec2:	4b35      	ldr	r3, [pc, #212]	; (8007f98 <xTaskResumeAll+0x118>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d05d      	beq.n	8007f86 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007eca:	e02e      	b.n	8007f2a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007ecc:	4b33      	ldr	r3, [pc, #204]	; (8007f9c <xTaskResumeAll+0x11c>)
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	3318      	adds	r3, #24
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7ff f873 	bl	8006fc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff f86e 	bl	8006fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	2201      	movs	r2, #1
 8007eee:	409a      	lsls	r2, r3
 8007ef0:	4b2b      	ldr	r3, [pc, #172]	; (8007fa0 <xTaskResumeAll+0x120>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	4a2a      	ldr	r2, [pc, #168]	; (8007fa0 <xTaskResumeAll+0x120>)
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4a27      	ldr	r2, [pc, #156]	; (8007fa4 <xTaskResumeAll+0x124>)
 8007f08:	441a      	add	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f7fe fffc 	bl	8006f0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	4b23      	ldr	r3, [pc, #140]	; (8007fa8 <xTaskResumeAll+0x128>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d302      	bcc.n	8007f2a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007f24:	4b21      	ldr	r3, [pc, #132]	; (8007fac <xTaskResumeAll+0x12c>)
 8007f26:	2201      	movs	r2, #1
 8007f28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f2a:	4b1c      	ldr	r3, [pc, #112]	; (8007f9c <xTaskResumeAll+0x11c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1cc      	bne.n	8007ecc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f38:	f000 fb16 	bl	8008568 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007f3c:	4b1c      	ldr	r3, [pc, #112]	; (8007fb0 <xTaskResumeAll+0x130>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d010      	beq.n	8007f6a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f48:	f000 f836 	bl	8007fb8 <xTaskIncrementTick>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007f52:	4b16      	ldr	r3, [pc, #88]	; (8007fac <xTaskResumeAll+0x12c>)
 8007f54:	2201      	movs	r2, #1
 8007f56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1f1      	bne.n	8007f48 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007f64:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <xTaskResumeAll+0x130>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f6a:	4b10      	ldr	r3, [pc, #64]	; (8007fac <xTaskResumeAll+0x12c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d009      	beq.n	8007f86 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f72:	2301      	movs	r3, #1
 8007f74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f76:	4b0f      	ldr	r3, [pc, #60]	; (8007fb4 <xTaskResumeAll+0x134>)
 8007f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f86:	f000 fde1 	bl	8008b4c <vPortExitCritical>

	return xAlreadyYielded;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20001474 	.word	0x20001474
 8007f98:	2000144c 	.word	0x2000144c
 8007f9c:	2000140c 	.word	0x2000140c
 8007fa0:	20001454 	.word	0x20001454
 8007fa4:	20001350 	.word	0x20001350
 8007fa8:	2000134c 	.word	0x2000134c
 8007fac:	20001460 	.word	0x20001460
 8007fb0:	2000145c 	.word	0x2000145c
 8007fb4:	e000ed04 	.word	0xe000ed04

08007fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fc2:	4b51      	ldr	r3, [pc, #324]	; (8008108 <xTaskIncrementTick+0x150>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f040 808d 	bne.w	80080e6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fcc:	4b4f      	ldr	r3, [pc, #316]	; (800810c <xTaskIncrementTick+0x154>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fd4:	4a4d      	ldr	r2, [pc, #308]	; (800810c <xTaskIncrementTick+0x154>)
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d120      	bne.n	8008022 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fe0:	4b4b      	ldr	r3, [pc, #300]	; (8008110 <xTaskIncrementTick+0x158>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <xTaskIncrementTick+0x48>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	603b      	str	r3, [r7, #0]
}
 8007ffc:	bf00      	nop
 8007ffe:	e7fe      	b.n	8007ffe <xTaskIncrementTick+0x46>
 8008000:	4b43      	ldr	r3, [pc, #268]	; (8008110 <xTaskIncrementTick+0x158>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	4b43      	ldr	r3, [pc, #268]	; (8008114 <xTaskIncrementTick+0x15c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a41      	ldr	r2, [pc, #260]	; (8008110 <xTaskIncrementTick+0x158>)
 800800c:	6013      	str	r3, [r2, #0]
 800800e:	4a41      	ldr	r2, [pc, #260]	; (8008114 <xTaskIncrementTick+0x15c>)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6013      	str	r3, [r2, #0]
 8008014:	4b40      	ldr	r3, [pc, #256]	; (8008118 <xTaskIncrementTick+0x160>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3301      	adds	r3, #1
 800801a:	4a3f      	ldr	r2, [pc, #252]	; (8008118 <xTaskIncrementTick+0x160>)
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	f000 faa3 	bl	8008568 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008022:	4b3e      	ldr	r3, [pc, #248]	; (800811c <xTaskIncrementTick+0x164>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	429a      	cmp	r2, r3
 800802a:	d34d      	bcc.n	80080c8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800802c:	4b38      	ldr	r3, [pc, #224]	; (8008110 <xTaskIncrementTick+0x158>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <xTaskIncrementTick+0x82>
 8008036:	2301      	movs	r3, #1
 8008038:	e000      	b.n	800803c <xTaskIncrementTick+0x84>
 800803a:	2300      	movs	r3, #0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d004      	beq.n	800804a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008040:	4b36      	ldr	r3, [pc, #216]	; (800811c <xTaskIncrementTick+0x164>)
 8008042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008046:	601a      	str	r2, [r3, #0]
					break;
 8008048:	e03e      	b.n	80080c8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800804a:	4b31      	ldr	r3, [pc, #196]	; (8008110 <xTaskIncrementTick+0x158>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	429a      	cmp	r2, r3
 8008060:	d203      	bcs.n	800806a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008062:	4a2e      	ldr	r2, [pc, #184]	; (800811c <xTaskIncrementTick+0x164>)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6013      	str	r3, [r2, #0]
						break;
 8008068:	e02e      	b.n	80080c8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	3304      	adds	r3, #4
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe ffa8 	bl	8006fc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	2b00      	cmp	r3, #0
 800807a:	d004      	beq.n	8008086 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	3318      	adds	r3, #24
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe ff9f 	bl	8006fc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	2201      	movs	r2, #1
 800808c:	409a      	lsls	r2, r3
 800808e:	4b24      	ldr	r3, [pc, #144]	; (8008120 <xTaskIncrementTick+0x168>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4313      	orrs	r3, r2
 8008094:	4a22      	ldr	r2, [pc, #136]	; (8008120 <xTaskIncrementTick+0x168>)
 8008096:	6013      	str	r3, [r2, #0]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809c:	4613      	mov	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4a1f      	ldr	r2, [pc, #124]	; (8008124 <xTaskIncrementTick+0x16c>)
 80080a6:	441a      	add	r2, r3
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	3304      	adds	r3, #4
 80080ac:	4619      	mov	r1, r3
 80080ae:	4610      	mov	r0, r2
 80080b0:	f7fe ff2d 	bl	8006f0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b8:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <xTaskIncrementTick+0x170>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	429a      	cmp	r2, r3
 80080c0:	d3b4      	bcc.n	800802c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80080c2:	2301      	movs	r3, #1
 80080c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080c6:	e7b1      	b.n	800802c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080c8:	4b17      	ldr	r3, [pc, #92]	; (8008128 <xTaskIncrementTick+0x170>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ce:	4915      	ldr	r1, [pc, #84]	; (8008124 <xTaskIncrementTick+0x16c>)
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	440b      	add	r3, r1
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d907      	bls.n	80080f0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80080e0:	2301      	movs	r3, #1
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	e004      	b.n	80080f0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80080e6:	4b11      	ldr	r3, [pc, #68]	; (800812c <xTaskIncrementTick+0x174>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3301      	adds	r3, #1
 80080ec:	4a0f      	ldr	r2, [pc, #60]	; (800812c <xTaskIncrementTick+0x174>)
 80080ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80080f0:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <xTaskIncrementTick+0x178>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80080f8:	2301      	movs	r3, #1
 80080fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80080fc:	697b      	ldr	r3, [r7, #20]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20001474 	.word	0x20001474
 800810c:	20001450 	.word	0x20001450
 8008110:	20001404 	.word	0x20001404
 8008114:	20001408 	.word	0x20001408
 8008118:	20001464 	.word	0x20001464
 800811c:	2000146c 	.word	0x2000146c
 8008120:	20001454 	.word	0x20001454
 8008124:	20001350 	.word	0x20001350
 8008128:	2000134c 	.word	0x2000134c
 800812c:	2000145c 	.word	0x2000145c
 8008130:	20001460 	.word	0x20001460

08008134 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800813a:	4b26      	ldr	r3, [pc, #152]	; (80081d4 <vTaskSwitchContext+0xa0>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008142:	4b25      	ldr	r3, [pc, #148]	; (80081d8 <vTaskSwitchContext+0xa4>)
 8008144:	2201      	movs	r2, #1
 8008146:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008148:	e03f      	b.n	80081ca <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800814a:	4b23      	ldr	r3, [pc, #140]	; (80081d8 <vTaskSwitchContext+0xa4>)
 800814c:	2200      	movs	r2, #0
 800814e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008150:	4b22      	ldr	r3, [pc, #136]	; (80081dc <vTaskSwitchContext+0xa8>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	fab3 f383 	clz	r3, r3
 800815c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800815e:	7afb      	ldrb	r3, [r7, #11]
 8008160:	f1c3 031f 	rsb	r3, r3, #31
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	491e      	ldr	r1, [pc, #120]	; (80081e0 <vTaskSwitchContext+0xac>)
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	440b      	add	r3, r1
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10a      	bne.n	8008190 <vTaskSwitchContext+0x5c>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	607b      	str	r3, [r7, #4]
}
 800818c:	bf00      	nop
 800818e:	e7fe      	b.n	800818e <vTaskSwitchContext+0x5a>
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4a11      	ldr	r2, [pc, #68]	; (80081e0 <vTaskSwitchContext+0xac>)
 800819c:	4413      	add	r3, r2
 800819e:	613b      	str	r3, [r7, #16]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	605a      	str	r2, [r3, #4]
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	3308      	adds	r3, #8
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d104      	bne.n	80081c0 <vTaskSwitchContext+0x8c>
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	4a07      	ldr	r2, [pc, #28]	; (80081e4 <vTaskSwitchContext+0xb0>)
 80081c8:	6013      	str	r3, [r2, #0]
}
 80081ca:	bf00      	nop
 80081cc:	371c      	adds	r7, #28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr
 80081d4:	20001474 	.word	0x20001474
 80081d8:	20001460 	.word	0x20001460
 80081dc:	20001454 	.word	0x20001454
 80081e0:	20001350 	.word	0x20001350
 80081e4:	2000134c 	.word	0x2000134c

080081e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	60fb      	str	r3, [r7, #12]
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800820e:	4b07      	ldr	r3, [pc, #28]	; (800822c <vTaskPlaceOnEventList+0x44>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3318      	adds	r3, #24
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fe fe9c 	bl	8006f54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800821c:	2101      	movs	r1, #1
 800821e:	6838      	ldr	r0, [r7, #0]
 8008220:	f000 fb0a 	bl	8008838 <prvAddCurrentTaskToDelayedList>
}
 8008224:	bf00      	nop
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	2000134c 	.word	0x2000134c

08008230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10a      	bne.n	800825c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	60fb      	str	r3, [r7, #12]
}
 8008258:	bf00      	nop
 800825a:	e7fe      	b.n	800825a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	3318      	adds	r3, #24
 8008260:	4618      	mov	r0, r3
 8008262:	f7fe feaf 	bl	8006fc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008266:	4b1d      	ldr	r3, [pc, #116]	; (80082dc <xTaskRemoveFromEventList+0xac>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d11c      	bne.n	80082a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	3304      	adds	r3, #4
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe fea6 	bl	8006fc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827c:	2201      	movs	r2, #1
 800827e:	409a      	lsls	r2, r3
 8008280:	4b17      	ldr	r3, [pc, #92]	; (80082e0 <xTaskRemoveFromEventList+0xb0>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4313      	orrs	r3, r2
 8008286:	4a16      	ldr	r2, [pc, #88]	; (80082e0 <xTaskRemoveFromEventList+0xb0>)
 8008288:	6013      	str	r3, [r2, #0]
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828e:	4613      	mov	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4a13      	ldr	r2, [pc, #76]	; (80082e4 <xTaskRemoveFromEventList+0xb4>)
 8008298:	441a      	add	r2, r3
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	3304      	adds	r3, #4
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f7fe fe34 	bl	8006f0e <vListInsertEnd>
 80082a6:	e005      	b.n	80082b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	3318      	adds	r3, #24
 80082ac:	4619      	mov	r1, r3
 80082ae:	480e      	ldr	r0, [pc, #56]	; (80082e8 <xTaskRemoveFromEventList+0xb8>)
 80082b0:	f7fe fe2d 	bl	8006f0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b8:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <xTaskRemoveFromEventList+0xbc>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082be:	429a      	cmp	r2, r3
 80082c0:	d905      	bls.n	80082ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082c2:	2301      	movs	r3, #1
 80082c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80082c6:	4b0a      	ldr	r3, [pc, #40]	; (80082f0 <xTaskRemoveFromEventList+0xc0>)
 80082c8:	2201      	movs	r2, #1
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	e001      	b.n	80082d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80082d2:	697b      	ldr	r3, [r7, #20]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20001474 	.word	0x20001474
 80082e0:	20001454 	.word	0x20001454
 80082e4:	20001350 	.word	0x20001350
 80082e8:	2000140c 	.word	0x2000140c
 80082ec:	2000134c 	.word	0x2000134c
 80082f0:	20001460 	.word	0x20001460

080082f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082fc:	4b06      	ldr	r3, [pc, #24]	; (8008318 <vTaskInternalSetTimeOutState+0x24>)
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008304:	4b05      	ldr	r3, [pc, #20]	; (800831c <vTaskInternalSetTimeOutState+0x28>)
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	605a      	str	r2, [r3, #4]
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	20001464 	.word	0x20001464
 800831c:	20001450 	.word	0x20001450

08008320 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	613b      	str	r3, [r7, #16]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10a      	bne.n	8008362 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	60fb      	str	r3, [r7, #12]
}
 800835e:	bf00      	nop
 8008360:	e7fe      	b.n	8008360 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008362:	f000 fbc3 	bl	8008aec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008366:	4b1d      	ldr	r3, [pc, #116]	; (80083dc <xTaskCheckForTimeOut+0xbc>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800837e:	d102      	bne.n	8008386 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008380:	2300      	movs	r3, #0
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e023      	b.n	80083ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	4b15      	ldr	r3, [pc, #84]	; (80083e0 <xTaskCheckForTimeOut+0xc0>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d007      	beq.n	80083a2 <xTaskCheckForTimeOut+0x82>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	429a      	cmp	r2, r3
 800839a:	d302      	bcc.n	80083a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800839c:	2301      	movs	r3, #1
 800839e:	61fb      	str	r3, [r7, #28]
 80083a0:	e015      	b.n	80083ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d20b      	bcs.n	80083c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	1ad2      	subs	r2, r2, r3
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff ff9b 	bl	80082f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083be:	2300      	movs	r3, #0
 80083c0:	61fb      	str	r3, [r7, #28]
 80083c2:	e004      	b.n	80083ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083ca:	2301      	movs	r3, #1
 80083cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083ce:	f000 fbbd 	bl	8008b4c <vPortExitCritical>

	return xReturn;
 80083d2:	69fb      	ldr	r3, [r7, #28]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3720      	adds	r7, #32
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20001450 	.word	0x20001450
 80083e0:	20001464 	.word	0x20001464

080083e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80083e4:	b480      	push	{r7}
 80083e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80083e8:	4b03      	ldr	r3, [pc, #12]	; (80083f8 <vTaskMissedYield+0x14>)
 80083ea:	2201      	movs	r2, #1
 80083ec:	601a      	str	r2, [r3, #0]
}
 80083ee:	bf00      	nop
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bc80      	pop	{r7}
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	20001460 	.word	0x20001460

080083fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008404:	f000 f852 	bl	80084ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008408:	4b06      	ldr	r3, [pc, #24]	; (8008424 <prvIdleTask+0x28>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d9f9      	bls.n	8008404 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008410:	4b05      	ldr	r3, [pc, #20]	; (8008428 <prvIdleTask+0x2c>)
 8008412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008420:	e7f0      	b.n	8008404 <prvIdleTask+0x8>
 8008422:	bf00      	nop
 8008424:	20001350 	.word	0x20001350
 8008428:	e000ed04 	.word	0xe000ed04

0800842c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008432:	2300      	movs	r3, #0
 8008434:	607b      	str	r3, [r7, #4]
 8008436:	e00c      	b.n	8008452 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4a12      	ldr	r2, [pc, #72]	; (800848c <prvInitialiseTaskLists+0x60>)
 8008444:	4413      	add	r3, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fd36 	bl	8006eb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3301      	adds	r3, #1
 8008450:	607b      	str	r3, [r7, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b06      	cmp	r3, #6
 8008456:	d9ef      	bls.n	8008438 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008458:	480d      	ldr	r0, [pc, #52]	; (8008490 <prvInitialiseTaskLists+0x64>)
 800845a:	f7fe fd2d 	bl	8006eb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800845e:	480d      	ldr	r0, [pc, #52]	; (8008494 <prvInitialiseTaskLists+0x68>)
 8008460:	f7fe fd2a 	bl	8006eb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008464:	480c      	ldr	r0, [pc, #48]	; (8008498 <prvInitialiseTaskLists+0x6c>)
 8008466:	f7fe fd27 	bl	8006eb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800846a:	480c      	ldr	r0, [pc, #48]	; (800849c <prvInitialiseTaskLists+0x70>)
 800846c:	f7fe fd24 	bl	8006eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008470:	480b      	ldr	r0, [pc, #44]	; (80084a0 <prvInitialiseTaskLists+0x74>)
 8008472:	f7fe fd21 	bl	8006eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008476:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <prvInitialiseTaskLists+0x78>)
 8008478:	4a05      	ldr	r2, [pc, #20]	; (8008490 <prvInitialiseTaskLists+0x64>)
 800847a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800847c:	4b0a      	ldr	r3, [pc, #40]	; (80084a8 <prvInitialiseTaskLists+0x7c>)
 800847e:	4a05      	ldr	r2, [pc, #20]	; (8008494 <prvInitialiseTaskLists+0x68>)
 8008480:	601a      	str	r2, [r3, #0]
}
 8008482:	bf00      	nop
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20001350 	.word	0x20001350
 8008490:	200013dc 	.word	0x200013dc
 8008494:	200013f0 	.word	0x200013f0
 8008498:	2000140c 	.word	0x2000140c
 800849c:	20001420 	.word	0x20001420
 80084a0:	20001438 	.word	0x20001438
 80084a4:	20001404 	.word	0x20001404
 80084a8:	20001408 	.word	0x20001408

080084ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084b2:	e019      	b.n	80084e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084b4:	f000 fb1a 	bl	8008aec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80084b8:	4b10      	ldr	r3, [pc, #64]	; (80084fc <prvCheckTasksWaitingTermination+0x50>)
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe fd7d 	bl	8006fc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084ca:	4b0d      	ldr	r3, [pc, #52]	; (8008500 <prvCheckTasksWaitingTermination+0x54>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	4a0b      	ldr	r2, [pc, #44]	; (8008500 <prvCheckTasksWaitingTermination+0x54>)
 80084d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084d4:	4b0b      	ldr	r3, [pc, #44]	; (8008504 <prvCheckTasksWaitingTermination+0x58>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3b01      	subs	r3, #1
 80084da:	4a0a      	ldr	r2, [pc, #40]	; (8008504 <prvCheckTasksWaitingTermination+0x58>)
 80084dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084de:	f000 fb35 	bl	8008b4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f810 	bl	8008508 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084e8:	4b06      	ldr	r3, [pc, #24]	; (8008504 <prvCheckTasksWaitingTermination+0x58>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e1      	bne.n	80084b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084f0:	bf00      	nop
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20001420 	.word	0x20001420
 8008500:	2000144c 	.word	0x2000144c
 8008504:	20001434 	.word	0x20001434

08008508 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008516:	2b00      	cmp	r3, #0
 8008518:	d108      	bne.n	800852c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fca8 	bl	8008e74 <vPortFree>
				vPortFree( pxTCB );
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fca5 	bl	8008e74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800852a:	e018      	b.n	800855e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008532:	2b01      	cmp	r3, #1
 8008534:	d103      	bne.n	800853e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fc9c 	bl	8008e74 <vPortFree>
	}
 800853c:	e00f      	b.n	800855e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008544:	2b02      	cmp	r3, #2
 8008546:	d00a      	beq.n	800855e <prvDeleteTCB+0x56>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	60fb      	str	r3, [r7, #12]
}
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <prvDeleteTCB+0x54>
	}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800856e:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <prvResetNextTaskUnblockTime+0x40>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <prvResetNextTaskUnblockTime+0x14>
 8008578:	2301      	movs	r3, #1
 800857a:	e000      	b.n	800857e <prvResetNextTaskUnblockTime+0x16>
 800857c:	2300      	movs	r3, #0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d004      	beq.n	800858c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008582:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <prvResetNextTaskUnblockTime+0x44>)
 8008584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008588:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800858a:	e008      	b.n	800859e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800858c:	4b06      	ldr	r3, [pc, #24]	; (80085a8 <prvResetNextTaskUnblockTime+0x40>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	4a04      	ldr	r2, [pc, #16]	; (80085ac <prvResetNextTaskUnblockTime+0x44>)
 800859c:	6013      	str	r3, [r2, #0]
}
 800859e:	bf00      	nop
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bc80      	pop	{r7}
 80085a6:	4770      	bx	lr
 80085a8:	20001404 	.word	0x20001404
 80085ac:	2000146c 	.word	0x2000146c

080085b0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80085b6:	4b04      	ldr	r3, [pc, #16]	; (80085c8 <xTaskGetCurrentTaskHandle+0x18>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	607b      	str	r3, [r7, #4]

		return xReturn;
 80085bc:	687b      	ldr	r3, [r7, #4]
	}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bc80      	pop	{r7}
 80085c6:	4770      	bx	lr
 80085c8:	2000134c 	.word	0x2000134c

080085cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085d2:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <xTaskGetSchedulerState+0x34>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d102      	bne.n	80085e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085da:	2301      	movs	r3, #1
 80085dc:	607b      	str	r3, [r7, #4]
 80085de:	e008      	b.n	80085f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085e0:	4b08      	ldr	r3, [pc, #32]	; (8008604 <xTaskGetSchedulerState+0x38>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d102      	bne.n	80085ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085e8:	2302      	movs	r3, #2
 80085ea:	607b      	str	r3, [r7, #4]
 80085ec:	e001      	b.n	80085f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085ee:	2300      	movs	r3, #0
 80085f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085f2:	687b      	ldr	r3, [r7, #4]
	}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc80      	pop	{r7}
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	20001458 	.word	0x20001458
 8008604:	20001474 	.word	0x20001474

08008608 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008614:	2300      	movs	r3, #0
 8008616:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d06e      	beq.n	80086fc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800861e:	4b3a      	ldr	r3, [pc, #232]	; (8008708 <xTaskPriorityDisinherit+0x100>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	429a      	cmp	r2, r3
 8008626:	d00a      	beq.n	800863e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	60fb      	str	r3, [r7, #12]
}
 800863a:	bf00      	nop
 800863c:	e7fe      	b.n	800863c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10a      	bne.n	800865c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	60bb      	str	r3, [r7, #8]
}
 8008658:	bf00      	nop
 800865a:	e7fe      	b.n	800865a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008660:	1e5a      	subs	r2, r3, #1
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866e:	429a      	cmp	r2, r3
 8008670:	d044      	beq.n	80086fc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008676:	2b00      	cmp	r3, #0
 8008678:	d140      	bne.n	80086fc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	3304      	adds	r3, #4
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe fca0 	bl	8006fc4 <uxListRemove>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d115      	bne.n	80086b6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868e:	491f      	ldr	r1, [pc, #124]	; (800870c <xTaskPriorityDisinherit+0x104>)
 8008690:	4613      	mov	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	440b      	add	r3, r1
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10a      	bne.n	80086b6 <xTaskPriorityDisinherit+0xae>
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	2201      	movs	r2, #1
 80086a6:	fa02 f303 	lsl.w	r3, r2, r3
 80086aa:	43da      	mvns	r2, r3
 80086ac:	4b18      	ldr	r3, [pc, #96]	; (8008710 <xTaskPriorityDisinherit+0x108>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4013      	ands	r3, r2
 80086b2:	4a17      	ldr	r2, [pc, #92]	; (8008710 <xTaskPriorityDisinherit+0x108>)
 80086b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c2:	f1c3 0207 	rsb	r2, r3, #7
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ce:	2201      	movs	r2, #1
 80086d0:	409a      	lsls	r2, r3
 80086d2:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <xTaskPriorityDisinherit+0x108>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	4a0d      	ldr	r2, [pc, #52]	; (8008710 <xTaskPriorityDisinherit+0x108>)
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4a08      	ldr	r2, [pc, #32]	; (800870c <xTaskPriorityDisinherit+0x104>)
 80086ea:	441a      	add	r2, r3
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4619      	mov	r1, r3
 80086f2:	4610      	mov	r0, r2
 80086f4:	f7fe fc0b 	bl	8006f0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086f8:	2301      	movs	r3, #1
 80086fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086fc:	697b      	ldr	r3, [r7, #20]
	}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	2000134c 	.word	0x2000134c
 800870c:	20001350 	.word	0x20001350
 8008710:	20001454 	.word	0x20001454

08008714 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08a      	sub	sp, #40	; 0x28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10a      	bne.n	800873a <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	61bb      	str	r3, [r7, #24]
}
 8008736:	bf00      	nop
 8008738:	e7fe      	b.n	8008738 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800873a:	f000 fa99 	bl	8008c70 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8008742:	f3ef 8211 	mrs	r2, BASEPRI
 8008746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	617a      	str	r2, [r7, #20]
 8008758:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800875a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800875c:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008764:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	2202      	movs	r2, #2
 800876a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008778:	7ffb      	ldrb	r3, [r7, #31]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d146      	bne.n	800880c <vTaskNotifyGiveFromISR+0xf8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	60fb      	str	r3, [r7, #12]
}
 8008798:	bf00      	nop
 800879a:	e7fe      	b.n	800879a <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800879c:	4b20      	ldr	r3, [pc, #128]	; (8008820 <vTaskNotifyGiveFromISR+0x10c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d11c      	bne.n	80087de <vTaskNotifyGiveFromISR+0xca>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	3304      	adds	r3, #4
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe fc0b 	bl	8006fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b2:	2201      	movs	r2, #1
 80087b4:	409a      	lsls	r2, r3
 80087b6:	4b1b      	ldr	r3, [pc, #108]	; (8008824 <vTaskNotifyGiveFromISR+0x110>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	4a19      	ldr	r2, [pc, #100]	; (8008824 <vTaskNotifyGiveFromISR+0x110>)
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4a16      	ldr	r2, [pc, #88]	; (8008828 <vTaskNotifyGiveFromISR+0x114>)
 80087ce:	441a      	add	r2, r3
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	3304      	adds	r3, #4
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	f7fe fb99 	bl	8006f0e <vListInsertEnd>
 80087dc:	e005      	b.n	80087ea <vTaskNotifyGiveFromISR+0xd6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	3318      	adds	r3, #24
 80087e2:	4619      	mov	r1, r3
 80087e4:	4811      	ldr	r0, [pc, #68]	; (800882c <vTaskNotifyGiveFromISR+0x118>)
 80087e6:	f7fe fb92 	bl	8006f0e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ee:	4b10      	ldr	r3, [pc, #64]	; (8008830 <vTaskNotifyGiveFromISR+0x11c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d909      	bls.n	800880c <vTaskNotifyGiveFromISR+0xf8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <vTaskNotifyGiveFromISR+0xf2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2201      	movs	r2, #1
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e002      	b.n	800880c <vTaskNotifyGiveFromISR+0xf8>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8008806:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <vTaskNotifyGiveFromISR+0x120>)
 8008808:	2201      	movs	r2, #1
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	f383 8811 	msr	BASEPRI, r3
}
 8008816:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8008818:	bf00      	nop
 800881a:	3728      	adds	r7, #40	; 0x28
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20001474 	.word	0x20001474
 8008824:	20001454 	.word	0x20001454
 8008828:	20001350 	.word	0x20001350
 800882c:	2000140c 	.word	0x2000140c
 8008830:	2000134c 	.word	0x2000134c
 8008834:	20001460 	.word	0x20001460

08008838 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008842:	4b29      	ldr	r3, [pc, #164]	; (80088e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008848:	4b28      	ldr	r3, [pc, #160]	; (80088ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3304      	adds	r3, #4
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fbb8 	bl	8006fc4 <uxListRemove>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10b      	bne.n	8008872 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800885a:	4b24      	ldr	r3, [pc, #144]	; (80088ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	2201      	movs	r2, #1
 8008862:	fa02 f303 	lsl.w	r3, r2, r3
 8008866:	43da      	mvns	r2, r3
 8008868:	4b21      	ldr	r3, [pc, #132]	; (80088f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4013      	ands	r3, r2
 800886e:	4a20      	ldr	r2, [pc, #128]	; (80088f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008870:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008878:	d10a      	bne.n	8008890 <prvAddCurrentTaskToDelayedList+0x58>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d007      	beq.n	8008890 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008880:	4b1a      	ldr	r3, [pc, #104]	; (80088ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3304      	adds	r3, #4
 8008886:	4619      	mov	r1, r3
 8008888:	481a      	ldr	r0, [pc, #104]	; (80088f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800888a:	f7fe fb40 	bl	8006f0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800888e:	e026      	b.n	80088de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4413      	add	r3, r2
 8008896:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008898:	4b14      	ldr	r3, [pc, #80]	; (80088ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d209      	bcs.n	80088bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088a8:	4b13      	ldr	r3, [pc, #76]	; (80088f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3304      	adds	r3, #4
 80088b2:	4619      	mov	r1, r3
 80088b4:	4610      	mov	r0, r2
 80088b6:	f7fe fb4d 	bl	8006f54 <vListInsert>
}
 80088ba:	e010      	b.n	80088de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088bc:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	4b0a      	ldr	r3, [pc, #40]	; (80088ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3304      	adds	r3, #4
 80088c6:	4619      	mov	r1, r3
 80088c8:	4610      	mov	r0, r2
 80088ca:	f7fe fb43 	bl	8006f54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088ce:	4b0c      	ldr	r3, [pc, #48]	; (8008900 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d202      	bcs.n	80088de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80088d8:	4a09      	ldr	r2, [pc, #36]	; (8008900 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	6013      	str	r3, [r2, #0]
}
 80088de:	bf00      	nop
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20001450 	.word	0x20001450
 80088ec:	2000134c 	.word	0x2000134c
 80088f0:	20001454 	.word	0x20001454
 80088f4:	20001438 	.word	0x20001438
 80088f8:	20001408 	.word	0x20001408
 80088fc:	20001404 	.word	0x20001404
 8008900:	2000146c 	.word	0x2000146c

08008904 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3b04      	subs	r3, #4
 8008914:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800891c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3b04      	subs	r3, #4
 8008922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f023 0201 	bic.w	r2, r3, #1
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3b04      	subs	r3, #4
 8008932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008934:	4a08      	ldr	r2, [pc, #32]	; (8008958 <pxPortInitialiseStack+0x54>)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	3b14      	subs	r3, #20
 800893e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3b20      	subs	r3, #32
 800894a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800894c:	68fb      	ldr	r3, [r7, #12]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	bc80      	pop	{r7}
 8008956:	4770      	bx	lr
 8008958:	0800895d 	.word	0x0800895d

0800895c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008962:	2300      	movs	r3, #0
 8008964:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008966:	4b12      	ldr	r3, [pc, #72]	; (80089b0 <prvTaskExitError+0x54>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800896e:	d00a      	beq.n	8008986 <prvTaskExitError+0x2a>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	60fb      	str	r3, [r7, #12]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <prvTaskExitError+0x28>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	60bb      	str	r3, [r7, #8]
}
 8008998:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800899a:	bf00      	nop
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0fc      	beq.n	800899c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bc80      	pop	{r7}
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	200006ac 	.word	0x200006ac
	...

080089c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089c0:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <pxCurrentTCBConst2>)
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	6808      	ldr	r0, [r1, #0]
 80089c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80089ca:	f380 8809 	msr	PSP, r0
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f04f 0000 	mov.w	r0, #0
 80089d6:	f380 8811 	msr	BASEPRI, r0
 80089da:	f04e 0e0d 	orr.w	lr, lr, #13
 80089de:	4770      	bx	lr

080089e0 <pxCurrentTCBConst2>:
 80089e0:	2000134c 	.word	0x2000134c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop

080089e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80089e8:	4806      	ldr	r0, [pc, #24]	; (8008a04 <prvPortStartFirstTask+0x1c>)
 80089ea:	6800      	ldr	r0, [r0, #0]
 80089ec:	6800      	ldr	r0, [r0, #0]
 80089ee:	f380 8808 	msr	MSP, r0
 80089f2:	b662      	cpsie	i
 80089f4:	b661      	cpsie	f
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	df00      	svc	0
 8008a00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a02:	bf00      	nop
 8008a04:	e000ed08 	.word	0xe000ed08

08008a08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a0e:	4b32      	ldr	r3, [pc, #200]	; (8008ad8 <xPortStartScheduler+0xd0>)
 8008a10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	22ff      	movs	r2, #255	; 0xff
 8008a1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a28:	78fb      	ldrb	r3, [r7, #3]
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	4b2a      	ldr	r3, [pc, #168]	; (8008adc <xPortStartScheduler+0xd4>)
 8008a34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a36:	4b2a      	ldr	r3, [pc, #168]	; (8008ae0 <xPortStartScheduler+0xd8>)
 8008a38:	2207      	movs	r2, #7
 8008a3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a3c:	e009      	b.n	8008a52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a3e:	4b28      	ldr	r3, [pc, #160]	; (8008ae0 <xPortStartScheduler+0xd8>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	4a26      	ldr	r2, [pc, #152]	; (8008ae0 <xPortStartScheduler+0xd8>)
 8008a46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a52:	78fb      	ldrb	r3, [r7, #3]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a5a:	2b80      	cmp	r3, #128	; 0x80
 8008a5c:	d0ef      	beq.n	8008a3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a5e:	4b20      	ldr	r3, [pc, #128]	; (8008ae0 <xPortStartScheduler+0xd8>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f1c3 0307 	rsb	r3, r3, #7
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	d00a      	beq.n	8008a80 <xPortStartScheduler+0x78>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	60bb      	str	r3, [r7, #8]
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a80:	4b17      	ldr	r3, [pc, #92]	; (8008ae0 <xPortStartScheduler+0xd8>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	021b      	lsls	r3, r3, #8
 8008a86:	4a16      	ldr	r2, [pc, #88]	; (8008ae0 <xPortStartScheduler+0xd8>)
 8008a88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a8a:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <xPortStartScheduler+0xd8>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a92:	4a13      	ldr	r2, [pc, #76]	; (8008ae0 <xPortStartScheduler+0xd8>)
 8008a94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a9e:	4b11      	ldr	r3, [pc, #68]	; (8008ae4 <xPortStartScheduler+0xdc>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a10      	ldr	r2, [pc, #64]	; (8008ae4 <xPortStartScheduler+0xdc>)
 8008aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008aa8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <xPortStartScheduler+0xdc>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a0d      	ldr	r2, [pc, #52]	; (8008ae4 <xPortStartScheduler+0xdc>)
 8008ab0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ab4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ab6:	f000 f8b9 	bl	8008c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008aba:	4b0b      	ldr	r3, [pc, #44]	; (8008ae8 <xPortStartScheduler+0xe0>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ac0:	f7ff ff92 	bl	80089e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ac4:	f7ff fb36 	bl	8008134 <vTaskSwitchContext>
	prvTaskExitError();
 8008ac8:	f7ff ff48 	bl	800895c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	e000e400 	.word	0xe000e400
 8008adc:	20001478 	.word	0x20001478
 8008ae0:	2000147c 	.word	0x2000147c
 8008ae4:	e000ed20 	.word	0xe000ed20
 8008ae8:	200006ac 	.word	0x200006ac

08008aec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	607b      	str	r3, [r7, #4]
}
 8008b04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b06:	4b0f      	ldr	r3, [pc, #60]	; (8008b44 <vPortEnterCritical+0x58>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	4a0d      	ldr	r2, [pc, #52]	; (8008b44 <vPortEnterCritical+0x58>)
 8008b0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b10:	4b0c      	ldr	r3, [pc, #48]	; (8008b44 <vPortEnterCritical+0x58>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d10f      	bne.n	8008b38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b18:	4b0b      	ldr	r3, [pc, #44]	; (8008b48 <vPortEnterCritical+0x5c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00a      	beq.n	8008b38 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	603b      	str	r3, [r7, #0]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <vPortEnterCritical+0x4a>
	}
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	200006ac 	.word	0x200006ac
 8008b48:	e000ed04 	.word	0xe000ed04

08008b4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b52:	4b11      	ldr	r3, [pc, #68]	; (8008b98 <vPortExitCritical+0x4c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10a      	bne.n	8008b70 <vPortExitCritical+0x24>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	607b      	str	r3, [r7, #4]
}
 8008b6c:	bf00      	nop
 8008b6e:	e7fe      	b.n	8008b6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b70:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <vPortExitCritical+0x4c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	4a08      	ldr	r2, [pc, #32]	; (8008b98 <vPortExitCritical+0x4c>)
 8008b78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b7a:	4b07      	ldr	r3, [pc, #28]	; (8008b98 <vPortExitCritical+0x4c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d105      	bne.n	8008b8e <vPortExitCritical+0x42>
 8008b82:	2300      	movs	r3, #0
 8008b84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	f383 8811 	msr	BASEPRI, r3
}
 8008b8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b8e:	bf00      	nop
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bc80      	pop	{r7}
 8008b96:	4770      	bx	lr
 8008b98:	200006ac 	.word	0x200006ac
 8008b9c:	00000000 	.word	0x00000000

08008ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ba0:	f3ef 8009 	mrs	r0, PSP
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	4b0d      	ldr	r3, [pc, #52]	; (8008be0 <pxCurrentTCBConst>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008bb0:	6010      	str	r0, [r2, #0]
 8008bb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008bb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bba:	f380 8811 	msr	BASEPRI, r0
 8008bbe:	f7ff fab9 	bl	8008134 <vTaskSwitchContext>
 8008bc2:	f04f 0000 	mov.w	r0, #0
 8008bc6:	f380 8811 	msr	BASEPRI, r0
 8008bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008bce:	6819      	ldr	r1, [r3, #0]
 8008bd0:	6808      	ldr	r0, [r1, #0]
 8008bd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008bd6:	f380 8809 	msr	PSP, r0
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	4770      	bx	lr

08008be0 <pxCurrentTCBConst>:
 8008be0:	2000134c 	.word	0x2000134c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop

08008be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	607b      	str	r3, [r7, #4]
}
 8008c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c02:	f7ff f9d9 	bl	8007fb8 <xTaskIncrementTick>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d003      	beq.n	8008c14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <SysTick_Handler+0x40>)
 8008c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	2300      	movs	r3, #0
 8008c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	f383 8811 	msr	BASEPRI, r3
}
 8008c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c20:	bf00      	nop
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	e000ed04 	.word	0xe000ed04

08008c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <vPortSetupTimerInterrupt+0x30>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c36:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <vPortSetupTimerInterrupt+0x34>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c3c:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <vPortSetupTimerInterrupt+0x38>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a09      	ldr	r2, [pc, #36]	; (8008c68 <vPortSetupTimerInterrupt+0x3c>)
 8008c42:	fba2 2303 	umull	r2, r3, r2, r3
 8008c46:	099b      	lsrs	r3, r3, #6
 8008c48:	4a08      	ldr	r2, [pc, #32]	; (8008c6c <vPortSetupTimerInterrupt+0x40>)
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c4e:	4b03      	ldr	r3, [pc, #12]	; (8008c5c <vPortSetupTimerInterrupt+0x30>)
 8008c50:	2207      	movs	r2, #7
 8008c52:	601a      	str	r2, [r3, #0]
}
 8008c54:	bf00      	nop
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bc80      	pop	{r7}
 8008c5a:	4770      	bx	lr
 8008c5c:	e000e010 	.word	0xe000e010
 8008c60:	e000e018 	.word	0xe000e018
 8008c64:	20000008 	.word	0x20000008
 8008c68:	10624dd3 	.word	0x10624dd3
 8008c6c:	e000e014 	.word	0xe000e014

08008c70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c76:	f3ef 8305 	mrs	r3, IPSR
 8008c7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b0f      	cmp	r3, #15
 8008c80:	d914      	bls.n	8008cac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c82:	4a16      	ldr	r2, [pc, #88]	; (8008cdc <vPortValidateInterruptPriority+0x6c>)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4413      	add	r3, r2
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c8c:	4b14      	ldr	r3, [pc, #80]	; (8008ce0 <vPortValidateInterruptPriority+0x70>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	7afa      	ldrb	r2, [r7, #11]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d20a      	bcs.n	8008cac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	607b      	str	r3, [r7, #4]
}
 8008ca8:	bf00      	nop
 8008caa:	e7fe      	b.n	8008caa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cac:	4b0d      	ldr	r3, [pc, #52]	; (8008ce4 <vPortValidateInterruptPriority+0x74>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008cb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <vPortValidateInterruptPriority+0x78>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d90a      	bls.n	8008cd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	603b      	str	r3, [r7, #0]
}
 8008cce:	bf00      	nop
 8008cd0:	e7fe      	b.n	8008cd0 <vPortValidateInterruptPriority+0x60>
	}
 8008cd2:	bf00      	nop
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bc80      	pop	{r7}
 8008cda:	4770      	bx	lr
 8008cdc:	e000e3f0 	.word	0xe000e3f0
 8008ce0:	20001478 	.word	0x20001478
 8008ce4:	e000ed0c 	.word	0xe000ed0c
 8008ce8:	2000147c 	.word	0x2000147c

08008cec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08a      	sub	sp, #40	; 0x28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cf8:	f7ff f8b4 	bl	8007e64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008cfc:	4b58      	ldr	r3, [pc, #352]	; (8008e60 <pvPortMalloc+0x174>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d04:	f000 f910 	bl	8008f28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d08:	4b56      	ldr	r3, [pc, #344]	; (8008e64 <pvPortMalloc+0x178>)
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f040 808e 	bne.w	8008e32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01d      	beq.n	8008d58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d1c:	2208      	movs	r2, #8
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4413      	add	r3, r2
 8008d22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d014      	beq.n	8008d58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f023 0307 	bic.w	r3, r3, #7
 8008d34:	3308      	adds	r3, #8
 8008d36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f003 0307 	and.w	r3, r3, #7
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <pvPortMalloc+0x6c>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	617b      	str	r3, [r7, #20]
}
 8008d54:	bf00      	nop
 8008d56:	e7fe      	b.n	8008d56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d069      	beq.n	8008e32 <pvPortMalloc+0x146>
 8008d5e:	4b42      	ldr	r3, [pc, #264]	; (8008e68 <pvPortMalloc+0x17c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d864      	bhi.n	8008e32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d68:	4b40      	ldr	r3, [pc, #256]	; (8008e6c <pvPortMalloc+0x180>)
 8008d6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d6c:	4b3f      	ldr	r3, [pc, #252]	; (8008e6c <pvPortMalloc+0x180>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d72:	e004      	b.n	8008d7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d903      	bls.n	8008d90 <pvPortMalloc+0xa4>
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1f1      	bne.n	8008d74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d90:	4b33      	ldr	r3, [pc, #204]	; (8008e60 <pvPortMalloc+0x174>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d04b      	beq.n	8008e32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2208      	movs	r2, #8
 8008da0:	4413      	add	r3, r2
 8008da2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	6a3b      	ldr	r3, [r7, #32]
 8008daa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	1ad2      	subs	r2, r2, r3
 8008db4:	2308      	movs	r3, #8
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d91f      	bls.n	8008dfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	f003 0307 	and.w	r3, r3, #7
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00a      	beq.n	8008de4 <pvPortMalloc+0xf8>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	613b      	str	r3, [r7, #16]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	1ad2      	subs	r2, r2, r3
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008df6:	69b8      	ldr	r0, [r7, #24]
 8008df8:	f000 f8f8 	bl	8008fec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008dfc:	4b1a      	ldr	r3, [pc, #104]	; (8008e68 <pvPortMalloc+0x17c>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	4a18      	ldr	r2, [pc, #96]	; (8008e68 <pvPortMalloc+0x17c>)
 8008e08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e0a:	4b17      	ldr	r3, [pc, #92]	; (8008e68 <pvPortMalloc+0x17c>)
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b18      	ldr	r3, [pc, #96]	; (8008e70 <pvPortMalloc+0x184>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d203      	bcs.n	8008e1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e16:	4b14      	ldr	r3, [pc, #80]	; (8008e68 <pvPortMalloc+0x17c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a15      	ldr	r2, [pc, #84]	; (8008e70 <pvPortMalloc+0x184>)
 8008e1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	4b10      	ldr	r3, [pc, #64]	; (8008e64 <pvPortMalloc+0x178>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	431a      	orrs	r2, r3
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	2200      	movs	r2, #0
 8008e30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e32:	f7ff f825 	bl	8007e80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f003 0307 	and.w	r3, r3, #7
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00a      	beq.n	8008e56 <pvPortMalloc+0x16a>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	60fb      	str	r3, [r7, #12]
}
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <pvPortMalloc+0x168>
	return pvReturn;
 8008e56:	69fb      	ldr	r3, [r7, #28]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3728      	adds	r7, #40	; 0x28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20002088 	.word	0x20002088
 8008e64:	20002094 	.word	0x20002094
 8008e68:	2000208c 	.word	0x2000208c
 8008e6c:	20002080 	.word	0x20002080
 8008e70:	20002090 	.word	0x20002090

08008e74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d048      	beq.n	8008f18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e86:	2308      	movs	r3, #8
 8008e88:	425b      	negs	r3, r3
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	4b21      	ldr	r3, [pc, #132]	; (8008f20 <vPortFree+0xac>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10a      	bne.n	8008eb8 <vPortFree+0x44>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	60fb      	str	r3, [r7, #12]
}
 8008eb4:	bf00      	nop
 8008eb6:	e7fe      	b.n	8008eb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00a      	beq.n	8008ed6 <vPortFree+0x62>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	60bb      	str	r3, [r7, #8]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	4b11      	ldr	r3, [pc, #68]	; (8008f20 <vPortFree+0xac>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4013      	ands	r3, r2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d019      	beq.n	8008f18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d115      	bne.n	8008f18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <vPortFree+0xac>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	401a      	ands	r2, r3
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008efc:	f7fe ffb2 	bl	8007e64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	4b07      	ldr	r3, [pc, #28]	; (8008f24 <vPortFree+0xb0>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4413      	add	r3, r2
 8008f0a:	4a06      	ldr	r2, [pc, #24]	; (8008f24 <vPortFree+0xb0>)
 8008f0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f0e:	6938      	ldr	r0, [r7, #16]
 8008f10:	f000 f86c 	bl	8008fec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f14:	f7fe ffb4 	bl	8007e80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f18:	bf00      	nop
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	20002094 	.word	0x20002094
 8008f24:	2000208c 	.word	0x2000208c

08008f28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008f32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f34:	4b27      	ldr	r3, [pc, #156]	; (8008fd4 <prvHeapInit+0xac>)
 8008f36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f003 0307 	and.w	r3, r3, #7
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00c      	beq.n	8008f5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3307      	adds	r3, #7
 8008f46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f023 0307 	bic.w	r3, r3, #7
 8008f4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	4a1f      	ldr	r2, [pc, #124]	; (8008fd4 <prvHeapInit+0xac>)
 8008f58:	4413      	add	r3, r2
 8008f5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f60:	4a1d      	ldr	r2, [pc, #116]	; (8008fd8 <prvHeapInit+0xb0>)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f66:	4b1c      	ldr	r3, [pc, #112]	; (8008fd8 <prvHeapInit+0xb0>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	4413      	add	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f74:	2208      	movs	r2, #8
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	1a9b      	subs	r3, r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f023 0307 	bic.w	r3, r3, #7
 8008f82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4a15      	ldr	r2, [pc, #84]	; (8008fdc <prvHeapInit+0xb4>)
 8008f88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f8a:	4b14      	ldr	r3, [pc, #80]	; (8008fdc <prvHeapInit+0xb4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f92:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <prvHeapInit+0xb4>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	1ad2      	subs	r2, r2, r3
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fa8:	4b0c      	ldr	r3, [pc, #48]	; (8008fdc <prvHeapInit+0xb4>)
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <prvHeapInit+0xb8>)
 8008fb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	4a09      	ldr	r2, [pc, #36]	; (8008fe4 <prvHeapInit+0xbc>)
 8008fbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fc0:	4b09      	ldr	r3, [pc, #36]	; (8008fe8 <prvHeapInit+0xc0>)
 8008fc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fc6:	601a      	str	r2, [r3, #0]
}
 8008fc8:	bf00      	nop
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bc80      	pop	{r7}
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	20001480 	.word	0x20001480
 8008fd8:	20002080 	.word	0x20002080
 8008fdc:	20002088 	.word	0x20002088
 8008fe0:	20002090 	.word	0x20002090
 8008fe4:	2000208c 	.word	0x2000208c
 8008fe8:	20002094 	.word	0x20002094

08008fec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ff4:	4b27      	ldr	r3, [pc, #156]	; (8009094 <prvInsertBlockIntoFreeList+0xa8>)
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	e002      	b.n	8009000 <prvInsertBlockIntoFreeList+0x14>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	429a      	cmp	r2, r3
 8009008:	d8f7      	bhi.n	8008ffa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	4413      	add	r3, r2
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	d108      	bne.n	800902e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	441a      	add	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	441a      	add	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d118      	bne.n	8009074 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	4b14      	ldr	r3, [pc, #80]	; (8009098 <prvInsertBlockIntoFreeList+0xac>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d00d      	beq.n	800906a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	441a      	add	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	e008      	b.n	800907c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800906a:	4b0b      	ldr	r3, [pc, #44]	; (8009098 <prvInsertBlockIntoFreeList+0xac>)
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	e003      	b.n	800907c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d002      	beq.n	800908a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800908a:	bf00      	nop
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr
 8009094:	20002080 	.word	0x20002080
 8009098:	20002088 	.word	0x20002088

0800909c <_Znwj>:
 800909c:	2801      	cmp	r0, #1
 800909e:	bf38      	it	cc
 80090a0:	2001      	movcc	r0, #1
 80090a2:	b510      	push	{r4, lr}
 80090a4:	4604      	mov	r4, r0
 80090a6:	4620      	mov	r0, r4
 80090a8:	f000 fd34 	bl	8009b14 <malloc>
 80090ac:	b930      	cbnz	r0, 80090bc <_Znwj+0x20>
 80090ae:	f000 f807 	bl	80090c0 <_ZSt15get_new_handlerv>
 80090b2:	b908      	cbnz	r0, 80090b8 <_Znwj+0x1c>
 80090b4:	f000 fce2 	bl	8009a7c <abort>
 80090b8:	4780      	blx	r0
 80090ba:	e7f4      	b.n	80090a6 <_Znwj+0xa>
 80090bc:	bd10      	pop	{r4, pc}
	...

080090c0 <_ZSt15get_new_handlerv>:
 80090c0:	4b02      	ldr	r3, [pc, #8]	; (80090cc <_ZSt15get_new_handlerv+0xc>)
 80090c2:	6818      	ldr	r0, [r3, #0]
 80090c4:	f3bf 8f5b 	dmb	ish
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	20002098 	.word	0x20002098

080090d0 <powf>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	4606      	mov	r6, r0
 80090d4:	460d      	mov	r5, r1
 80090d6:	f000 f87f 	bl	80091d8 <__ieee754_powf>
 80090da:	4b3d      	ldr	r3, [pc, #244]	; (80091d0 <powf+0x100>)
 80090dc:	4604      	mov	r4, r0
 80090de:	f993 3000 	ldrsb.w	r3, [r3]
 80090e2:	3301      	adds	r3, #1
 80090e4:	d00f      	beq.n	8009106 <powf+0x36>
 80090e6:	4629      	mov	r1, r5
 80090e8:	4628      	mov	r0, r5
 80090ea:	f7f7 fb0d 	bl	8000708 <__aeabi_fcmpun>
 80090ee:	b950      	cbnz	r0, 8009106 <powf+0x36>
 80090f0:	4631      	mov	r1, r6
 80090f2:	4630      	mov	r0, r6
 80090f4:	f7f7 fb08 	bl	8000708 <__aeabi_fcmpun>
 80090f8:	2100      	movs	r1, #0
 80090fa:	b130      	cbz	r0, 800910a <powf+0x3a>
 80090fc:	4628      	mov	r0, r5
 80090fe:	f7f7 fad1 	bl	80006a4 <__aeabi_fcmpeq>
 8009102:	2800      	cmp	r0, #0
 8009104:	d161      	bne.n	80091ca <powf+0xfa>
 8009106:	4620      	mov	r0, r4
 8009108:	bd70      	pop	{r4, r5, r6, pc}
 800910a:	4630      	mov	r0, r6
 800910c:	f7f7 faca 	bl	80006a4 <__aeabi_fcmpeq>
 8009110:	b1b0      	cbz	r0, 8009140 <powf+0x70>
 8009112:	2100      	movs	r1, #0
 8009114:	4628      	mov	r0, r5
 8009116:	f7f7 fac5 	bl	80006a4 <__aeabi_fcmpeq>
 800911a:	2800      	cmp	r0, #0
 800911c:	d155      	bne.n	80091ca <powf+0xfa>
 800911e:	4628      	mov	r0, r5
 8009120:	f000 fc02 	bl	8009928 <finitef>
 8009124:	2800      	cmp	r0, #0
 8009126:	d0ee      	beq.n	8009106 <powf+0x36>
 8009128:	2100      	movs	r1, #0
 800912a:	4628      	mov	r0, r5
 800912c:	f7f7 fac4 	bl	80006b8 <__aeabi_fcmplt>
 8009130:	2800      	cmp	r0, #0
 8009132:	d0e8      	beq.n	8009106 <powf+0x36>
 8009134:	f000 fcaa 	bl	8009a8c <__errno>
 8009138:	2321      	movs	r3, #33	; 0x21
 800913a:	6003      	str	r3, [r0, #0]
 800913c:	4c25      	ldr	r4, [pc, #148]	; (80091d4 <powf+0x104>)
 800913e:	e7e2      	b.n	8009106 <powf+0x36>
 8009140:	4620      	mov	r0, r4
 8009142:	f000 fbf1 	bl	8009928 <finitef>
 8009146:	bb50      	cbnz	r0, 800919e <powf+0xce>
 8009148:	4630      	mov	r0, r6
 800914a:	f000 fbed 	bl	8009928 <finitef>
 800914e:	b330      	cbz	r0, 800919e <powf+0xce>
 8009150:	4628      	mov	r0, r5
 8009152:	f000 fbe9 	bl	8009928 <finitef>
 8009156:	b310      	cbz	r0, 800919e <powf+0xce>
 8009158:	4621      	mov	r1, r4
 800915a:	4620      	mov	r0, r4
 800915c:	f7f7 fad4 	bl	8000708 <__aeabi_fcmpun>
 8009160:	b148      	cbz	r0, 8009176 <powf+0xa6>
 8009162:	f000 fc93 	bl	8009a8c <__errno>
 8009166:	2321      	movs	r3, #33	; 0x21
 8009168:	2100      	movs	r1, #0
 800916a:	6003      	str	r3, [r0, #0]
 800916c:	4608      	mov	r0, r1
 800916e:	f7f7 f9b9 	bl	80004e4 <__aeabi_fdiv>
 8009172:	4604      	mov	r4, r0
 8009174:	e7c7      	b.n	8009106 <powf+0x36>
 8009176:	f000 fc89 	bl	8009a8c <__errno>
 800917a:	2322      	movs	r3, #34	; 0x22
 800917c:	2100      	movs	r1, #0
 800917e:	6003      	str	r3, [r0, #0]
 8009180:	4630      	mov	r0, r6
 8009182:	f7f7 fa99 	bl	80006b8 <__aeabi_fcmplt>
 8009186:	b138      	cbz	r0, 8009198 <powf+0xc8>
 8009188:	4628      	mov	r0, r5
 800918a:	f000 fbd9 	bl	8009940 <rintf>
 800918e:	4629      	mov	r1, r5
 8009190:	f7f7 fa88 	bl	80006a4 <__aeabi_fcmpeq>
 8009194:	2800      	cmp	r0, #0
 8009196:	d0d1      	beq.n	800913c <powf+0x6c>
 8009198:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 800919c:	e7b3      	b.n	8009106 <powf+0x36>
 800919e:	2100      	movs	r1, #0
 80091a0:	4620      	mov	r0, r4
 80091a2:	f7f7 fa7f 	bl	80006a4 <__aeabi_fcmpeq>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d0ad      	beq.n	8009106 <powf+0x36>
 80091aa:	4630      	mov	r0, r6
 80091ac:	f000 fbbc 	bl	8009928 <finitef>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d0a8      	beq.n	8009106 <powf+0x36>
 80091b4:	4628      	mov	r0, r5
 80091b6:	f000 fbb7 	bl	8009928 <finitef>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d0a3      	beq.n	8009106 <powf+0x36>
 80091be:	f000 fc65 	bl	8009a8c <__errno>
 80091c2:	2322      	movs	r3, #34	; 0x22
 80091c4:	2400      	movs	r4, #0
 80091c6:	6003      	str	r3, [r0, #0]
 80091c8:	e79d      	b.n	8009106 <powf+0x36>
 80091ca:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80091ce:	e79a      	b.n	8009106 <powf+0x36>
 80091d0:	200006b0 	.word	0x200006b0
 80091d4:	ff800000 	.word	0xff800000

080091d8 <__ieee754_powf>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	f031 4800 	bics.w	r8, r1, #2147483648	; 0x80000000
 80091e0:	4682      	mov	sl, r0
 80091e2:	460f      	mov	r7, r1
 80091e4:	460c      	mov	r4, r1
 80091e6:	b087      	sub	sp, #28
 80091e8:	f000 832a 	beq.w	8009840 <__ieee754_powf+0x668>
 80091ec:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80091f0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80091f4:	4681      	mov	r9, r0
 80091f6:	dc06      	bgt.n	8009206 <__ieee754_powf+0x2e>
 80091f8:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80091fc:	dd09      	ble.n	8009212 <__ieee754_powf+0x3a>
 80091fe:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8009202:	f000 831d 	beq.w	8009840 <__ieee754_powf+0x668>
 8009206:	4884      	ldr	r0, [pc, #528]	; (8009418 <__ieee754_powf+0x240>)
 8009208:	b007      	add	sp, #28
 800920a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920e:	f000 bb93 	b.w	8009938 <nanf>
 8009212:	2800      	cmp	r0, #0
 8009214:	da20      	bge.n	8009258 <__ieee754_powf+0x80>
 8009216:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800921a:	da2e      	bge.n	800927a <__ieee754_powf+0xa2>
 800921c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009220:	f2c0 8313 	blt.w	800984a <__ieee754_powf+0x672>
 8009224:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8009228:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800922c:	fa48 f503 	asr.w	r5, r8, r3
 8009230:	fa05 f303 	lsl.w	r3, r5, r3
 8009234:	4543      	cmp	r3, r8
 8009236:	f040 8308 	bne.w	800984a <__ieee754_powf+0x672>
 800923a:	f005 0501 	and.w	r5, r5, #1
 800923e:	f1c5 0502 	rsb	r5, r5, #2
 8009242:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009246:	d11f      	bne.n	8009288 <__ieee754_powf+0xb0>
 8009248:	2c00      	cmp	r4, #0
 800924a:	4651      	mov	r1, sl
 800924c:	da11      	bge.n	8009272 <__ieee754_powf+0x9a>
 800924e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009252:	f7f7 f947 	bl	80004e4 <__aeabi_fdiv>
 8009256:	e01e      	b.n	8009296 <__ieee754_powf+0xbe>
 8009258:	2500      	movs	r5, #0
 800925a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800925e:	d1f0      	bne.n	8009242 <__ieee754_powf+0x6a>
 8009260:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8009264:	f000 82ec 	beq.w	8009840 <__ieee754_powf+0x668>
 8009268:	dd09      	ble.n	800927e <__ieee754_powf+0xa6>
 800926a:	2c00      	cmp	r4, #0
 800926c:	f280 82eb 	bge.w	8009846 <__ieee754_powf+0x66e>
 8009270:	2100      	movs	r1, #0
 8009272:	4608      	mov	r0, r1
 8009274:	b007      	add	sp, #28
 8009276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927a:	2502      	movs	r5, #2
 800927c:	e7ed      	b.n	800925a <__ieee754_powf+0x82>
 800927e:	2c00      	cmp	r4, #0
 8009280:	daf6      	bge.n	8009270 <__ieee754_powf+0x98>
 8009282:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8009286:	e7f4      	b.n	8009272 <__ieee754_powf+0x9a>
 8009288:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800928c:	d105      	bne.n	800929a <__ieee754_powf+0xc2>
 800928e:	4651      	mov	r1, sl
 8009290:	4608      	mov	r0, r1
 8009292:	f7f7 f873 	bl	800037c <__aeabi_fmul>
 8009296:	4601      	mov	r1, r0
 8009298:	e7eb      	b.n	8009272 <__ieee754_powf+0x9a>
 800929a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800929e:	4650      	mov	r0, sl
 80092a0:	d107      	bne.n	80092b2 <__ieee754_powf+0xda>
 80092a2:	f1b9 0f00 	cmp.w	r9, #0
 80092a6:	db04      	blt.n	80092b2 <__ieee754_powf+0xda>
 80092a8:	b007      	add	sp, #28
 80092aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ae:	f000 bae7 	b.w	8009880 <__ieee754_sqrtf>
 80092b2:	f000 fb36 	bl	8009922 <fabsf>
 80092b6:	4601      	mov	r1, r0
 80092b8:	b126      	cbz	r6, 80092c4 <__ieee754_powf+0xec>
 80092ba:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 80092be:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80092c2:	d118      	bne.n	80092f6 <__ieee754_powf+0x11e>
 80092c4:	2c00      	cmp	r4, #0
 80092c6:	da04      	bge.n	80092d2 <__ieee754_powf+0xfa>
 80092c8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80092cc:	f7f7 f90a 	bl	80004e4 <__aeabi_fdiv>
 80092d0:	4601      	mov	r1, r0
 80092d2:	f1b9 0f00 	cmp.w	r9, #0
 80092d6:	dacc      	bge.n	8009272 <__ieee754_powf+0x9a>
 80092d8:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 80092dc:	ea56 0305 	orrs.w	r3, r6, r5
 80092e0:	d104      	bne.n	80092ec <__ieee754_powf+0x114>
 80092e2:	4608      	mov	r0, r1
 80092e4:	f7f6 ff40 	bl	8000168 <__aeabi_fsub>
 80092e8:	4601      	mov	r1, r0
 80092ea:	e7b2      	b.n	8009252 <__ieee754_powf+0x7a>
 80092ec:	2d01      	cmp	r5, #1
 80092ee:	d1c0      	bne.n	8009272 <__ieee754_powf+0x9a>
 80092f0:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 80092f4:	e7cf      	b.n	8009296 <__ieee754_powf+0xbe>
 80092f6:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80092fa:	3b01      	subs	r3, #1
 80092fc:	9302      	str	r3, [sp, #8]
 80092fe:	432b      	orrs	r3, r5
 8009300:	d101      	bne.n	8009306 <__ieee754_powf+0x12e>
 8009302:	4651      	mov	r1, sl
 8009304:	e7ed      	b.n	80092e2 <__ieee754_powf+0x10a>
 8009306:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800930a:	f340 8097 	ble.w	800943c <__ieee754_powf+0x264>
 800930e:	4b43      	ldr	r3, [pc, #268]	; (800941c <__ieee754_powf+0x244>)
 8009310:	429e      	cmp	r6, r3
 8009312:	dc03      	bgt.n	800931c <__ieee754_powf+0x144>
 8009314:	2c00      	cmp	r4, #0
 8009316:	daab      	bge.n	8009270 <__ieee754_powf+0x98>
 8009318:	4941      	ldr	r1, [pc, #260]	; (8009420 <__ieee754_powf+0x248>)
 800931a:	e7b9      	b.n	8009290 <__ieee754_powf+0xb8>
 800931c:	4b41      	ldr	r3, [pc, #260]	; (8009424 <__ieee754_powf+0x24c>)
 800931e:	429e      	cmp	r6, r3
 8009320:	dd02      	ble.n	8009328 <__ieee754_powf+0x150>
 8009322:	2c00      	cmp	r4, #0
 8009324:	dcf8      	bgt.n	8009318 <__ieee754_powf+0x140>
 8009326:	e7a3      	b.n	8009270 <__ieee754_powf+0x98>
 8009328:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800932c:	f7f6 ff1c 	bl	8000168 <__aeabi_fsub>
 8009330:	493d      	ldr	r1, [pc, #244]	; (8009428 <__ieee754_powf+0x250>)
 8009332:	4606      	mov	r6, r0
 8009334:	f7f7 f822 	bl	800037c <__aeabi_fmul>
 8009338:	493c      	ldr	r1, [pc, #240]	; (800942c <__ieee754_powf+0x254>)
 800933a:	4680      	mov	r8, r0
 800933c:	4630      	mov	r0, r6
 800933e:	f7f7 f81d 	bl	800037c <__aeabi_fmul>
 8009342:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8009346:	4681      	mov	r9, r0
 8009348:	4630      	mov	r0, r6
 800934a:	f7f7 f817 	bl	800037c <__aeabi_fmul>
 800934e:	4601      	mov	r1, r0
 8009350:	4837      	ldr	r0, [pc, #220]	; (8009430 <__ieee754_powf+0x258>)
 8009352:	f7f6 ff09 	bl	8000168 <__aeabi_fsub>
 8009356:	4631      	mov	r1, r6
 8009358:	f7f7 f810 	bl	800037c <__aeabi_fmul>
 800935c:	4601      	mov	r1, r0
 800935e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8009362:	f7f6 ff01 	bl	8000168 <__aeabi_fsub>
 8009366:	4631      	mov	r1, r6
 8009368:	4682      	mov	sl, r0
 800936a:	4630      	mov	r0, r6
 800936c:	f7f7 f806 	bl	800037c <__aeabi_fmul>
 8009370:	4601      	mov	r1, r0
 8009372:	4650      	mov	r0, sl
 8009374:	f7f7 f802 	bl	800037c <__aeabi_fmul>
 8009378:	492e      	ldr	r1, [pc, #184]	; (8009434 <__ieee754_powf+0x25c>)
 800937a:	f7f6 ffff 	bl	800037c <__aeabi_fmul>
 800937e:	4601      	mov	r1, r0
 8009380:	4648      	mov	r0, r9
 8009382:	f7f6 fef1 	bl	8000168 <__aeabi_fsub>
 8009386:	4601      	mov	r1, r0
 8009388:	4606      	mov	r6, r0
 800938a:	4640      	mov	r0, r8
 800938c:	f7f6 feee 	bl	800016c <__addsf3>
 8009390:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8009394:	f029 090f 	bic.w	r9, r9, #15
 8009398:	4641      	mov	r1, r8
 800939a:	4648      	mov	r0, r9
 800939c:	f7f6 fee4 	bl	8000168 <__aeabi_fsub>
 80093a0:	4601      	mov	r1, r0
 80093a2:	4630      	mov	r0, r6
 80093a4:	f7f6 fee0 	bl	8000168 <__aeabi_fsub>
 80093a8:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80093ac:	9b02      	ldr	r3, [sp, #8]
 80093ae:	3d01      	subs	r5, #1
 80093b0:	f024 040f 	bic.w	r4, r4, #15
 80093b4:	432b      	orrs	r3, r5
 80093b6:	4606      	mov	r6, r0
 80093b8:	4621      	mov	r1, r4
 80093ba:	4638      	mov	r0, r7
 80093bc:	bf14      	ite	ne
 80093be:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 80093c2:	4d1d      	ldreq	r5, [pc, #116]	; (8009438 <__ieee754_powf+0x260>)
 80093c4:	f7f6 fed0 	bl	8000168 <__aeabi_fsub>
 80093c8:	4649      	mov	r1, r9
 80093ca:	f7f6 ffd7 	bl	800037c <__aeabi_fmul>
 80093ce:	4639      	mov	r1, r7
 80093d0:	4680      	mov	r8, r0
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7f6 ffd2 	bl	800037c <__aeabi_fmul>
 80093d8:	4601      	mov	r1, r0
 80093da:	4640      	mov	r0, r8
 80093dc:	f7f6 fec6 	bl	800016c <__addsf3>
 80093e0:	4621      	mov	r1, r4
 80093e2:	4606      	mov	r6, r0
 80093e4:	4648      	mov	r0, r9
 80093e6:	f7f6 ffc9 	bl	800037c <__aeabi_fmul>
 80093ea:	4601      	mov	r1, r0
 80093ec:	4607      	mov	r7, r0
 80093ee:	4681      	mov	r9, r0
 80093f0:	4630      	mov	r0, r6
 80093f2:	f7f6 febb 	bl	800016c <__addsf3>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	4682      	mov	sl, r0
 80093fa:	4680      	mov	r8, r0
 80093fc:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8009400:	f340 8202 	ble.w	8009808 <__ieee754_powf+0x630>
 8009404:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8009408:	f340 8150 	ble.w	80096ac <__ieee754_powf+0x4d4>
 800940c:	4904      	ldr	r1, [pc, #16]	; (8009420 <__ieee754_powf+0x248>)
 800940e:	4628      	mov	r0, r5
 8009410:	f7f6 ffb4 	bl	800037c <__aeabi_fmul>
 8009414:	4902      	ldr	r1, [pc, #8]	; (8009420 <__ieee754_powf+0x248>)
 8009416:	e73c      	b.n	8009292 <__ieee754_powf+0xba>
 8009418:	08009f88 	.word	0x08009f88
 800941c:	3f7ffff7 	.word	0x3f7ffff7
 8009420:	7149f2ca 	.word	0x7149f2ca
 8009424:	3f800007 	.word	0x3f800007
 8009428:	3fb8aa00 	.word	0x3fb8aa00
 800942c:	36eca570 	.word	0x36eca570
 8009430:	3eaaaaab 	.word	0x3eaaaaab
 8009434:	3fb8aa3b 	.word	0x3fb8aa3b
 8009438:	bf800000 	.word	0xbf800000
 800943c:	f019 4fff 	tst.w	r9, #2139095040	; 0x7f800000
 8009440:	f040 8111 	bne.w	8009666 <__ieee754_powf+0x48e>
 8009444:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8009448:	f7f6 ff98 	bl	800037c <__aeabi_fmul>
 800944c:	f06f 0217 	mvn.w	r2, #23
 8009450:	4606      	mov	r6, r0
 8009452:	15f3      	asrs	r3, r6, #23
 8009454:	3b7f      	subs	r3, #127	; 0x7f
 8009456:	4413      	add	r3, r2
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	4b85      	ldr	r3, [pc, #532]	; (8009670 <__ieee754_powf+0x498>)
 800945c:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8009460:	4298      	cmp	r0, r3
 8009462:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 8009466:	dd08      	ble.n	800947a <__ieee754_powf+0x2a2>
 8009468:	4b82      	ldr	r3, [pc, #520]	; (8009674 <__ieee754_powf+0x49c>)
 800946a:	4298      	cmp	r0, r3
 800946c:	f340 80fd 	ble.w	800966a <__ieee754_powf+0x492>
 8009470:	9b01      	ldr	r3, [sp, #4]
 8009472:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 8009476:	3301      	adds	r3, #1
 8009478:	9301      	str	r3, [sp, #4]
 800947a:	2300      	movs	r3, #0
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	9900      	ldr	r1, [sp, #0]
 8009480:	4a7d      	ldr	r2, [pc, #500]	; (8009678 <__ieee754_powf+0x4a0>)
 8009482:	4630      	mov	r0, r6
 8009484:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009488:	9603      	str	r6, [sp, #12]
 800948a:	4611      	mov	r1, r2
 800948c:	9205      	str	r2, [sp, #20]
 800948e:	f7f6 fe6b 	bl	8000168 <__aeabi_fsub>
 8009492:	9a05      	ldr	r2, [sp, #20]
 8009494:	9b03      	ldr	r3, [sp, #12]
 8009496:	4683      	mov	fp, r0
 8009498:	4619      	mov	r1, r3
 800949a:	4610      	mov	r0, r2
 800949c:	9203      	str	r2, [sp, #12]
 800949e:	9304      	str	r3, [sp, #16]
 80094a0:	f7f6 fe64 	bl	800016c <__addsf3>
 80094a4:	4601      	mov	r1, r0
 80094a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80094aa:	f7f7 f81b 	bl	80004e4 <__aeabi_fdiv>
 80094ae:	4682      	mov	sl, r0
 80094b0:	4601      	mov	r1, r0
 80094b2:	4658      	mov	r0, fp
 80094b4:	f7f6 ff62 	bl	800037c <__aeabi_fmul>
 80094b8:	1076      	asrs	r6, r6, #1
 80094ba:	9b00      	ldr	r3, [sp, #0]
 80094bc:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80094c0:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 80094c4:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 80094c8:	f029 090f 	bic.w	r9, r9, #15
 80094cc:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80094d0:	4680      	mov	r8, r0
 80094d2:	4631      	mov	r1, r6
 80094d4:	4648      	mov	r0, r9
 80094d6:	f7f6 ff51 	bl	800037c <__aeabi_fmul>
 80094da:	4601      	mov	r1, r0
 80094dc:	4658      	mov	r0, fp
 80094de:	f7f6 fe43 	bl	8000168 <__aeabi_fsub>
 80094e2:	9a03      	ldr	r2, [sp, #12]
 80094e4:	4683      	mov	fp, r0
 80094e6:	4611      	mov	r1, r2
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7f6 fe3d 	bl	8000168 <__aeabi_fsub>
 80094ee:	9b04      	ldr	r3, [sp, #16]
 80094f0:	4601      	mov	r1, r0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7f6 fe38 	bl	8000168 <__aeabi_fsub>
 80094f8:	4649      	mov	r1, r9
 80094fa:	f7f6 ff3f 	bl	800037c <__aeabi_fmul>
 80094fe:	4601      	mov	r1, r0
 8009500:	4658      	mov	r0, fp
 8009502:	f7f6 fe31 	bl	8000168 <__aeabi_fsub>
 8009506:	4651      	mov	r1, sl
 8009508:	f7f6 ff38 	bl	800037c <__aeabi_fmul>
 800950c:	4641      	mov	r1, r8
 800950e:	4682      	mov	sl, r0
 8009510:	4640      	mov	r0, r8
 8009512:	f7f6 ff33 	bl	800037c <__aeabi_fmul>
 8009516:	4606      	mov	r6, r0
 8009518:	4958      	ldr	r1, [pc, #352]	; (800967c <__ieee754_powf+0x4a4>)
 800951a:	f7f6 ff2f 	bl	800037c <__aeabi_fmul>
 800951e:	4958      	ldr	r1, [pc, #352]	; (8009680 <__ieee754_powf+0x4a8>)
 8009520:	f7f6 fe24 	bl	800016c <__addsf3>
 8009524:	4631      	mov	r1, r6
 8009526:	f7f6 ff29 	bl	800037c <__aeabi_fmul>
 800952a:	4956      	ldr	r1, [pc, #344]	; (8009684 <__ieee754_powf+0x4ac>)
 800952c:	f7f6 fe1e 	bl	800016c <__addsf3>
 8009530:	4631      	mov	r1, r6
 8009532:	f7f6 ff23 	bl	800037c <__aeabi_fmul>
 8009536:	4954      	ldr	r1, [pc, #336]	; (8009688 <__ieee754_powf+0x4b0>)
 8009538:	f7f6 fe18 	bl	800016c <__addsf3>
 800953c:	4631      	mov	r1, r6
 800953e:	f7f6 ff1d 	bl	800037c <__aeabi_fmul>
 8009542:	4952      	ldr	r1, [pc, #328]	; (800968c <__ieee754_powf+0x4b4>)
 8009544:	f7f6 fe12 	bl	800016c <__addsf3>
 8009548:	4631      	mov	r1, r6
 800954a:	f7f6 ff17 	bl	800037c <__aeabi_fmul>
 800954e:	4950      	ldr	r1, [pc, #320]	; (8009690 <__ieee754_powf+0x4b8>)
 8009550:	f7f6 fe0c 	bl	800016c <__addsf3>
 8009554:	4631      	mov	r1, r6
 8009556:	4683      	mov	fp, r0
 8009558:	4630      	mov	r0, r6
 800955a:	f7f6 ff0f 	bl	800037c <__aeabi_fmul>
 800955e:	4601      	mov	r1, r0
 8009560:	4658      	mov	r0, fp
 8009562:	f7f6 ff0b 	bl	800037c <__aeabi_fmul>
 8009566:	4606      	mov	r6, r0
 8009568:	4649      	mov	r1, r9
 800956a:	4640      	mov	r0, r8
 800956c:	f7f6 fdfe 	bl	800016c <__addsf3>
 8009570:	4651      	mov	r1, sl
 8009572:	f7f6 ff03 	bl	800037c <__aeabi_fmul>
 8009576:	4631      	mov	r1, r6
 8009578:	f7f6 fdf8 	bl	800016c <__addsf3>
 800957c:	4649      	mov	r1, r9
 800957e:	4683      	mov	fp, r0
 8009580:	4648      	mov	r0, r9
 8009582:	f7f6 fefb 	bl	800037c <__aeabi_fmul>
 8009586:	4943      	ldr	r1, [pc, #268]	; (8009694 <__ieee754_powf+0x4bc>)
 8009588:	9003      	str	r0, [sp, #12]
 800958a:	f7f6 fdef 	bl	800016c <__addsf3>
 800958e:	4659      	mov	r1, fp
 8009590:	f7f6 fdec 	bl	800016c <__addsf3>
 8009594:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8009598:	f026 060f 	bic.w	r6, r6, #15
 800959c:	4631      	mov	r1, r6
 800959e:	4648      	mov	r0, r9
 80095a0:	f7f6 feec 	bl	800037c <__aeabi_fmul>
 80095a4:	493b      	ldr	r1, [pc, #236]	; (8009694 <__ieee754_powf+0x4bc>)
 80095a6:	4681      	mov	r9, r0
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7f6 fddd 	bl	8000168 <__aeabi_fsub>
 80095ae:	9b03      	ldr	r3, [sp, #12]
 80095b0:	4619      	mov	r1, r3
 80095b2:	f7f6 fdd9 	bl	8000168 <__aeabi_fsub>
 80095b6:	4601      	mov	r1, r0
 80095b8:	4658      	mov	r0, fp
 80095ba:	f7f6 fdd5 	bl	8000168 <__aeabi_fsub>
 80095be:	4641      	mov	r1, r8
 80095c0:	f7f6 fedc 	bl	800037c <__aeabi_fmul>
 80095c4:	4631      	mov	r1, r6
 80095c6:	4680      	mov	r8, r0
 80095c8:	4650      	mov	r0, sl
 80095ca:	f7f6 fed7 	bl	800037c <__aeabi_fmul>
 80095ce:	4601      	mov	r1, r0
 80095d0:	4640      	mov	r0, r8
 80095d2:	f7f6 fdcb 	bl	800016c <__addsf3>
 80095d6:	4682      	mov	sl, r0
 80095d8:	4601      	mov	r1, r0
 80095da:	4648      	mov	r0, r9
 80095dc:	f7f6 fdc6 	bl	800016c <__addsf3>
 80095e0:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80095e4:	f026 060f 	bic.w	r6, r6, #15
 80095e8:	4630      	mov	r0, r6
 80095ea:	492b      	ldr	r1, [pc, #172]	; (8009698 <__ieee754_powf+0x4c0>)
 80095ec:	f7f6 fec6 	bl	800037c <__aeabi_fmul>
 80095f0:	4649      	mov	r1, r9
 80095f2:	4680      	mov	r8, r0
 80095f4:	4630      	mov	r0, r6
 80095f6:	f7f6 fdb7 	bl	8000168 <__aeabi_fsub>
 80095fa:	4601      	mov	r1, r0
 80095fc:	4650      	mov	r0, sl
 80095fe:	f7f6 fdb3 	bl	8000168 <__aeabi_fsub>
 8009602:	4926      	ldr	r1, [pc, #152]	; (800969c <__ieee754_powf+0x4c4>)
 8009604:	f7f6 feba 	bl	800037c <__aeabi_fmul>
 8009608:	4925      	ldr	r1, [pc, #148]	; (80096a0 <__ieee754_powf+0x4c8>)
 800960a:	4681      	mov	r9, r0
 800960c:	4630      	mov	r0, r6
 800960e:	f7f6 feb5 	bl	800037c <__aeabi_fmul>
 8009612:	4601      	mov	r1, r0
 8009614:	4648      	mov	r0, r9
 8009616:	f7f6 fda9 	bl	800016c <__addsf3>
 800961a:	4b22      	ldr	r3, [pc, #136]	; (80096a4 <__ieee754_powf+0x4cc>)
 800961c:	9a00      	ldr	r2, [sp, #0]
 800961e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009622:	f7f6 fda3 	bl	800016c <__addsf3>
 8009626:	4606      	mov	r6, r0
 8009628:	9801      	ldr	r0, [sp, #4]
 800962a:	f7f6 fe53 	bl	80002d4 <__aeabi_i2f>
 800962e:	4682      	mov	sl, r0
 8009630:	4b1d      	ldr	r3, [pc, #116]	; (80096a8 <__ieee754_powf+0x4d0>)
 8009632:	9a00      	ldr	r2, [sp, #0]
 8009634:	4631      	mov	r1, r6
 8009636:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800963a:	4640      	mov	r0, r8
 800963c:	f7f6 fd96 	bl	800016c <__addsf3>
 8009640:	4659      	mov	r1, fp
 8009642:	f7f6 fd93 	bl	800016c <__addsf3>
 8009646:	4651      	mov	r1, sl
 8009648:	f7f6 fd90 	bl	800016c <__addsf3>
 800964c:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8009650:	f029 090f 	bic.w	r9, r9, #15
 8009654:	4651      	mov	r1, sl
 8009656:	4648      	mov	r0, r9
 8009658:	f7f6 fd86 	bl	8000168 <__aeabi_fsub>
 800965c:	4659      	mov	r1, fp
 800965e:	f7f6 fd83 	bl	8000168 <__aeabi_fsub>
 8009662:	4641      	mov	r1, r8
 8009664:	e69a      	b.n	800939c <__ieee754_powf+0x1c4>
 8009666:	2200      	movs	r2, #0
 8009668:	e6f3      	b.n	8009452 <__ieee754_powf+0x27a>
 800966a:	2301      	movs	r3, #1
 800966c:	e706      	b.n	800947c <__ieee754_powf+0x2a4>
 800966e:	bf00      	nop
 8009670:	001cc471 	.word	0x001cc471
 8009674:	005db3d6 	.word	0x005db3d6
 8009678:	08009f44 	.word	0x08009f44
 800967c:	3e53f142 	.word	0x3e53f142
 8009680:	3e6c3255 	.word	0x3e6c3255
 8009684:	3e8ba305 	.word	0x3e8ba305
 8009688:	3eaaaaab 	.word	0x3eaaaaab
 800968c:	3edb6db7 	.word	0x3edb6db7
 8009690:	3f19999a 	.word	0x3f19999a
 8009694:	40400000 	.word	0x40400000
 8009698:	3f763800 	.word	0x3f763800
 800969c:	3f76384f 	.word	0x3f76384f
 80096a0:	369dc3a0 	.word	0x369dc3a0
 80096a4:	08009f54 	.word	0x08009f54
 80096a8:	08009f4c 	.word	0x08009f4c
 80096ac:	f040 80c0 	bne.w	8009830 <__ieee754_powf+0x658>
 80096b0:	4967      	ldr	r1, [pc, #412]	; (8009850 <__ieee754_powf+0x678>)
 80096b2:	4630      	mov	r0, r6
 80096b4:	f7f6 fd5a 	bl	800016c <__addsf3>
 80096b8:	4639      	mov	r1, r7
 80096ba:	4681      	mov	r9, r0
 80096bc:	4650      	mov	r0, sl
 80096be:	f7f6 fd53 	bl	8000168 <__aeabi_fsub>
 80096c2:	4601      	mov	r1, r0
 80096c4:	4648      	mov	r0, r9
 80096c6:	f7f7 f815 	bl	80006f4 <__aeabi_fcmpgt>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	f47f ae9e 	bne.w	800940c <__ieee754_powf+0x234>
 80096d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80096d4:	15e4      	asrs	r4, r4, #23
 80096d6:	3c7e      	subs	r4, #126	; 0x7e
 80096d8:	4123      	asrs	r3, r4
 80096da:	4443      	add	r3, r8
 80096dc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80096e0:	495c      	ldr	r1, [pc, #368]	; (8009854 <__ieee754_powf+0x67c>)
 80096e2:	3a7f      	subs	r2, #127	; 0x7f
 80096e4:	f3c3 0416 	ubfx	r4, r3, #0, #23
 80096e8:	4111      	asrs	r1, r2
 80096ea:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 80096ee:	f1c2 0217 	rsb	r2, r2, #23
 80096f2:	4114      	asrs	r4, r2
 80096f4:	f1b8 0f00 	cmp.w	r8, #0
 80096f8:	4638      	mov	r0, r7
 80096fa:	ea23 0101 	bic.w	r1, r3, r1
 80096fe:	bfb8      	it	lt
 8009700:	4264      	neglt	r4, r4
 8009702:	f7f6 fd31 	bl	8000168 <__aeabi_fsub>
 8009706:	4681      	mov	r9, r0
 8009708:	4631      	mov	r1, r6
 800970a:	4648      	mov	r0, r9
 800970c:	f7f6 fd2e 	bl	800016c <__addsf3>
 8009710:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8009714:	f027 070f 	bic.w	r7, r7, #15
 8009718:	4638      	mov	r0, r7
 800971a:	494f      	ldr	r1, [pc, #316]	; (8009858 <__ieee754_powf+0x680>)
 800971c:	f7f6 fe2e 	bl	800037c <__aeabi_fmul>
 8009720:	4649      	mov	r1, r9
 8009722:	4680      	mov	r8, r0
 8009724:	4638      	mov	r0, r7
 8009726:	f7f6 fd1f 	bl	8000168 <__aeabi_fsub>
 800972a:	4601      	mov	r1, r0
 800972c:	4630      	mov	r0, r6
 800972e:	f7f6 fd1b 	bl	8000168 <__aeabi_fsub>
 8009732:	494a      	ldr	r1, [pc, #296]	; (800985c <__ieee754_powf+0x684>)
 8009734:	f7f6 fe22 	bl	800037c <__aeabi_fmul>
 8009738:	4949      	ldr	r1, [pc, #292]	; (8009860 <__ieee754_powf+0x688>)
 800973a:	4606      	mov	r6, r0
 800973c:	4638      	mov	r0, r7
 800973e:	f7f6 fe1d 	bl	800037c <__aeabi_fmul>
 8009742:	4601      	mov	r1, r0
 8009744:	4630      	mov	r0, r6
 8009746:	f7f6 fd11 	bl	800016c <__addsf3>
 800974a:	4607      	mov	r7, r0
 800974c:	4601      	mov	r1, r0
 800974e:	4640      	mov	r0, r8
 8009750:	f7f6 fd0c 	bl	800016c <__addsf3>
 8009754:	4641      	mov	r1, r8
 8009756:	4606      	mov	r6, r0
 8009758:	f7f6 fd06 	bl	8000168 <__aeabi_fsub>
 800975c:	4601      	mov	r1, r0
 800975e:	4638      	mov	r0, r7
 8009760:	f7f6 fd02 	bl	8000168 <__aeabi_fsub>
 8009764:	4631      	mov	r1, r6
 8009766:	4680      	mov	r8, r0
 8009768:	4630      	mov	r0, r6
 800976a:	f7f6 fe07 	bl	800037c <__aeabi_fmul>
 800976e:	4607      	mov	r7, r0
 8009770:	493c      	ldr	r1, [pc, #240]	; (8009864 <__ieee754_powf+0x68c>)
 8009772:	f7f6 fe03 	bl	800037c <__aeabi_fmul>
 8009776:	493c      	ldr	r1, [pc, #240]	; (8009868 <__ieee754_powf+0x690>)
 8009778:	f7f6 fcf6 	bl	8000168 <__aeabi_fsub>
 800977c:	4639      	mov	r1, r7
 800977e:	f7f6 fdfd 	bl	800037c <__aeabi_fmul>
 8009782:	493a      	ldr	r1, [pc, #232]	; (800986c <__ieee754_powf+0x694>)
 8009784:	f7f6 fcf2 	bl	800016c <__addsf3>
 8009788:	4639      	mov	r1, r7
 800978a:	f7f6 fdf7 	bl	800037c <__aeabi_fmul>
 800978e:	4938      	ldr	r1, [pc, #224]	; (8009870 <__ieee754_powf+0x698>)
 8009790:	f7f6 fcea 	bl	8000168 <__aeabi_fsub>
 8009794:	4639      	mov	r1, r7
 8009796:	f7f6 fdf1 	bl	800037c <__aeabi_fmul>
 800979a:	4936      	ldr	r1, [pc, #216]	; (8009874 <__ieee754_powf+0x69c>)
 800979c:	f7f6 fce6 	bl	800016c <__addsf3>
 80097a0:	4639      	mov	r1, r7
 80097a2:	f7f6 fdeb 	bl	800037c <__aeabi_fmul>
 80097a6:	4601      	mov	r1, r0
 80097a8:	4630      	mov	r0, r6
 80097aa:	f7f6 fcdd 	bl	8000168 <__aeabi_fsub>
 80097ae:	4607      	mov	r7, r0
 80097b0:	4601      	mov	r1, r0
 80097b2:	4630      	mov	r0, r6
 80097b4:	f7f6 fde2 	bl	800037c <__aeabi_fmul>
 80097b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80097bc:	4681      	mov	r9, r0
 80097be:	4638      	mov	r0, r7
 80097c0:	f7f6 fcd2 	bl	8000168 <__aeabi_fsub>
 80097c4:	4601      	mov	r1, r0
 80097c6:	4648      	mov	r0, r9
 80097c8:	f7f6 fe8c 	bl	80004e4 <__aeabi_fdiv>
 80097cc:	4641      	mov	r1, r8
 80097ce:	4607      	mov	r7, r0
 80097d0:	4630      	mov	r0, r6
 80097d2:	f7f6 fdd3 	bl	800037c <__aeabi_fmul>
 80097d6:	4641      	mov	r1, r8
 80097d8:	f7f6 fcc8 	bl	800016c <__addsf3>
 80097dc:	4601      	mov	r1, r0
 80097de:	4638      	mov	r0, r7
 80097e0:	f7f6 fcc2 	bl	8000168 <__aeabi_fsub>
 80097e4:	4631      	mov	r1, r6
 80097e6:	f7f6 fcbf 	bl	8000168 <__aeabi_fsub>
 80097ea:	4601      	mov	r1, r0
 80097ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80097f0:	f7f6 fcba 	bl	8000168 <__aeabi_fsub>
 80097f4:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 80097f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097fc:	da1e      	bge.n	800983c <__ieee754_powf+0x664>
 80097fe:	4621      	mov	r1, r4
 8009800:	f000 f8f0 	bl	80099e4 <scalbnf>
 8009804:	4629      	mov	r1, r5
 8009806:	e544      	b.n	8009292 <__ieee754_powf+0xba>
 8009808:	4b1b      	ldr	r3, [pc, #108]	; (8009878 <__ieee754_powf+0x6a0>)
 800980a:	429c      	cmp	r4, r3
 800980c:	dd05      	ble.n	800981a <__ieee754_powf+0x642>
 800980e:	491b      	ldr	r1, [pc, #108]	; (800987c <__ieee754_powf+0x6a4>)
 8009810:	4628      	mov	r0, r5
 8009812:	f7f6 fdb3 	bl	800037c <__aeabi_fmul>
 8009816:	4919      	ldr	r1, [pc, #100]	; (800987c <__ieee754_powf+0x6a4>)
 8009818:	e53b      	b.n	8009292 <__ieee754_powf+0xba>
 800981a:	d109      	bne.n	8009830 <__ieee754_powf+0x658>
 800981c:	4639      	mov	r1, r7
 800981e:	f7f6 fca3 	bl	8000168 <__aeabi_fsub>
 8009822:	4631      	mov	r1, r6
 8009824:	f7f6 ff5c 	bl	80006e0 <__aeabi_fcmpge>
 8009828:	2800      	cmp	r0, #0
 800982a:	f43f af51 	beq.w	80096d0 <__ieee754_powf+0x4f8>
 800982e:	e7ee      	b.n	800980e <__ieee754_powf+0x636>
 8009830:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8009834:	f73f af4c 	bgt.w	80096d0 <__ieee754_powf+0x4f8>
 8009838:	2400      	movs	r4, #0
 800983a:	e765      	b.n	8009708 <__ieee754_powf+0x530>
 800983c:	4618      	mov	r0, r3
 800983e:	e7e1      	b.n	8009804 <__ieee754_powf+0x62c>
 8009840:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009844:	e515      	b.n	8009272 <__ieee754_powf+0x9a>
 8009846:	4639      	mov	r1, r7
 8009848:	e513      	b.n	8009272 <__ieee754_powf+0x9a>
 800984a:	2500      	movs	r5, #0
 800984c:	e4f9      	b.n	8009242 <__ieee754_powf+0x6a>
 800984e:	bf00      	nop
 8009850:	3338aa3c 	.word	0x3338aa3c
 8009854:	007fffff 	.word	0x007fffff
 8009858:	3f317200 	.word	0x3f317200
 800985c:	3f317218 	.word	0x3f317218
 8009860:	35bfbe8c 	.word	0x35bfbe8c
 8009864:	3331bb4c 	.word	0x3331bb4c
 8009868:	35ddea0e 	.word	0x35ddea0e
 800986c:	388ab355 	.word	0x388ab355
 8009870:	3b360b61 	.word	0x3b360b61
 8009874:	3e2aaaab 	.word	0x3e2aaaab
 8009878:	43160000 	.word	0x43160000
 800987c:	0da24260 	.word	0x0da24260

08009880 <__ieee754_sqrtf>:
 8009880:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009884:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	4603      	mov	r3, r0
 800988c:	4604      	mov	r4, r0
 800988e:	d309      	bcc.n	80098a4 <__ieee754_sqrtf+0x24>
 8009890:	4601      	mov	r1, r0
 8009892:	f7f6 fd73 	bl	800037c <__aeabi_fmul>
 8009896:	4601      	mov	r1, r0
 8009898:	4620      	mov	r0, r4
 800989a:	f7f6 fc67 	bl	800016c <__addsf3>
 800989e:	4604      	mov	r4, r0
 80098a0:	4620      	mov	r0, r4
 80098a2:	bd70      	pop	{r4, r5, r6, pc}
 80098a4:	2a00      	cmp	r2, #0
 80098a6:	d0fb      	beq.n	80098a0 <__ieee754_sqrtf+0x20>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	da06      	bge.n	80098ba <__ieee754_sqrtf+0x3a>
 80098ac:	4601      	mov	r1, r0
 80098ae:	f7f6 fc5b 	bl	8000168 <__aeabi_fsub>
 80098b2:	4601      	mov	r1, r0
 80098b4:	f7f6 fe16 	bl	80004e4 <__aeabi_fdiv>
 80098b8:	e7f1      	b.n	800989e <__ieee754_sqrtf+0x1e>
 80098ba:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 80098be:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80098c2:	d029      	beq.n	8009918 <__ieee754_sqrtf+0x98>
 80098c4:	f3c3 0216 	ubfx	r2, r3, #0, #23
 80098c8:	07cb      	lsls	r3, r1, #31
 80098ca:	f04f 0300 	mov.w	r3, #0
 80098ce:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 80098d2:	f04f 0419 	mov.w	r4, #25
 80098d6:	461e      	mov	r6, r3
 80098d8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80098dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80098e0:	bf58      	it	pl
 80098e2:	0052      	lslpl	r2, r2, #1
 80098e4:	1040      	asrs	r0, r0, #1
 80098e6:	0052      	lsls	r2, r2, #1
 80098e8:	1875      	adds	r5, r6, r1
 80098ea:	4295      	cmp	r5, r2
 80098ec:	bfde      	ittt	le
 80098ee:	186e      	addle	r6, r5, r1
 80098f0:	1b52      	suble	r2, r2, r5
 80098f2:	185b      	addle	r3, r3, r1
 80098f4:	3c01      	subs	r4, #1
 80098f6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80098fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80098fe:	d1f3      	bne.n	80098e8 <__ieee754_sqrtf+0x68>
 8009900:	b112      	cbz	r2, 8009908 <__ieee754_sqrtf+0x88>
 8009902:	3301      	adds	r3, #1
 8009904:	f023 0301 	bic.w	r3, r3, #1
 8009908:	105c      	asrs	r4, r3, #1
 800990a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800990e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8009912:	e7c5      	b.n	80098a0 <__ieee754_sqrtf+0x20>
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	3201      	adds	r2, #1
 8009918:	0218      	lsls	r0, r3, #8
 800991a:	d5fb      	bpl.n	8009914 <__ieee754_sqrtf+0x94>
 800991c:	3a01      	subs	r2, #1
 800991e:	1a89      	subs	r1, r1, r2
 8009920:	e7d0      	b.n	80098c4 <__ieee754_sqrtf+0x44>

08009922 <fabsf>:
 8009922:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009926:	4770      	bx	lr

08009928 <finitef>:
 8009928:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800992c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009930:	bfac      	ite	ge
 8009932:	2000      	movge	r0, #0
 8009934:	2001      	movlt	r0, #1
 8009936:	4770      	bx	lr

08009938 <nanf>:
 8009938:	4800      	ldr	r0, [pc, #0]	; (800993c <nanf+0x4>)
 800993a:	4770      	bx	lr
 800993c:	7fc00000 	.word	0x7fc00000

08009940 <rintf>:
 8009940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009942:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009946:	3d7f      	subs	r5, #127	; 0x7f
 8009948:	2d16      	cmp	r5, #22
 800994a:	4601      	mov	r1, r0
 800994c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009950:	dc3c      	bgt.n	80099cc <rintf+0x8c>
 8009952:	b1e2      	cbz	r2, 800998e <rintf+0x4e>
 8009954:	2d00      	cmp	r5, #0
 8009956:	4602      	mov	r2, r0
 8009958:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 800995c:	da1a      	bge.n	8009994 <rintf+0x54>
 800995e:	4a1f      	ldr	r2, [pc, #124]	; (80099dc <rintf+0x9c>)
 8009960:	f3c0 0116 	ubfx	r1, r0, #0, #23
 8009964:	4249      	negs	r1, r1
 8009966:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 800996a:	0d03      	lsrs	r3, r0, #20
 800996c:	0a49      	lsrs	r1, r1, #9
 800996e:	051b      	lsls	r3, r3, #20
 8009970:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009974:	4319      	orrs	r1, r3
 8009976:	4628      	mov	r0, r5
 8009978:	f7f6 fbf8 	bl	800016c <__addsf3>
 800997c:	9001      	str	r0, [sp, #4]
 800997e:	4629      	mov	r1, r5
 8009980:	9801      	ldr	r0, [sp, #4]
 8009982:	f7f6 fbf1 	bl	8000168 <__aeabi_fsub>
 8009986:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800998a:	ea40 71c4 	orr.w	r1, r0, r4, lsl #31
 800998e:	4608      	mov	r0, r1
 8009990:	b003      	add	sp, #12
 8009992:	bd30      	pop	{r4, r5, pc}
 8009994:	4b12      	ldr	r3, [pc, #72]	; (80099e0 <rintf+0xa0>)
 8009996:	412b      	asrs	r3, r5
 8009998:	4218      	tst	r0, r3
 800999a:	d0f8      	beq.n	800998e <rintf+0x4e>
 800999c:	0859      	lsrs	r1, r3, #1
 800999e:	ea10 0353 	ands.w	r3, r0, r3, lsr #1
 80099a2:	d006      	beq.n	80099b2 <rintf+0x72>
 80099a4:	ea20 0201 	bic.w	r2, r0, r1
 80099a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099ac:	fa41 f505 	asr.w	r5, r1, r5
 80099b0:	432a      	orrs	r2, r5
 80099b2:	4b0a      	ldr	r3, [pc, #40]	; (80099dc <rintf+0x9c>)
 80099b4:	4611      	mov	r1, r2
 80099b6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80099ba:	4620      	mov	r0, r4
 80099bc:	f7f6 fbd6 	bl	800016c <__addsf3>
 80099c0:	9001      	str	r0, [sp, #4]
 80099c2:	4621      	mov	r1, r4
 80099c4:	9801      	ldr	r0, [sp, #4]
 80099c6:	f7f6 fbcf 	bl	8000168 <__aeabi_fsub>
 80099ca:	e004      	b.n	80099d6 <rintf+0x96>
 80099cc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80099d0:	d3dd      	bcc.n	800998e <rintf+0x4e>
 80099d2:	f7f6 fbcb 	bl	800016c <__addsf3>
 80099d6:	4601      	mov	r1, r0
 80099d8:	e7d9      	b.n	800998e <rintf+0x4e>
 80099da:	bf00      	nop
 80099dc:	08009f5c 	.word	0x08009f5c
 80099e0:	007fffff 	.word	0x007fffff

080099e4 <scalbnf>:
 80099e4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4603      	mov	r3, r0
 80099ec:	460d      	mov	r5, r1
 80099ee:	4604      	mov	r4, r0
 80099f0:	d02a      	beq.n	8009a48 <scalbnf+0x64>
 80099f2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80099f6:	d304      	bcc.n	8009a02 <scalbnf+0x1e>
 80099f8:	4601      	mov	r1, r0
 80099fa:	f7f6 fbb7 	bl	800016c <__addsf3>
 80099fe:	4603      	mov	r3, r0
 8009a00:	e022      	b.n	8009a48 <scalbnf+0x64>
 8009a02:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8009a06:	d117      	bne.n	8009a38 <scalbnf+0x54>
 8009a08:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009a0c:	f7f6 fcb6 	bl	800037c <__aeabi_fmul>
 8009a10:	4a17      	ldr	r2, [pc, #92]	; (8009a70 <scalbnf+0x8c>)
 8009a12:	4603      	mov	r3, r0
 8009a14:	4295      	cmp	r5, r2
 8009a16:	db0b      	blt.n	8009a30 <scalbnf+0x4c>
 8009a18:	4604      	mov	r4, r0
 8009a1a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009a1e:	3a19      	subs	r2, #25
 8009a20:	442a      	add	r2, r5
 8009a22:	2afe      	cmp	r2, #254	; 0xfe
 8009a24:	dd0a      	ble.n	8009a3c <scalbnf+0x58>
 8009a26:	4913      	ldr	r1, [pc, #76]	; (8009a74 <scalbnf+0x90>)
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f361 001e 	bfi	r0, r1, #0, #31
 8009a2e:	e000      	b.n	8009a32 <scalbnf+0x4e>
 8009a30:	4911      	ldr	r1, [pc, #68]	; (8009a78 <scalbnf+0x94>)
 8009a32:	f7f6 fca3 	bl	800037c <__aeabi_fmul>
 8009a36:	e7e2      	b.n	80099fe <scalbnf+0x1a>
 8009a38:	0dd2      	lsrs	r2, r2, #23
 8009a3a:	e7f1      	b.n	8009a20 <scalbnf+0x3c>
 8009a3c:	2a00      	cmp	r2, #0
 8009a3e:	dd05      	ble.n	8009a4c <scalbnf+0x68>
 8009a40:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8009a44:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8009a48:	4618      	mov	r0, r3
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	f112 0f16 	cmn.w	r2, #22
 8009a50:	da05      	bge.n	8009a5e <scalbnf+0x7a>
 8009a52:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009a56:	4295      	cmp	r5, r2
 8009a58:	dce5      	bgt.n	8009a26 <scalbnf+0x42>
 8009a5a:	4907      	ldr	r1, [pc, #28]	; (8009a78 <scalbnf+0x94>)
 8009a5c:	e7e4      	b.n	8009a28 <scalbnf+0x44>
 8009a5e:	3219      	adds	r2, #25
 8009a60:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8009a64:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8009a68:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8009a6c:	e7e1      	b.n	8009a32 <scalbnf+0x4e>
 8009a6e:	bf00      	nop
 8009a70:	ffff3cb0 	.word	0xffff3cb0
 8009a74:	7149f2ca 	.word	0x7149f2ca
 8009a78:	0da24260 	.word	0x0da24260

08009a7c <abort>:
 8009a7c:	2006      	movs	r0, #6
 8009a7e:	b508      	push	{r3, lr}
 8009a80:	f000 f8f8 	bl	8009c74 <raise>
 8009a84:	2001      	movs	r0, #1
 8009a86:	f7f8 fd8c 	bl	80025a2 <_exit>
	...

08009a8c <__errno>:
 8009a8c:	4b01      	ldr	r3, [pc, #4]	; (8009a94 <__errno+0x8>)
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	200006b4 	.word	0x200006b4

08009a98 <__libc_init_array>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	2600      	movs	r6, #0
 8009a9c:	4d0c      	ldr	r5, [pc, #48]	; (8009ad0 <__libc_init_array+0x38>)
 8009a9e:	4c0d      	ldr	r4, [pc, #52]	; (8009ad4 <__libc_init_array+0x3c>)
 8009aa0:	1b64      	subs	r4, r4, r5
 8009aa2:	10a4      	asrs	r4, r4, #2
 8009aa4:	42a6      	cmp	r6, r4
 8009aa6:	d109      	bne.n	8009abc <__libc_init_array+0x24>
 8009aa8:	f000 f950 	bl	8009d4c <_init>
 8009aac:	2600      	movs	r6, #0
 8009aae:	4d0a      	ldr	r5, [pc, #40]	; (8009ad8 <__libc_init_array+0x40>)
 8009ab0:	4c0a      	ldr	r4, [pc, #40]	; (8009adc <__libc_init_array+0x44>)
 8009ab2:	1b64      	subs	r4, r4, r5
 8009ab4:	10a4      	asrs	r4, r4, #2
 8009ab6:	42a6      	cmp	r6, r4
 8009ab8:	d105      	bne.n	8009ac6 <__libc_init_array+0x2e>
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac0:	4798      	blx	r3
 8009ac2:	3601      	adds	r6, #1
 8009ac4:	e7ee      	b.n	8009aa4 <__libc_init_array+0xc>
 8009ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aca:	4798      	blx	r3
 8009acc:	3601      	adds	r6, #1
 8009ace:	e7f2      	b.n	8009ab6 <__libc_init_array+0x1e>
 8009ad0:	08009f8c 	.word	0x08009f8c
 8009ad4:	08009f8c 	.word	0x08009f8c
 8009ad8:	08009f8c 	.word	0x08009f8c
 8009adc:	08009f98 	.word	0x08009f98

08009ae0 <__itoa>:
 8009ae0:	1e93      	subs	r3, r2, #2
 8009ae2:	2b22      	cmp	r3, #34	; 0x22
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	d904      	bls.n	8009af4 <__itoa+0x14>
 8009aea:	2300      	movs	r3, #0
 8009aec:	461c      	mov	r4, r3
 8009aee:	700b      	strb	r3, [r1, #0]
 8009af0:	4620      	mov	r0, r4
 8009af2:	bd10      	pop	{r4, pc}
 8009af4:	2a0a      	cmp	r2, #10
 8009af6:	d109      	bne.n	8009b0c <__itoa+0x2c>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	da07      	bge.n	8009b0c <__itoa+0x2c>
 8009afc:	232d      	movs	r3, #45	; 0x2d
 8009afe:	700b      	strb	r3, [r1, #0]
 8009b00:	2101      	movs	r1, #1
 8009b02:	4240      	negs	r0, r0
 8009b04:	4421      	add	r1, r4
 8009b06:	f000 f8d1 	bl	8009cac <__utoa>
 8009b0a:	e7f1      	b.n	8009af0 <__itoa+0x10>
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	e7f9      	b.n	8009b04 <__itoa+0x24>

08009b10 <itoa>:
 8009b10:	f7ff bfe6 	b.w	8009ae0 <__itoa>

08009b14 <malloc>:
 8009b14:	4b02      	ldr	r3, [pc, #8]	; (8009b20 <malloc+0xc>)
 8009b16:	4601      	mov	r1, r0
 8009b18:	6818      	ldr	r0, [r3, #0]
 8009b1a:	f000 b819 	b.w	8009b50 <_malloc_r>
 8009b1e:	bf00      	nop
 8009b20:	200006b4 	.word	0x200006b4

08009b24 <memcpy>:
 8009b24:	440a      	add	r2, r1
 8009b26:	4291      	cmp	r1, r2
 8009b28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009b2c:	d100      	bne.n	8009b30 <memcpy+0xc>
 8009b2e:	4770      	bx	lr
 8009b30:	b510      	push	{r4, lr}
 8009b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b36:	4291      	cmp	r1, r2
 8009b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b3c:	d1f9      	bne.n	8009b32 <memcpy+0xe>
 8009b3e:	bd10      	pop	{r4, pc}

08009b40 <memset>:
 8009b40:	4603      	mov	r3, r0
 8009b42:	4402      	add	r2, r0
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d100      	bne.n	8009b4a <memset+0xa>
 8009b48:	4770      	bx	lr
 8009b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b4e:	e7f9      	b.n	8009b44 <memset+0x4>

08009b50 <_malloc_r>:
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b52:	1ccd      	adds	r5, r1, #3
 8009b54:	f025 0503 	bic.w	r5, r5, #3
 8009b58:	3508      	adds	r5, #8
 8009b5a:	2d0c      	cmp	r5, #12
 8009b5c:	bf38      	it	cc
 8009b5e:	250c      	movcc	r5, #12
 8009b60:	2d00      	cmp	r5, #0
 8009b62:	4606      	mov	r6, r0
 8009b64:	db01      	blt.n	8009b6a <_malloc_r+0x1a>
 8009b66:	42a9      	cmp	r1, r5
 8009b68:	d903      	bls.n	8009b72 <_malloc_r+0x22>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	6033      	str	r3, [r6, #0]
 8009b6e:	2000      	movs	r0, #0
 8009b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b72:	f000 f8dd 	bl	8009d30 <__malloc_lock>
 8009b76:	4921      	ldr	r1, [pc, #132]	; (8009bfc <_malloc_r+0xac>)
 8009b78:	680a      	ldr	r2, [r1, #0]
 8009b7a:	4614      	mov	r4, r2
 8009b7c:	b99c      	cbnz	r4, 8009ba6 <_malloc_r+0x56>
 8009b7e:	4f20      	ldr	r7, [pc, #128]	; (8009c00 <_malloc_r+0xb0>)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	b923      	cbnz	r3, 8009b8e <_malloc_r+0x3e>
 8009b84:	4621      	mov	r1, r4
 8009b86:	4630      	mov	r0, r6
 8009b88:	f000 f83c 	bl	8009c04 <_sbrk_r>
 8009b8c:	6038      	str	r0, [r7, #0]
 8009b8e:	4629      	mov	r1, r5
 8009b90:	4630      	mov	r0, r6
 8009b92:	f000 f837 	bl	8009c04 <_sbrk_r>
 8009b96:	1c43      	adds	r3, r0, #1
 8009b98:	d123      	bne.n	8009be2 <_malloc_r+0x92>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	6033      	str	r3, [r6, #0]
 8009ba0:	f000 f8cc 	bl	8009d3c <__malloc_unlock>
 8009ba4:	e7e3      	b.n	8009b6e <_malloc_r+0x1e>
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	1b5b      	subs	r3, r3, r5
 8009baa:	d417      	bmi.n	8009bdc <_malloc_r+0x8c>
 8009bac:	2b0b      	cmp	r3, #11
 8009bae:	d903      	bls.n	8009bb8 <_malloc_r+0x68>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	441c      	add	r4, r3
 8009bb4:	6025      	str	r5, [r4, #0]
 8009bb6:	e004      	b.n	8009bc2 <_malloc_r+0x72>
 8009bb8:	6863      	ldr	r3, [r4, #4]
 8009bba:	42a2      	cmp	r2, r4
 8009bbc:	bf0c      	ite	eq
 8009bbe:	600b      	streq	r3, [r1, #0]
 8009bc0:	6053      	strne	r3, [r2, #4]
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f000 f8ba 	bl	8009d3c <__malloc_unlock>
 8009bc8:	f104 000b 	add.w	r0, r4, #11
 8009bcc:	1d23      	adds	r3, r4, #4
 8009bce:	f020 0007 	bic.w	r0, r0, #7
 8009bd2:	1ac2      	subs	r2, r0, r3
 8009bd4:	d0cc      	beq.n	8009b70 <_malloc_r+0x20>
 8009bd6:	1a1b      	subs	r3, r3, r0
 8009bd8:	50a3      	str	r3, [r4, r2]
 8009bda:	e7c9      	b.n	8009b70 <_malloc_r+0x20>
 8009bdc:	4622      	mov	r2, r4
 8009bde:	6864      	ldr	r4, [r4, #4]
 8009be0:	e7cc      	b.n	8009b7c <_malloc_r+0x2c>
 8009be2:	1cc4      	adds	r4, r0, #3
 8009be4:	f024 0403 	bic.w	r4, r4, #3
 8009be8:	42a0      	cmp	r0, r4
 8009bea:	d0e3      	beq.n	8009bb4 <_malloc_r+0x64>
 8009bec:	1a21      	subs	r1, r4, r0
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f000 f808 	bl	8009c04 <_sbrk_r>
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d1dd      	bne.n	8009bb4 <_malloc_r+0x64>
 8009bf8:	e7cf      	b.n	8009b9a <_malloc_r+0x4a>
 8009bfa:	bf00      	nop
 8009bfc:	2000209c 	.word	0x2000209c
 8009c00:	200020a0 	.word	0x200020a0

08009c04 <_sbrk_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	2300      	movs	r3, #0
 8009c08:	4d05      	ldr	r5, [pc, #20]	; (8009c20 <_sbrk_r+0x1c>)
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	602b      	str	r3, [r5, #0]
 8009c10:	f7f8 fcd2 	bl	80025b8 <_sbrk>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_sbrk_r+0x1a>
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_sbrk_r+0x1a>
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	200020f4 	.word	0x200020f4

08009c24 <_raise_r>:
 8009c24:	291f      	cmp	r1, #31
 8009c26:	b538      	push	{r3, r4, r5, lr}
 8009c28:	4604      	mov	r4, r0
 8009c2a:	460d      	mov	r5, r1
 8009c2c:	d904      	bls.n	8009c38 <_raise_r+0x14>
 8009c2e:	2316      	movs	r3, #22
 8009c30:	6003      	str	r3, [r0, #0]
 8009c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c3a:	b112      	cbz	r2, 8009c42 <_raise_r+0x1e>
 8009c3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c40:	b94b      	cbnz	r3, 8009c56 <_raise_r+0x32>
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 f830 	bl	8009ca8 <_getpid_r>
 8009c48:	462a      	mov	r2, r5
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c52:	f000 b817 	b.w	8009c84 <_kill_r>
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d00a      	beq.n	8009c70 <_raise_r+0x4c>
 8009c5a:	1c59      	adds	r1, r3, #1
 8009c5c:	d103      	bne.n	8009c66 <_raise_r+0x42>
 8009c5e:	2316      	movs	r3, #22
 8009c60:	6003      	str	r3, [r0, #0]
 8009c62:	2001      	movs	r0, #1
 8009c64:	e7e7      	b.n	8009c36 <_raise_r+0x12>
 8009c66:	2400      	movs	r4, #0
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c6e:	4798      	blx	r3
 8009c70:	2000      	movs	r0, #0
 8009c72:	e7e0      	b.n	8009c36 <_raise_r+0x12>

08009c74 <raise>:
 8009c74:	4b02      	ldr	r3, [pc, #8]	; (8009c80 <raise+0xc>)
 8009c76:	4601      	mov	r1, r0
 8009c78:	6818      	ldr	r0, [r3, #0]
 8009c7a:	f7ff bfd3 	b.w	8009c24 <_raise_r>
 8009c7e:	bf00      	nop
 8009c80:	200006b4 	.word	0x200006b4

08009c84 <_kill_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	2300      	movs	r3, #0
 8009c88:	4d06      	ldr	r5, [pc, #24]	; (8009ca4 <_kill_r+0x20>)
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	4611      	mov	r1, r2
 8009c90:	602b      	str	r3, [r5, #0]
 8009c92:	f7f8 fc76 	bl	8002582 <_kill>
 8009c96:	1c43      	adds	r3, r0, #1
 8009c98:	d102      	bne.n	8009ca0 <_kill_r+0x1c>
 8009c9a:	682b      	ldr	r3, [r5, #0]
 8009c9c:	b103      	cbz	r3, 8009ca0 <_kill_r+0x1c>
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	bd38      	pop	{r3, r4, r5, pc}
 8009ca2:	bf00      	nop
 8009ca4:	200020f4 	.word	0x200020f4

08009ca8 <_getpid_r>:
 8009ca8:	f7f8 bc64 	b.w	8002574 <_getpid>

08009cac <__utoa>:
 8009cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cae:	b08b      	sub	sp, #44	; 0x2c
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	466e      	mov	r6, sp
 8009cb6:	4c1d      	ldr	r4, [pc, #116]	; (8009d2c <__utoa+0x80>)
 8009cb8:	f104 0c20 	add.w	ip, r4, #32
 8009cbc:	4637      	mov	r7, r6
 8009cbe:	6820      	ldr	r0, [r4, #0]
 8009cc0:	6861      	ldr	r1, [r4, #4]
 8009cc2:	3408      	adds	r4, #8
 8009cc4:	c703      	stmia	r7!, {r0, r1}
 8009cc6:	4564      	cmp	r4, ip
 8009cc8:	463e      	mov	r6, r7
 8009cca:	d1f7      	bne.n	8009cbc <__utoa+0x10>
 8009ccc:	7921      	ldrb	r1, [r4, #4]
 8009cce:	6820      	ldr	r0, [r4, #0]
 8009cd0:	7139      	strb	r1, [r7, #4]
 8009cd2:	1e91      	subs	r1, r2, #2
 8009cd4:	2922      	cmp	r1, #34	; 0x22
 8009cd6:	6038      	str	r0, [r7, #0]
 8009cd8:	f04f 0100 	mov.w	r1, #0
 8009cdc:	d904      	bls.n	8009ce8 <__utoa+0x3c>
 8009cde:	7019      	strb	r1, [r3, #0]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	b00b      	add	sp, #44	; 0x2c
 8009ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ce8:	1e58      	subs	r0, r3, #1
 8009cea:	4684      	mov	ip, r0
 8009cec:	fbb5 f7f2 	udiv	r7, r5, r2
 8009cf0:	fb02 5617 	mls	r6, r2, r7, r5
 8009cf4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8009cf8:	4476      	add	r6, lr
 8009cfa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009cfe:	460c      	mov	r4, r1
 8009d00:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009d04:	462e      	mov	r6, r5
 8009d06:	42b2      	cmp	r2, r6
 8009d08:	463d      	mov	r5, r7
 8009d0a:	f101 0101 	add.w	r1, r1, #1
 8009d0e:	d9ed      	bls.n	8009cec <__utoa+0x40>
 8009d10:	2200      	movs	r2, #0
 8009d12:	545a      	strb	r2, [r3, r1]
 8009d14:	1919      	adds	r1, r3, r4
 8009d16:	1aa5      	subs	r5, r4, r2
 8009d18:	42aa      	cmp	r2, r5
 8009d1a:	dae2      	bge.n	8009ce2 <__utoa+0x36>
 8009d1c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009d20:	780e      	ldrb	r6, [r1, #0]
 8009d22:	3201      	adds	r2, #1
 8009d24:	7006      	strb	r6, [r0, #0]
 8009d26:	f801 5901 	strb.w	r5, [r1], #-1
 8009d2a:	e7f4      	b.n	8009d16 <__utoa+0x6a>
 8009d2c:	08009f64 	.word	0x08009f64

08009d30 <__malloc_lock>:
 8009d30:	4801      	ldr	r0, [pc, #4]	; (8009d38 <__malloc_lock+0x8>)
 8009d32:	f000 b809 	b.w	8009d48 <__retarget_lock_acquire_recursive>
 8009d36:	bf00      	nop
 8009d38:	200020fc 	.word	0x200020fc

08009d3c <__malloc_unlock>:
 8009d3c:	4801      	ldr	r0, [pc, #4]	; (8009d44 <__malloc_unlock+0x8>)
 8009d3e:	f000 b804 	b.w	8009d4a <__retarget_lock_release_recursive>
 8009d42:	bf00      	nop
 8009d44:	200020fc 	.word	0x200020fc

08009d48 <__retarget_lock_acquire_recursive>:
 8009d48:	4770      	bx	lr

08009d4a <__retarget_lock_release_recursive>:
 8009d4a:	4770      	bx	lr

08009d4c <_init>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	bf00      	nop
 8009d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d52:	bc08      	pop	{r3}
 8009d54:	469e      	mov	lr, r3
 8009d56:	4770      	bx	lr

08009d58 <_fini>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	bf00      	nop
 8009d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5e:	bc08      	pop	{r3}
 8009d60:	469e      	mov	lr, r3
 8009d62:	4770      	bx	lr
